gplink-0.13.7 beta
Copyright (c) 1998-2005 gputils project
Listing File Generated: 7-19-2011  15:07:14
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:13 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _OSUpdateTime
                                           	global _OSUpdateUptime
                                           	global _OSUpdateDate
                                           	global _OSResetTime
                                           	global _OSResetDate
                                           	global _OSUptime
                                           	global _OSUpDate
                                           	global _Hora
                                           	global _Data
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_OS_RTC_0	udata
                                           _Hora	res	3
                                           
                                           udata_OS_RTC_1	udata
                                           _Data	res	4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_OS_RTC__OSUpDate	code
                                           _OSUpDate:
                                           ;	.line	296; brtos/OS_RTC.c	OSDate* OSUpDate(void)
006bbc   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006bbe   ffe5
006bc0   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006bc2   ffe5
006bc4   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006bc6   ffda
006bc8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006bca   ffd9
006bcc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006bce   ffe5
006bd0   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006bd2   ffe5
006bd4   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006bd6   ffe5
                                           ;	.line	298; brtos/OS_RTC.c	return &Data;
006bd8   0e03     movlw	0x3                	MOVLW	HIGH(_Data)
006bda   6e01     movwf	0x1, 0             	MOVWF	r0x01
006bdc   0ece     movlw	0xce               	MOVLW	LOW(_Data)
006bde   6e00     movwf	0, 0               	MOVWF	r0x00
006be0   0e80     movlw	0x80               	MOVLW	0x80
006be2   6e02     movwf	0x2, 0             	MOVWF	r0x02
006be4   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
006be6   fff4
006be8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006bea   fff3
006bec   5000     movf	0, 0, 0             	MOVF	r0x00, W
006bee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006bf0   f002
006bf2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006bf4   f001
006bf6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006bf8   f000
006bfa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006bfc   ffd9
006bfe   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006c00   ffda
006c02   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_OS_RTC__OSUptime	code
                                           _OSUptime:
                                           ;	.line	276; brtos/OS_RTC.c	OSTime* OSUptime(void)
006c04   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006c06   ffe5
006c08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006c0a   ffe5
006c0c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006c0e   ffda
006c10   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006c12   ffd9
006c14   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006c16   ffe5
006c18   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006c1a   ffe5
006c1c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006c1e   ffe5
                                           ;	.line	278; brtos/OS_RTC.c	return &Hora;
006c20   0e03     movlw	0x3                	MOVLW	HIGH(_Hora)
006c22   6e01     movwf	0x1, 0             	MOVWF	r0x01
006c24   0ee6     movlw	0xe6               	MOVLW	LOW(_Hora)
006c26   6e00     movwf	0, 0               	MOVWF	r0x00
006c28   0e80     movlw	0x80               	MOVLW	0x80
006c2a   6e02     movwf	0x2, 0             	MOVWF	r0x02
006c2c   c002     movff	0x2, 0xff4         	MOVFF	r0x02, PRODH
006c2e   fff4
006c30   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006c32   fff3
006c34   5000     movf	0, 0, 0             	MOVF	r0x00, W
006c36   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006c38   f002
006c3a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006c3c   f001
006c3e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006c40   f000
006c42   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006c44   ffd9
006c46   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006c48   ffda
006c4a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_OS_RTC__OSResetDate	code
                                           _OSResetDate:
                                           ;	.line	241; brtos/OS_RTC.c	void OSResetDate(OSDate *Ptr_Dia)
005dee   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005df0   ffe5
005df2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005df4   ffe5
005df6   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005df8   ffda
005dfa   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005dfc   ffd9
005dfe   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005e00   ffe5
005e02   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005e04   ffe5
005e06   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005e08   ffe5
005e0a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005e0c   ffe5
005e0e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005e10   ffe5
005e12   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005e14   ffe5
005e16   0e03     movlw	0x3                	MOVLW	0x03
005e18   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005e1a   f000
005e1c   0e04     movlw	0x4                	MOVLW	0x04
005e1e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005e20   f001
005e22   0e05     movlw	0x5                	MOVLW	0x05
005e24   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005e26   f002
005e28   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	246; brtos/OS_RTC.c	if (!iNesting)
005e2a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
005e2c   e101     bnz	0x5e30               	BNZ	_00196_DS_
                                           ;	.line	248; brtos/OS_RTC.c	OSEnterCritical();
005e2e   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00196_DS_:
                                           ;	.line	250; brtos/OS_RTC.c	Ptr_Dia->RTC_Day = 0;
005e30   0e00     movlw	0                  	MOVLW	0x00
005e32   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e34   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005e36   ffe9
005e38   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005e3a   fff3
005e3c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005e3e   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
005e40   f037
                                           ;	.line	251; brtos/OS_RTC.c	Ptr_Dia->RTC_Month = 0;
005e42   5000     movf	0, 0, 0             	MOVF	r0x00, W
005e44   0f01     addlw	0x1                	ADDLW	0x01
005e46   6e03     movwf	0x3, 0             	MOVWF	r0x03
005e48   0e00     movlw	0                  	MOVLW	0x00
005e4a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005e4c   6e04     movwf	0x4, 0             	MOVWF	r0x04
005e4e   0e00     movlw	0                  	MOVLW	0x00
005e50   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005e52   6e05     movwf	0x5, 0             	MOVWF	r0x05
005e54   0e00     movlw	0                  	MOVLW	0x00
005e56   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e58   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005e5a   ffe9
005e5c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005e5e   fff3
005e60   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005e62   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
005e64   f037
                                           ;	.line	252; brtos/OS_RTC.c	Ptr_Dia->RTC_Year = 0;
005e66   0e02     movlw	0x2                	MOVLW	0x02
005e68   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005e6a   0e00     movlw	0                  	MOVLW	0x00
005e6c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005e6e   0e00     movlw	0                  	MOVLW	0x00
005e70   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005e72   0e00     movlw	0                  	MOVLW	0x00
005e74   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005e76   0e00     movlw	0                  	MOVLW	0x00
005e78   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
005e7a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005e7c   ffe9
005e7e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005e80   fff3
005e82   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005e84   ecb3     call	0x6f66, 0           	CALL	__gptrput2
005e86   f037
005e88   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	255; brtos/OS_RTC.c	if (!iNesting)
005e8a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
005e8c   e101     bnz	0x5e90               	BNZ	_00199_DS_
                                           ;	.line	257; brtos/OS_RTC.c	OSExitCritical();
005e8e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00199_DS_:
005e90   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005e92   f005
005e94   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005e96   f004
005e98   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005e9a   f003
005e9c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005e9e   f002
005ea0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005ea2   f001
005ea4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005ea6   f000
005ea8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005eaa   ffd9
005eac   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005eae   ffda
005eb0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_OS_RTC__OSResetTime	code
                                           _OSResetTime:
                                           ;	.line	206; brtos/OS_RTC.c	void OSResetTime(OSTime *Ptr_Hora)
005f76   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005f78   ffe5
005f7a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005f7c   ffe5
005f7e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005f80   ffda
005f82   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005f84   ffd9
005f86   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005f88   ffe5
005f8a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005f8c   ffe5
005f8e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005f90   ffe5
005f92   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005f94   ffe5
005f96   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005f98   ffe5
005f9a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005f9c   ffe5
005f9e   0e03     movlw	0x3                	MOVLW	0x03
005fa0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005fa2   f000
005fa4   0e04     movlw	0x4                	MOVLW	0x04
005fa6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005fa8   f001
005faa   0e05     movlw	0x5                	MOVLW	0x05
005fac   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005fae   f002
005fb0   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	211; brtos/OS_RTC.c	if (!iNesting)
005fb2   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
005fb4   e101     bnz	0x5fb8               	BNZ	_00187_DS_
                                           ;	.line	213; brtos/OS_RTC.c	OSEnterCritical();
005fb6   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00187_DS_:
                                           ;	.line	215; brtos/OS_RTC.c	(Ptr_Hora->RTC_Second) = 0;
005fb8   0e00     movlw	0                  	MOVLW	0x00
005fba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fbc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005fbe   ffe9
005fc0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005fc2   fff3
005fc4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005fc6   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
005fc8   f037
                                           ;	.line	216; brtos/OS_RTC.c	(Ptr_Hora->RTC_Minute) = 0;
005fca   5000     movf	0, 0, 0             	MOVF	r0x00, W
005fcc   0f01     addlw	0x1                	ADDLW	0x01
005fce   6e03     movwf	0x3, 0             	MOVWF	r0x03
005fd0   0e00     movlw	0                  	MOVLW	0x00
005fd2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
005fd4   6e04     movwf	0x4, 0             	MOVWF	r0x04
005fd6   0e00     movlw	0                  	MOVLW	0x00
005fd8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005fda   6e05     movwf	0x5, 0             	MOVWF	r0x05
005fdc   0e00     movlw	0                  	MOVLW	0x00
005fde   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005fe0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005fe2   ffe9
005fe4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005fe6   fff3
005fe8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005fea   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
005fec   f037
                                           ;	.line	217; brtos/OS_RTC.c	(Ptr_Hora->RTC_Hour) = 0;
005fee   0e02     movlw	0x2                	MOVLW	0x02
005ff0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005ff2   0e00     movlw	0                  	MOVLW	0x00
005ff4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005ff6   0e00     movlw	0                  	MOVLW	0x00
005ff8   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005ffa   0e00     movlw	0                  	MOVLW	0x00
005ffc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ffe   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006000   ffe9
006002   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
006004   fff3
006006   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
006008   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00600a   f037
00600c   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	220; brtos/OS_RTC.c	if (!iNesting)
00600e   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
006010   e101     bnz	0x6014               	BNZ	_00190_DS_
                                           ;	.line	222; brtos/OS_RTC.c	OSExitCritical();
006012   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00190_DS_:
006014   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
006016   f005
006018   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00601a   f004
00601c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00601e   f003
006020   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006022   f002
006024   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006026   f001
006028   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00602a   f000
00602c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00602e   ffd9
006030   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006032   ffda
006034   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_OS_RTC__OSUpdateDate	code
                                           _OSUpdateDate:
                                           ;	.line	157; brtos/OS_RTC.c	void OSUpdateDate(OSDate *Ptr_Dia)
004c7e   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
004c80   ffe5
004c82   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004c84   ffe5
004c86   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
004c88   ffda
004c8a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004c8c   ffd9
004c8e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004c90   ffe5
004c92   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004c94   ffe5
004c96   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004c98   ffe5
004c9a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004c9c   ffe5
004c9e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004ca0   ffe5
004ca2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004ca4   ffe5
004ca6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004ca8   ffe5
004caa   0e03     movlw	0x3                	MOVLW	0x03
004cac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004cae   f000
004cb0   0e04     movlw	0x4                	MOVLW	0x04
004cb2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004cb4   f001
004cb6   0e05     movlw	0x5                	MOVLW	0x05
004cb8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004cba   f002
004cbc   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	162; brtos/OS_RTC.c	if (!iNesting)
004cbe   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
004cc0   e101     bnz	0x4cc4               	BNZ	_00160_DS_
                                           ;	.line	164; brtos/OS_RTC.c	OSEnterCritical();
004cc2   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00160_DS_:
                                           ;	.line	166; brtos/OS_RTC.c	Ptr_Dia -> RTC_Day++;    
004cc4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004cc6   ffe9
004cc8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004cca   fff3
004ccc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004cce   ec78     call	0x6ef0, 0           	CALL	__gptrget1
004cd0   f037
004cd2   6e03     movwf	0x3, 0             	MOVWF	r0x03
004cd4   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
004cd6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004cd8   ffe5
004cda   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004cdc   ffe9
004cde   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004ce0   fff3
004ce2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004ce4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004ce6   f037
                                           ;	.line	168; brtos/OS_RTC.c	if (Ptr_Dia -> RTC_Day == 30){ 
004ce8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004cea   0a1e     xorlw	0x1e               	XORLW	0x1e
004cec   e001     bz	0x4cf0                	BZ	_00177_DS_
004cee   d060     bra	0x4db0               	BRA	_00166_DS_
                                           _00177_DS_:
                                           ;	.line	171; brtos/OS_RTC.c	Ptr_Dia -> RTC_Day = 0;
004cf0   0e00     movlw	0                  	MOVLW	0x00
004cf2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004cf4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004cf6   ffe9
004cf8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004cfa   fff3
004cfc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004cfe   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004d00   f037
                                           ;	.line	172; brtos/OS_RTC.c	Ptr_Dia -> RTC_Month++;
004d02   5000     movf	0, 0, 0             	MOVF	r0x00, W
004d04   0f01     addlw	0x1                	ADDLW	0x01
004d06   6e03     movwf	0x3, 0             	MOVWF	r0x03
004d08   0e00     movlw	0                  	MOVLW	0x00
004d0a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004d0c   6e04     movwf	0x4, 0             	MOVWF	r0x04
004d0e   0e00     movlw	0                  	MOVLW	0x00
004d10   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004d12   6e05     movwf	0x5, 0             	MOVWF	r0x05
004d14   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004d16   ffe9
004d18   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004d1a   fff3
004d1c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004d1e   ec78     call	0x6ef0, 0           	CALL	__gptrget1
004d20   f037
004d22   6e06     movwf	0x6, 0             	MOVWF	r0x06
004d24   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
004d26   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004d28   ffe5
004d2a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004d2c   ffe9
004d2e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004d30   fff3
004d32   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004d34   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004d36   f037
                                           ;	.line	174; brtos/OS_RTC.c	if (Ptr_Dia -> RTC_Month == 12){
004d38   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004d3a   0a0c     xorlw	0xc                	XORLW	0x0c
004d3c   e139     bnz	0x4db0               	BNZ	_00166_DS_
                                           ;	.line	176; brtos/OS_RTC.c	Ptr_Dia -> RTC_Month = 0;
004d3e   0e00     movlw	0                  	MOVLW	0x00
004d40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d42   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004d44   ffe9
004d46   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004d48   fff3
004d4a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004d4c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004d4e   f037
                                           ;	.line	177; brtos/OS_RTC.c	Ptr_Dia -> RTC_Year++;
004d50   0e02     movlw	0x2                	MOVLW	0x02
004d52   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004d54   0e00     movlw	0                  	MOVLW	0x00
004d56   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004d58   0e00     movlw	0                  	MOVLW	0x00
004d5a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004d5c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004d5e   ffe9
004d60   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004d62   fff3
004d64   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004d66   ec50     call	0x6ea0, 0           	CALL	__gptrget2
004d68   f037
004d6a   6e03     movwf	0x3, 0             	MOVWF	r0x03
004d6c   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004d6e   f004
004d70   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
004d72   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004d74   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
004d76   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004d78   ffe5
004d7a   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
004d7c   fff4
004d7e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004d80   ffe9
004d82   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004d84   fff3
004d86   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004d88   ecb3     call	0x6f66, 0           	CALL	__gptrput2
004d8a   f037
                                           ;	.line	179; brtos/OS_RTC.c	if (Ptr_Dia -> RTC_Year == 9999){    // ano m�ximo 9999    
004d8c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004d8e   0a0f     xorlw	0xf                	XORLW	0x0f
004d90   e103     bnz	0x4d98               	BNZ	_00180_DS_
004d92   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
004d94   0a27     xorlw	0x27               	XORLW	0x27
004d96   e001     bz	0x4d9a                	BZ	_00181_DS_
                                           _00180_DS_:
004d98   d00b     bra	0x4db0               	BRA	_00166_DS_
                                           _00181_DS_:
                                           ;	.line	181; brtos/OS_RTC.c	Ptr_Dia -> RTC_Year = 0;
004d9a   0e00     movlw	0                  	MOVLW	0x00
004d9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004d9e   0e00     movlw	0                  	MOVLW	0x00
004da0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
004da2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004da4   ffe9
004da6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004da8   fff3
004daa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004dac   ecb3     call	0x6f66, 0           	CALL	__gptrput2
004dae   f037
                                           _00166_DS_:
004db0   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	185; brtos/OS_RTC.c	if (!iNesting)
004db2   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
004db4   e101     bnz	0x4db8               	BNZ	_00169_DS_
                                           ;	.line	187; brtos/OS_RTC.c	OSExitCritical();
004db6   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00169_DS_:
004db8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
004dba   f006
004dbc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004dbe   f005
004dc0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004dc2   f004
004dc4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004dc6   f003
004dc8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004dca   f002
004dcc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004dce   f001
004dd0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004dd2   f000
004dd4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004dd6   ffd9
004dd8   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
004dda   ffda
004ddc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_OS_RTC__OSUpdateUptime	code
                                           _OSUpdateUptime:
                                           ;	.line	108; brtos/OS_RTC.c	void OSUpdateUptime(OSTime *Ptr_Hora,OSDate *Ptr_Dia)
004670   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
004672   ffe5
004674   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004676   ffe5
004678   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00467a   ffda
00467c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00467e   ffd9
004680   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004682   ffe5
004684   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004686   ffe5
004688   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00468a   ffe5
00468c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00468e   ffe5
004690   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004692   ffe5
004694   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004696   ffe5
004698   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00469a   ffe5
00469c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00469e   ffe5
0046a0   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0046a2   ffe5
0046a4   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0046a6   ffe5
0046a8   0e03     movlw	0x3                	MOVLW	0x03
0046aa   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0046ac   f000
0046ae   0e04     movlw	0x4                	MOVLW	0x04
0046b0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0046b2   f001
0046b4   0e05     movlw	0x5                	MOVLW	0x05
0046b6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0046b8   f002
0046ba   0e06     movlw	0x6                	MOVLW	0x06
0046bc   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0046be   f003
0046c0   0e07     movlw	0x7                	MOVLW	0x07
0046c2   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0046c4   f004
0046c6   0e08     movlw	0x8                	MOVLW	0x08
0046c8   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0046ca   f005
0046cc   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	113; brtos/OS_RTC.c	if (!iNesting)
0046ce   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0046d0   e101     bnz	0x46d4               	BNZ	_00133_DS_
                                           ;	.line	115; brtos/OS_RTC.c	OSEnterCritical();
0046d2   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00133_DS_:
                                           ;	.line	117; brtos/OS_RTC.c	Ptr_Hora -> RTC_Second++;
0046d4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0046d6   ffe9
0046d8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0046da   fff3
0046dc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0046de   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0046e0   f037
0046e2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0046e4   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0046e6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0046e8   ffe5
0046ea   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0046ec   ffe9
0046ee   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0046f0   fff3
0046f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0046f4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0046f6   f037
                                           ;	.line	119; brtos/OS_RTC.c	if (Ptr_Hora -> RTC_Second == 60){
0046f8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0046fa   0a3c     xorlw	0x3c               	XORLW	0x3c
0046fc   e001     bz	0x4700                	BZ	_00150_DS_
0046fe   d067     bra	0x47ce               	BRA	_00139_DS_
                                           _00150_DS_:
                                           ;	.line	121; brtos/OS_RTC.c	Ptr_Hora -> RTC_Second = 0;
004700   0e00     movlw	0                  	MOVLW	0x00
004702   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004704   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004706   ffe9
004708   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00470a   fff3
00470c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00470e   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004710   f037
                                           ;	.line	122; brtos/OS_RTC.c	Ptr_Hora -> RTC_Minute++;
004712   5000     movf	0, 0, 0             	MOVF	r0x00, W
004714   0f01     addlw	0x1                	ADDLW	0x01
004716   6e06     movwf	0x6, 0             	MOVWF	r0x06
004718   0e00     movlw	0                  	MOVLW	0x00
00471a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00471c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00471e   0e00     movlw	0                  	MOVLW	0x00
004720   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004722   6e08     movwf	0x8, 0             	MOVWF	r0x08
004724   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
004726   ffe9
004728   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00472a   fff3
00472c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00472e   ec78     call	0x6ef0, 0           	CALL	__gptrget1
004730   f037
004732   6e09     movwf	0x9, 0             	MOVWF	r0x09
004734   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
004736   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
004738   ffe5
00473a   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00473c   ffe9
00473e   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
004740   fff3
004742   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004744   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004746   f037
                                           ;	.line	124; brtos/OS_RTC.c	if (Ptr_Hora -> RTC_Minute == 60){
004748   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00474a   0a3c     xorlw	0x3c               	XORLW	0x3c
00474c   e001     bz	0x4750                	BZ	_00152_DS_
00474e   d03f     bra	0x47ce               	BRA	_00139_DS_
                                           _00152_DS_:
                                           ;	.line	126; brtos/OS_RTC.c	Ptr_Hora -> RTC_Minute = 0;
004750   0e00     movlw	0                  	MOVLW	0x00
004752   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004754   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
004756   ffe9
004758   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00475a   fff3
00475c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00475e   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004760   f037
                                           ;	.line	127; brtos/OS_RTC.c	Ptr_Hora -> RTC_Hour++;
004762   0e02     movlw	0x2                	MOVLW	0x02
004764   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004766   0e00     movlw	0                  	MOVLW	0x00
004768   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00476a   0e00     movlw	0                  	MOVLW	0x00
00476c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00476e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004770   ffe9
004772   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004774   fff3
004776   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004778   ec78     call	0x6ef0, 0           	CALL	__gptrget1
00477a   f037
00477c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00477e   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
004780   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004782   ffe5
004784   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004786   ffe9
004788   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00478a   fff3
00478c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00478e   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004790   f037
                                           ;	.line	129; brtos/OS_RTC.c	if (Ptr_Hora -> RTC_Hour == 24){
004792   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004794   0a18     xorlw	0x18               	XORLW	0x18
004796   e11b     bnz	0x47ce               	BNZ	_00139_DS_
                                           ;	.line	131; brtos/OS_RTC.c	Ptr_Hora -> RTC_Hour = 0;
004798   0e00     movlw	0                  	MOVLW	0x00
00479a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00479c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00479e   ffe9
0047a0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0047a2   fff3
0047a4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0047a6   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0047a8   f037
                                           ;	.line	132; brtos/OS_RTC.c	Ptr_Dia -> RTC_Day++;
0047aa   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0047ac   ffe9
0047ae   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0047b0   fff3
0047b2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0047b4   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0047b6   f037
0047b8   6e00     movwf	0, 0               	MOVWF	r0x00
0047ba   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0047bc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0047be   ffe5
0047c0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0047c2   ffe9
0047c4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0047c6   fff3
0047c8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0047ca   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0047cc   f037
                                           _00139_DS_:
0047ce   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	137; brtos/OS_RTC.c	if (!iNesting)
0047d0   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0047d2   e101     bnz	0x47d6               	BNZ	_00142_DS_
                                           ;	.line	139; brtos/OS_RTC.c	OSExitCritical();
0047d4   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00142_DS_:
0047d6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0047d8   f009
0047da   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0047dc   f008
0047de   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0047e0   f007
0047e2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0047e4   f006
0047e6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0047e8   f005
0047ea   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0047ec   f004
0047ee   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0047f0   f003
0047f2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0047f4   f002
0047f6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0047f8   f001
0047fa   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0047fc   f000
0047fe   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004800   ffd9
004802   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
004804   ffda
004806   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_OS_RTC__OSUpdateTime	code
                                           _OSUpdateTime:
                                           ;	.line	59; brtos/OS_RTC.c	void OSUpdateTime(OSTime *Ptr_Hora)
00507e   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005080   ffe5
005082   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005084   ffe5
005086   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005088   ffda
00508a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00508c   ffd9
00508e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005090   ffe5
005092   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005094   ffe5
005096   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005098   ffe5
00509a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00509c   ffe5
00509e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0050a0   ffe5
0050a2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0050a4   ffe5
0050a6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0050a8   ffe5
0050aa   0e03     movlw	0x3                	MOVLW	0x03
0050ac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0050ae   f000
0050b0   0e04     movlw	0x4                	MOVLW	0x04
0050b2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0050b4   f001
0050b6   0e05     movlw	0x5                	MOVLW	0x05
0050b8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0050ba   f002
0050bc   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	64; brtos/OS_RTC.c	if (!iNesting)
0050be   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0050c0   e101     bnz	0x50c4               	BNZ	_00106_DS_
                                           ;	.line	66; brtos/OS_RTC.c	OSEnterCritical();
0050c2   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00106_DS_:
                                           ;	.line	68; brtos/OS_RTC.c	Ptr_Hora -> RTC_Second++;
0050c4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0050c6   ffe9
0050c8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0050ca   fff3
0050cc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0050ce   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0050d0   f037
0050d2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0050d4   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
0050d6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0050d8   ffe5
0050da   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0050dc   ffe9
0050de   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0050e0   fff3
0050e2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0050e4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0050e6   f037
                                           ;	.line	70; brtos/OS_RTC.c	if (Ptr_Hora -> RTC_Second == 60){
0050e8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0050ea   0a3c     xorlw	0x3c               	XORLW	0x3c
0050ec   e001     bz	0x50f0                	BZ	_00123_DS_
0050ee   d054     bra	0x5198               	BRA	_00112_DS_
                                           _00123_DS_:
                                           ;	.line	72; brtos/OS_RTC.c	Ptr_Hora -> RTC_Second = 0;
0050f0   0e00     movlw	0                  	MOVLW	0x00
0050f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0050f4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0050f6   ffe9
0050f8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0050fa   fff3
0050fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0050fe   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
005100   f037
                                           ;	.line	73; brtos/OS_RTC.c	Ptr_Hora -> RTC_Minute++;
005102   5000     movf	0, 0, 0             	MOVF	r0x00, W
005104   0f01     addlw	0x1                	ADDLW	0x01
005106   6e03     movwf	0x3, 0             	MOVWF	r0x03
005108   0e00     movlw	0                  	MOVLW	0x00
00510a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00510c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00510e   0e00     movlw	0                  	MOVLW	0x00
005110   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
005112   6e05     movwf	0x5, 0             	MOVWF	r0x05
005114   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005116   ffe9
005118   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00511a   fff3
00511c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00511e   ec78     call	0x6ef0, 0           	CALL	__gptrget1
005120   f037
005122   6e06     movwf	0x6, 0             	MOVWF	r0x06
005124   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
005126   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005128   ffe5
00512a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00512c   ffe9
00512e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005130   fff3
005132   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005134   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
005136   f037
                                           ;	.line	75; brtos/OS_RTC.c	if (Ptr_Hora -> RTC_Minute == 60){
005138   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00513a   0a3c     xorlw	0x3c               	XORLW	0x3c
00513c   e12d     bnz	0x5198               	BNZ	_00112_DS_
                                           ;	.line	77; brtos/OS_RTC.c	Ptr_Hora -> RTC_Minute = 0;
00513e   0e00     movlw	0                  	MOVLW	0x00
005140   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005142   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005144   ffe9
005146   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005148   fff3
00514a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00514c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00514e   f037
                                           ;	.line	78; brtos/OS_RTC.c	Ptr_Hora -> RTC_Hour++;
005150   0e02     movlw	0x2                	MOVLW	0x02
005152   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005154   0e00     movlw	0                  	MOVLW	0x00
005156   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005158   0e00     movlw	0                  	MOVLW	0x00
00515a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00515c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00515e   ffe9
005160   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005162   fff3
005164   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005166   ec78     call	0x6ef0, 0           	CALL	__gptrget1
005168   f037
00516a   6e03     movwf	0x3, 0             	MOVWF	r0x03
00516c   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
00516e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005170   ffe5
005172   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005174   ffe9
005176   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005178   fff3
00517a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00517c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00517e   f037
                                           ;	.line	80; brtos/OS_RTC.c	if (Ptr_Hora -> RTC_Hour == 24){
005180   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005182   0a18     xorlw	0x18               	XORLW	0x18
005184   e109     bnz	0x5198               	BNZ	_00112_DS_
                                           ;	.line	82; brtos/OS_RTC.c	Ptr_Hora -> RTC_Hour = 0;
005186   0e00     movlw	0                  	MOVLW	0x00
005188   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00518a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00518c   ffe9
00518e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
005190   fff3
005192   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005194   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
005196   f037
                                           _00112_DS_:
005198   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	87; brtos/OS_RTC.c	if (!iNesting)
00519a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00519c   e101     bnz	0x51a0               	BNZ	_00115_DS_
                                           ;	.line	89; brtos/OS_RTC.c	OSExitCritical();
00519e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00115_DS_:
0051a0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0051a2   f006
0051a4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0051a6   f005
0051a8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0051aa   f004
0051ac   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0051ae   f003
0051b0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0051b2   f002
0051b4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0051b6   f001
0051b8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0051ba   f000
0051bc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0051be   ffd9
0051c0   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0051c2   ffda
0051c4   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1620 (0x0654) bytes ( 1.24%)
                                           ;           	  810 (0x032a) words
                                           ; udata size:	    7 (0x0007) bytes ( 0.55%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:13 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _System_Time
                                           	global _Task_2
                                           	global _Task_3
                                           	global _Task_Serial
                                           	global _Task_LCD
                                           	global _BufferLCD
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _SemTeste
                                           	extern _QSerialRX
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _OSResetTime
                                           	extern _OSResetDate
                                           	extern _OSUpdateUptime
                                           	extern _DelayTask
                                           	extern _OSSemPend
                                           	extern _OSSemPost
                                           	extern _write_lcd
                                           	extern _write_numero
                                           	extern _init_lcd
                                           	extern _posiciona
                                           	extern _InicializaAD
                                           	extern _LeValorAD
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           
                                           udata_tasks_0	udata
                                           _Task_Serial_pedido_1_1	res	1
                                           
                                           udata_tasks_1	udata
                                           _BufferLCD	res	17
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_tasks__Task_LCD	code
                                           _Task_LCD:
                                           ;	.line	180; tasks.c	void Task_LCD(void)
005306   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005308   ffe5
00530a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00530c   ffe5
00530e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005310   ffda
005312   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005314   ffd9
005316   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005318   ffe5
00531a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00531c   ffe5
00531e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005320   ffe5
                                           ;	.line	184; tasks.c	init_lcd();
005322   ec2b     call	0x5c56, 0           	CALL	_init_lcd
005324   f02e
                                           ;	.line	187; tasks.c	BufferLCD[0] = 0xE4;
005326   0ee4     movlw	0xe4               	MOVLW	0xe4
005328   0103     movlb	0x3                	BANKSEL	_BufferLCD
00532a   6f93     movwf	0x93, 0x1          	MOVWF	_BufferLCD, B
                                           ;	.line	189; tasks.c	write_lcd(BufferLCD);
00532c   0e03     movlw	0x3                	MOVLW	HIGH(_BufferLCD)
00532e   6e01     movwf	0x1, 0             	MOVWF	r0x01
005330   0e93     movlw	0x93               	MOVLW	LOW(_BufferLCD)
005332   6e00     movwf	0, 0               	MOVWF	r0x00
005334   0e80     movlw	0x80               	MOVLW	0x80
005336   6e02     movwf	0x2, 0             	MOVWF	r0x02
005338   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00533a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00533c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00533e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005340   5000     movf	0, 0, 0             	MOVF	r0x00, W
005342   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005344   ec42     call	0x6484, 0           	CALL	_write_lcd
005346   f032
005348   0e03     movlw	0x3                	MOVLW	0x03
00534a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00534c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00534e   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	191; tasks.c	posiciona(2, 1);
005350   0e01     movlw	0x1                	MOVLW	0x01
005352   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005354   0e02     movlw	0x2                	MOVLW	0x02
005356   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005358   ecc4     call	0x6788, 0           	CALL	_posiciona
00535a   f033
00535c   0e02     movlw	0x2                	MOVLW	0x02
00535e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005360   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005362   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	193; tasks.c	write_lcd(BufferLCD);
005364   0e03     movlw	0x3                	MOVLW	HIGH(_BufferLCD)
005366   6e01     movwf	0x1, 0             	MOVWF	r0x01
005368   0e93     movlw	0x93               	MOVLW	LOW(_BufferLCD)
00536a   6e00     movwf	0, 0               	MOVWF	r0x00
00536c   0e80     movlw	0x80               	MOVLW	0x80
00536e   6e02     movwf	0x2, 0             	MOVWF	r0x02
005370   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005372   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005374   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005376   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005378   5000     movf	0, 0, 0             	MOVF	r0x00, W
00537a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00537c   ec42     call	0x6484, 0           	CALL	_write_lcd
00537e   f032
005380   0e03     movlw	0x3                	MOVLW	0x03
005382   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005384   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005386   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	196; tasks.c	TRISA = 0xFF;   
005388   0eff     movlw	0xff               	MOVLW	0xff
00538a   6e92     movwf	0x92, 0            	MOVWF	_TRISA
                                           ;	.line	198; tasks.c	InicializaAD();
00538c   ec94     call	0x6528, 0           	CALL	_InicializaAD
00538e   f032
                                           ;	.line	201; tasks.c	LATCbits.LATC5 = 1;
005390   8a8b     bsf	0x8b, 0x5, 0         	BSF	_LATCbits, 5
                                           ;	.line	202; tasks.c	TRISCbits.TRISC5 = 0;
005392   9a94     bcf	0x94, 0x5, 0         	BCF	_TRISCbits, 5
                                           ;	.line	205; tasks.c	LATCbits.LATC2 = 0;
005394   948b     bcf	0x8b, 0x2, 0         	BCF	_LATCbits, 2
                                           ;	.line	206; tasks.c	TRISCbits.TRISC2 = 0;
005396   9494     bcf	0x94, 0x2, 0         	BCF	_TRISCbits, 2
                                           ;	.line	208; tasks.c	uiValorAD = LeValorAD();
005398   ec1b     call	0x6036, 0           	CALL	_LeValorAD
00539a   f030
                                           _00163_DS_:
                                           ;	.line	215; tasks.c	uiValorAD = LeValorAD();
00539c   ec1b     call	0x6036, 0           	CALL	_LeValorAD
00539e   f030
0053a0   6e00     movwf	0, 0               	MOVWF	r0x00
0053a2   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0053a4   f001
                                           ;	.line	217; tasks.c	if (uiValorAD >= 30)
0053a6   0e00     movlw	0                  	MOVLW	0x00
0053a8   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0053aa   e102     bnz	0x53b0               	BNZ	_00169_DS_
0053ac   0e1e     movlw	0x1e               	MOVLW	0x1e
0053ae   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00169_DS_:
0053b0   e303     bnc	0x53b8               	BNC	_00160_DS_
                                           ;	.line	220; tasks.c	LATCbits.LATC2 = 1;    
0053b2   848b     bsf	0x8b, 0x2, 0         	BSF	_LATCbits, 2
                                           ;	.line	222; tasks.c	LATCbits.LATC5 = 0;
0053b4   9a8b     bcf	0x8b, 0x5, 0         	BCF	_LATCbits, 5
0053b6   d002     bra	0x53bc               	BRA	_00161_DS_
                                           _00160_DS_:
                                           ;	.line	226; tasks.c	LATCbits.LATC2 = 0;    
0053b8   948b     bcf	0x8b, 0x2, 0         	BCF	_LATCbits, 2
                                           ;	.line	228; tasks.c	LATCbits.LATC5 = 1;
0053ba   8a8b     bsf	0x8b, 0x5, 0         	BSF	_LATCbits, 5
                                           _00161_DS_:
                                           ;	.line	231; tasks.c	posiciona(2, 7);
0053bc   0e07     movlw	0x7                	MOVLW	0x07
0053be   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053c0   0e02     movlw	0x2                	MOVLW	0x02
0053c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053c4   ecc4     call	0x6788, 0           	CALL	_posiciona
0053c6   f033
0053c8   0e02     movlw	0x2                	MOVLW	0x02
0053ca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0053cc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0053ce   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	232; tasks.c	write_numero(uiValorAD);
0053d0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0053d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053d4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0053d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0053d8   ecc3     call	0x5b86, 0           	CALL	_write_numero
0053da   f02d
0053dc   0e02     movlw	0x2                	MOVLW	0x02
0053de   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0053e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0053e2   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	234; tasks.c	BufferLCD[0]=0xDF;
0053e4   0edf     movlw	0xdf               	MOVLW	0xdf
0053e6   0103     movlb	0x3                	BANKSEL	_BufferLCD
0053e8   6f93     movwf	0x93, 0x1          	MOVWF	_BufferLCD, B
                                           ;	.line	235; tasks.c	BufferLCD[1]='C';
0053ea   0e43     movlw	0x43               	MOVLW	0x43
0053ec   0103     movlb	0x3                	BANKSEL	(_BufferLCD + 1)
0053ee   6f94     movwf	0x94, 0x1          	MOVWF	(_BufferLCD + 1), B
0053f0   0103     movlb	0x3                	BANKSEL	(_BufferLCD + 2)
                                           ;	.line	236; tasks.c	BufferLCD[2]=0;
0053f2   6b95     clrf	0x95, 0x1           	CLRF	(_BufferLCD + 2), B
                                           ;	.line	237; tasks.c	write_lcd(BufferLCD);
0053f4   0e03     movlw	0x3                	MOVLW	HIGH(_BufferLCD)
0053f6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0053f8   0e93     movlw	0x93               	MOVLW	LOW(_BufferLCD)
0053fa   6e00     movwf	0, 0               	MOVWF	r0x00
0053fc   0e80     movlw	0x80               	MOVLW	0x80
0053fe   6e02     movwf	0x2, 0             	MOVWF	r0x02
005400   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005402   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005404   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005406   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005408   5000     movf	0, 0, 0             	MOVF	r0x00, W
00540a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00540c   ec42     call	0x6484, 0           	CALL	_write_lcd
00540e   f032
005410   0e03     movlw	0x3                	MOVLW	0x03
005412   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005414   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005416   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	239; tasks.c	DelayTask(1000);
005418   0e03     movlw	0x3                	MOVLW	0x03
00541a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00541c   0ee8     movlw	0xe8               	MOVLW	0xe8
00541e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005420   eca8     call	0x2d50, 0           	CALL	_DelayTask
005422   f016
005424   0e02     movlw	0x2                	MOVLW	0x02
005426   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005428   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00542a   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
00542c   d7b7     bra	0x539c               	BRA	_00163_DS_
00542e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005430   f002
005432   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005434   f001
005436   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005438   f000
00543a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00543c   ffd9
00543e   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005440   ffda
005442   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_tasks__Task_Serial	code
                                           _Task_Serial:
                                           ;	.line	105; tasks.c	void Task_Serial(void)
006f12   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006f14   ffe5
006f16   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006f18   ffe5
006f1a   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006f1c   ffda
006f1e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006f20   ffd9
006f22   0103     movlb	0x3                	BANKSEL	_Task_Serial_pedido_1_1
                                           ;	.line	108; tasks.c	volatile INT8U pedido = 0;
006f24   6bfe     clrf	0xfe, 0x1           	CLRF	_Task_Serial_pedido_1_1, B
                                           _00152_DS_:
006f26   d7ff     bra	0x6f26               	BRA	_00152_DS_
006f28   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006f2a   ffd9
006f2c   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006f2e   ffda
006f30   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_tasks__Task_3	code
                                           _Task_3:
                                           ;	.line	69; tasks.c	void Task_3(void)
00680a   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00680c   ffe5
00680e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006810   ffe5
006812   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006814   ffda
006816   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006818   ffd9
00681a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00681c   ffe5
00681e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006820   ffe5
                                           ;	.line	72; tasks.c	INT8U seq1 = 0x08;
006822   0e08     movlw	0x8                	MOVLW	0x08
006824   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	73; tasks.c	INT8U sent1 = 0;
006826   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	75; tasks.c	LATB = 0;    
006828   6a8a     clrf	0x8a, 0             	CLRF	_LATB
                                           ;	.line	76; tasks.c	TRISB = 0;
00682a   6a93     clrf	0x93, 0             	CLRF	_TRISB
                                           _00135_DS_:
                                           ;	.line	81; tasks.c	LATB=seq1;
00682c   c000     movff	0, 0xf8a           	MOVFF	r0x00, _LATB
00682e   ff8a
                                           ;	.line	84; tasks.c	if(sent1==0){ seq1<<=1;
006830   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006832   e108     bnz	0x6844               	BNZ	_00132_DS_
006834   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
006836   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
                                           ;	.line	87; tasks.c	if(seq1==0x80) sent1=1;
006838   5000     movf	0, 0, 0             	MOVF	r0x00, W
00683a   0a80     xorlw	0x80               	XORLW	0x80
00683c   e109     bnz	0x6850               	BNZ	_00133_DS_
00683e   0e01     movlw	0x1                	MOVLW	0x01
006840   6e01     movwf	0x1, 0             	MOVWF	r0x01
006842   d006     bra	0x6850               	BRA	_00133_DS_
                                           _00132_DS_:
                                           ;	.line	90; tasks.c	else{ seq1>>=1;
006844   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
006846   3200     rrcf	0, 0x1, 0           	RRCF	r0x00, F
                                           ;	.line	93; tasks.c	if(seq1==0x01) sent1=0;
006848   5000     movf	0, 0, 0             	MOVF	r0x00, W
00684a   0a01     xorlw	0x1                	XORLW	0x01
00684c   e101     bnz	0x6850               	BNZ	_00133_DS_
00684e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00133_DS_:
                                           ;	.line	96; tasks.c	(void)OSSemPend(SemTeste,0);
006850   0e00     movlw	0                  	MOVLW	0x00
006852   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006854   0e00     movlw	0                  	MOVLW	0x00
006856   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006858   0103     movlb	0x3                	BANKSEL	(_SemTeste + 2)
00685a   51eb     movf	0xeb, 0, 0x1        	MOVF	(_SemTeste + 2), W, B
00685c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00685e   0103     movlb	0x3                	BANKSEL	(_SemTeste + 1)
006860   51ea     movf	0xea, 0, 0x1        	MOVF	(_SemTeste + 1), W, B
006862   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006864   0103     movlb	0x3                	BANKSEL	_SemTeste
006866   51e9     movf	0xe9, 0, 0x1        	MOVF	_SemTeste, W, B
006868   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00686a   ece8     call	0x9d0, 0            	CALL	_OSSemPend
00686c   f004
00686e   0e05     movlw	0x5                	MOVLW	0x05
006870   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006872   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006874   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006876   d7da     bra	0x682c               	BRA	_00135_DS_
006878   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00687a   f001
00687c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00687e   f000
006880   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006882   ffd9
006884   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006886   ffda
006888   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_tasks__Task_2	code
                                           _Task_2:
                                           ;	.line	49; tasks.c	void Task_2(void)
006b6c   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006b6e   ffe5
006b70   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006b72   ffe5
006b74   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006b76   ffda
006b78   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006b7a   ffd9
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	52; tasks.c	INT8U cont = 0;   
006b7c   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00120_DS_:
                                           ;	.line	58; tasks.c	(void)DelayTask(35);
006b7e   0e00     movlw	0                  	MOVLW	0x00
006b80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b82   0e23     movlw	0x23               	MOVLW	0x23
006b84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b86   eca8     call	0x2d50, 0           	CALL	_DelayTask
006b88   f016
006b8a   0e02     movlw	0x2                	MOVLW	0x02
006b8c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006b8e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006b90   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006b92   0103     movlb	0x3                	BANKSEL	(_SemTeste + 2)
                                           ;	.line	61; tasks.c	(void)OSSemPost(SemTeste);
006b94   51eb     movf	0xeb, 0, 0x1        	MOVF	(_SemTeste + 2), W, B
006b96   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b98   0103     movlb	0x3                	BANKSEL	(_SemTeste + 1)
006b9a   51ea     movf	0xea, 0, 0x1        	MOVF	(_SemTeste + 1), W, B
006b9c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006b9e   0103     movlb	0x3                	BANKSEL	_SemTeste
006ba0   51e9     movf	0xe9, 0, 0x1        	MOVF	_SemTeste, W, B
006ba2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006ba4   ecef     call	0x3bde, 0           	CALL	_OSSemPost
006ba6   f01d
006ba8   0e03     movlw	0x3                	MOVLW	0x03
006baa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006bac   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006bae   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006bb0   d7e6     bra	0x6b7e               	BRA	_00120_DS_
006bb2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006bb4   ffd9
006bb6   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006bb8   ffda
006bba   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_tasks__System_Time	code
                                           _System_Time:
                                           ;	.line	22; tasks.c	void System_Time(void)
0057b4   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0057b6   ffe5
0057b8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0057ba   ffe5
0057bc   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0057be   ffda
0057c0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0057c2   ffd9
0057c4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0057c6   ffe5
0057c8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0057ca   ffe5
0057cc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0057ce   ffe5
0057d0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0057d2   ffe5
0057d4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0057d6   ffe5
0057d8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0057da   ffe5
0057dc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0057de   ffe5
                                           ;	.line	25; tasks.c	INT8U i = 0;
0057e0   6a00     clrf	0, 0                	CLRF	r0x00
                                           ;	.line	26; tasks.c	OSResetTime(&Hora); 
0057e2   0e03     movlw	0x3                	MOVLW	HIGH(_Hora)
0057e4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0057e6   0ee6     movlw	0xe6               	MOVLW	LOW(_Hora)
0057e8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0057ea   0e80     movlw	0x80               	MOVLW	0x80
0057ec   6e03     movwf	0x3, 0             	MOVWF	r0x03
0057ee   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0057f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057f2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0057f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057f6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0057f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0057fa   ecbb     call	0x5f76, 0           	CALL	_OSResetTime
0057fc   f02f
0057fe   0e03     movlw	0x3                	MOVLW	0x03
005800   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005802   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005804   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	27; tasks.c	OSResetDate(&Data);  
005806   0e03     movlw	0x3                	MOVLW	HIGH(_Data)
005808   6e02     movwf	0x2, 0             	MOVWF	r0x02
00580a   0ece     movlw	0xce               	MOVLW	LOW(_Data)
00580c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00580e   0e80     movlw	0x80               	MOVLW	0x80
005810   6e03     movwf	0x3, 0             	MOVWF	r0x03
005812   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005814   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005816   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005818   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00581a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00581c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00581e   ecf7     call	0x5dee, 0           	CALL	_OSResetDate
005820   f02e
005822   0e03     movlw	0x3                	MOVLW	0x03
005824   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005826   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005828   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           _00108_DS_:
00582a   0004     clrwdt                   	CLRWDT
                                           	
                                           ;	.line	37; tasks.c	(void)DelayTask(10);
00582c   0e00     movlw	0                  	MOVLW	0x00
00582e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005830   0e0a     movlw	0xa                	MOVLW	0x0a
005832   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005834   eca8     call	0x2d50, 0           	CALL	_DelayTask
005836   f016
005838   0e02     movlw	0x2                	MOVLW	0x02
00583a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00583c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00583e   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	38; tasks.c	i++;
005840   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
                                           ;	.line	39; tasks.c	if (i >= 100)
005842   0e64     movlw	0x64               	MOVLW	0x64
005844   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
005846   e3f1     bnc	0x582a               	BNC	_00108_DS_
                                           ;	.line	41; tasks.c	OSUpdateUptime(&Hora,&Data);
005848   0e03     movlw	0x3                	MOVLW	HIGH(_Hora)
00584a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00584c   0ee6     movlw	0xe6               	MOVLW	LOW(_Hora)
00584e   6e01     movwf	0x1, 0             	MOVWF	r0x01
005850   0e80     movlw	0x80               	MOVLW	0x80
005852   6e03     movwf	0x3, 0             	MOVWF	r0x03
005854   0e03     movlw	0x3                	MOVLW	HIGH(_Data)
005856   6e05     movwf	0x5, 0             	MOVWF	r0x05
005858   0ece     movlw	0xce               	MOVLW	LOW(_Data)
00585a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00585c   0e80     movlw	0x80               	MOVLW	0x80
00585e   6e06     movwf	0x6, 0             	MOVWF	r0x06
005860   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005862   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005864   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005866   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005868   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00586a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00586c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00586e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005870   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005872   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005874   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005876   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005878   ec38     call	0x4670, 0           	CALL	_OSUpdateUptime
00587a   f023
00587c   0e06     movlw	0x6                	MOVLW	0x06
00587e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005880   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005882   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	42; tasks.c	i = 0;
005884   6a00     clrf	0, 0                	CLRF	r0x00
005886   d7d1     bra	0x582a               	BRA	_00108_DS_
005888   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00588a   f006
00588c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00588e   f005
005890   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005892   f004
005894   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005896   f003
005898   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00589a   f002
00589c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00589e   f001
0058a0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0058a2   f000
0058a4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0058a6   ffd9
0058a8   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0058aa   ffda
0058ac   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  810 (0x032a) bytes ( 0.62%)
                                           ;           	  405 (0x0195) words
                                           ; udata size:	   18 (0x0012) bytes ( 1.41%)
                                           ; access size:	    7 (0x0007) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:13 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _OSSemCreate
                                           	global _OSSemDelete
                                           	global _OSSemPend
                                           	global _OSSemPost
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrput2
                                           	extern __gptrput3
                                           	extern __gptrget3
                                           	extern __gptrget1
                                           	extern __gptrget2
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _SwitchContext
                                           	extern _SAScheduler
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_semaphore__OSSemPost	code
                                           _OSSemPost:
                                           ;	.line	348; brtos/semaphore.c	INT8U OSSemPost(BRTOS_Sem *pont_event)
003bde   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
003be0   ffe5
003be2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003be4   ffe5
003be6   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
003be8   ffda
003bea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003bec   ffd9
003bee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003bf0   ffe5
003bf2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003bf4   ffe5
003bf6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003bf8   ffe5
003bfa   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003bfc   ffe5
003bfe   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003c00   ffe5
003c02   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003c04   ffe5
003c06   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003c08   ffe5
003c0a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
003c0c   ffe5
003c0e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003c10   ffe5
003c12   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003c14   ffe5
003c16   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003c18   ffe5
003c1a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
003c1c   ffe5
003c1e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003c20   ffe5
003c22   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003c24   ffe5
003c26   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003c28   ffe5
003c2a   0e03     movlw	0x3                	MOVLW	0x03
003c2c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003c2e   f000
003c30   0e04     movlw	0x4                	MOVLW	0x04
003c32   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003c34   f001
003c36   0e05     movlw	0x5                	MOVLW	0x05
003c38   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003c3a   f002
003c3c   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	366; brtos/semaphore.c	if (!iNesting)
003c3e   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
003c40   e101     bnz	0x3c44               	BNZ	_00202_DS_
                                           ;	.line	368; brtos/semaphore.c	OSEnterCritical();
003c42   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00202_DS_:
                                           ;	.line	397; brtos/semaphore.c	if (pont_event->OSEventWait != 0)
003c44   5000     movf	0, 0, 0             	MOVF	r0x00, W
003c46   0f02     addlw	0x2                	ADDLW	0x02
003c48   6e03     movwf	0x3, 0             	MOVWF	r0x03
003c4a   0e00     movlw	0                  	MOVLW	0x00
003c4c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003c4e   6e04     movwf	0x4, 0             	MOVWF	r0x04
003c50   0e00     movlw	0                  	MOVLW	0x00
003c52   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003c54   6e05     movwf	0x5, 0             	MOVWF	r0x05
003c56   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003c58   ffe9
003c5a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003c5c   fff3
003c5e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003c60   ec78     call	0x6ef0, 0           	CALL	__gptrget1
003c62   f037
003c64   6e06     movwf	0x6, 0             	MOVWF	r0x06
003c66   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003c68   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003c6a   d074     bra	0x3d54               	BRA	_00208_DS_
                                           ;	.line	400; brtos/semaphore.c	iPriority = SAScheduler(pont_event->OSEventWaitList);    
003c6c   5000     movf	0, 0, 0             	MOVF	r0x00, W
003c6e   0f03     addlw	0x3                	ADDLW	0x03
003c70   6e06     movwf	0x6, 0             	MOVWF	r0x06
003c72   0e00     movlw	0                  	MOVLW	0x00
003c74   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003c76   6e07     movwf	0x7, 0             	MOVWF	r0x07
003c78   0e00     movlw	0                  	MOVLW	0x00
003c7a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003c7c   6e08     movwf	0x8, 0             	MOVWF	r0x08
003c7e   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
003c80   ffe9
003c82   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
003c84   fff3
003c86   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003c88   ec50     call	0x6ea0, 0           	CALL	__gptrget2
003c8a   f037
003c8c   6e09     movwf	0x9, 0             	MOVWF	r0x09
003c8e   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
003c90   f00a
003c92   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003c94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c96   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003c98   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003c9a   ecef     call	0x4dde, 0           	CALL	_SAScheduler
003c9c   f026
003c9e   6e09     movwf	0x9, 0             	MOVWF	r0x09
003ca0   0e02     movlw	0x2                	MOVLW	0x02
003ca2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003ca4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ca6   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	403; brtos/semaphore.c	pont_event->OSEventWaitList = pont_event->OSEventWaitList & ~(PriorityMask[iPriority]);
003ca8   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
003caa   ffe9
003cac   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
003cae   fff3
003cb0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003cb2   ec50     call	0x6ea0, 0           	CALL	__gptrget2
003cb4   f037
003cb6   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003cb8   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
003cba   f00b
                                           ; ;multiply lit val:0x02 by variable r0x09 and store in r0x09
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
003cbc   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
003cbe   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
003cc0   6a0c     clrf	0xc, 0              	CLRF	r0x0c
003cc2   6a0d     clrf	0xd, 0              	CLRF	r0x0d
003cc4   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
003cc6   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
003cc8   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
003cca   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
003ccc   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
003cce   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
003cd0   c009     movff	0x9, 0xff6         	MOVFF	r0x09, TBLPTRL
003cd2   fff6
003cd4   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
003cd6   fff7
003cd8   c00d     movff	0xd, 0xff8         	MOVFF	r0x0d, TBLPTRU
003cda   fff8
003cdc   0009     tblrd	*+                 	TBLRD*+	
003cde   cff5     movff	0xff5, 0x9         	MOVFF	TABLAT, r0x09
003ce0   f009
003ce2   0009     tblrd	*+                 	TBLRD*+	
003ce4   cff5     movff	0xff5, 0xc         	MOVFF	TABLAT, r0x0c
003ce6   f00c
003ce8   1c09     comf	0x9, 0, 0           	COMF	r0x09, W
003cea   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
003cec   1c0c     comf	0xc, 0, 0           	COMF	r0x0c, W
003cee   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
003cf0   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003cf2   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
003cf4   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
003cf6   160b     andwf	0xb, 0x1, 0        	ANDWF	r0x0b, F
003cf8   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003cfa   ffe5
003cfc   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
003cfe   fff4
003d00   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
003d02   ffe9
003d04   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
003d06   fff3
003d08   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003d0a   ecb3     call	0x6f66, 0           	CALL	__gptrput2
003d0c   f037
                                           ;	.line	406; brtos/semaphore.c	pont_event->OSEventWait--;
003d0e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003d10   ffe9
003d12   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003d14   fff3
003d16   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d18   ec78     call	0x6ef0, 0           	CALL	__gptrget1
003d1a   f037
003d1c   6e06     movwf	0x6, 0             	MOVWF	r0x06
003d1e   0606     decf	0x6, 0x1, 0         	DECF	r0x06, F
003d20   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003d22   ffe5
003d24   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003d26   ffe9
003d28   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003d2a   fff3
003d2c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003d2e   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
003d30   f037
                                           ;	.line	414; brtos/semaphore.c	OSReadyList = OSReadyList | (PriorityMask[iPriority]);
003d32   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003d34   0102     movlb	0x2                	BANKSEL	_OSReadyList
003d36   1399     iorwf	0x99, 0x1, 0x1     	IORWF	_OSReadyList, F, B
003d38   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
003d3a   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
003d3c   139a     iorwf	0x9a, 0x1, 0x1     	IORWF	(_OSReadyList + 1), F, B
003d3e   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	418; brtos/semaphore.c	if (!iNesting)
003d40   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
003d42   e102     bnz	0x3d48               	BNZ	_00204_DS_
                                           ;	.line	421; brtos/semaphore.c	ChangeContext();      
003d44   ec82     call	0x4b04, 0           	CALL	_SwitchContext
003d46   f025
                                           _00204_DS_:
003d48   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	426; brtos/semaphore.c	if (!iNesting)
003d4a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
003d4c   e101     bnz	0x3d50               	BNZ	_00206_DS_
                                           ;	.line	428; brtos/semaphore.c	OSExitCritical();
003d4e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00206_DS_:
                                           ;	.line	430; brtos/semaphore.c	return OK;
003d50   6ae8     clrf	0xe8, 0             	CLRF	WREG
003d52   d025     bra	0x3d9e               	BRA	_00216_DS_
                                           _00208_DS_:
                                           ;	.line	434; brtos/semaphore.c	if (pont_event->OSEventCount < 255)
003d54   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003d56   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003d58   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003d5a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003d5c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
003d5e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003d60   ffe9
003d62   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003d64   fff3
003d66   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003d68   ec78     call	0x6ef0, 0           	CALL	__gptrget1
003d6a   f037
003d6c   6e03     movwf	0x3, 0             	MOVWF	r0x03
003d6e   0eff     movlw	0xff               	MOVLW	0xff
003d70   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
003d72   e210     bc	0x3d94                	BC	_00214_DS_
                                           ;	.line	437; brtos/semaphore.c	pont_event->OSEventCount++;
003d74   2a03     incf	0x3, 0x1, 0         	INCF	r0x03, F
003d76   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003d78   ffe5
003d7a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003d7c   ffe9
003d7e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003d80   fff3
003d82   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003d84   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
003d86   f037
003d88   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	441; brtos/semaphore.c	if (!iNesting)
003d8a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
003d8c   e101     bnz	0x3d90               	BNZ	_00210_DS_
                                           ;	.line	443; brtos/semaphore.c	OSExitCritical();
003d8e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00210_DS_:
                                           ;	.line	444; brtos/semaphore.c	return OK;
003d90   6ae8     clrf	0xe8, 0             	CLRF	WREG
003d92   d005     bra	0x3d9e               	BRA	_00216_DS_
                                           _00214_DS_:
003d94   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	450; brtos/semaphore.c	if (!iNesting)
003d96   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
003d98   e101     bnz	0x3d9c               	BNZ	_00212_DS_
                                           ;	.line	452; brtos/semaphore.c	OSExitCritical();
003d9a   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00212_DS_:
                                           ;	.line	455; brtos/semaphore.c	return ERR_SEM_OVF;
003d9c   0e03     movlw	0x3                	MOVLW	0x03
                                           _00216_DS_:
003d9e   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003da0   f00e
003da2   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003da4   f00d
003da6   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003da8   f00c
003daa   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003dac   f00b
003dae   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003db0   f00a
003db2   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003db4   f009
003db6   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003db8   f008
003dba   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003dbc   f007
003dbe   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003dc0   f006
003dc2   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003dc4   f005
003dc6   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003dc8   f004
003dca   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003dcc   f003
003dce   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003dd0   f002
003dd2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003dd4   f001
003dd6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003dd8   f000
003dda   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003ddc   ffd9
003dde   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
003de0   ffda
003de2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_semaphore__OSSemPend	code
                                           _OSSemPend:
                                           ;	.line	188; brtos/semaphore.c	INT8U OSSemPend (BRTOS_Sem *pont_event, INT16U time_wait)
0009d0   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0009d2   ffe5
0009d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0009d6   ffe5
0009d8   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0009da   ffda
0009dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0009de   ffd9
0009e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0009e2   ffe5
0009e4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0009e6   ffe5
0009e8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0009ea   ffe5
0009ec   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0009ee   ffe5
0009f0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0009f2   ffe5
0009f4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0009f6   ffe5
0009f8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0009fa   ffe5
0009fc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0009fe   ffe5
000a00   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000a02   ffe5
000a04   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000a06   ffe5
000a08   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000a0a   ffe5
000a0c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000a0e   ffe5
000a10   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000a12   ffe5
000a14   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000a16   ffe5
000a18   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000a1a   ffe5
000a1c   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000a1e   ffe5
000a20   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000a22   ffe5
000a24   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
000a26   ffe5
000a28   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
000a2a   ffe5
000a2c   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000a2e   ffe5
000a30   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
000a32   ffe5
000a34   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
000a36   ffe5
000a38   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
000a3a   ffe5
000a3c   0e03     movlw	0x3                	MOVLW	0x03
000a3e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000a40   f000
000a42   0e04     movlw	0x4                	MOVLW	0x04
000a44   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000a46   f001
000a48   0e05     movlw	0x5                	MOVLW	0x05
000a4a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000a4c   f002
000a4e   0e06     movlw	0x6                	MOVLW	0x06
000a50   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000a52   f003
000a54   0e07     movlw	0x7                	MOVLW	0x07
000a56   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000a58   f004
                                           ;	.line	210; brtos/semaphore.c	OSEnterCritical();
000a5a   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	232; brtos/semaphore.c	if (pont_event->OSEventCount > 0)
000a5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
000a5e   0f01     addlw	0x1                	ADDLW	0x01
000a60   6e05     movwf	0x5, 0             	MOVWF	r0x05
000a62   0e00     movlw	0                  	MOVLW	0x00
000a64   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
000a66   6e06     movwf	0x6, 0             	MOVWF	r0x06
000a68   0e00     movlw	0                  	MOVLW	0x00
000a6a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
000a6c   6e07     movwf	0x7, 0             	MOVWF	r0x07
000a6e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
000a70   ffe9
000a72   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
000a74   fff3
000a76   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000a78   ec78     call	0x6ef0, 0           	CALL	__gptrget1
000a7a   f037
000a7c   6e08     movwf	0x8, 0             	MOVWF	r0x08
000a7e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000a80   e00e     bz	0xa9e                 	BZ	_00147_DS_
                                           ;	.line	235; brtos/semaphore.c	pont_event->OSEventCount--;
000a82   0608     decf	0x8, 0x1, 0         	DECF	r0x08, F
000a84   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000a86   ffe5
000a88   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
000a8a   ffe9
000a8c   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
000a8e   fff3
000a90   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000a92   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
000a94   f037
                                           ;	.line	238; brtos/semaphore.c	OSExitCritical();
000a96   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	239; brtos/semaphore.c	return OK;
000a98   6ae8     clrf	0xe8, 0             	CLRF	WREG
000a9a   ef30     goto	0x1060              	GOTO	_00173_DS_
000a9c   f008
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x05
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00147_DS_:
000a9e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	242; brtos/semaphore.c	Task = &ContextTask[currentTask];
000aa0   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
000aa2   0d10     mullw	0x10               	MULLW	0x10
000aa4   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
000aa6   f005
000aa8   6a06     clrf	0x6, 0              	CLRF	r0x06
000aaa   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
000aac   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
000aae   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
000ab0   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000ab2   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000ab4   6e06     movwf	0x6, 0             	MOVWF	r0x06
000ab6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ab8   6e05     movwf	0x5, 0             	MOVWF	r0x05
000aba   0e80     movlw	0x80               	MOVLW	0x80
000abc   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	245; brtos/semaphore.c	iPriority = Task->Priority;
000abe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ac0   0f09     addlw	0x9                	ADDLW	0x09
000ac2   6e08     movwf	0x8, 0             	MOVWF	r0x08
000ac4   0e00     movlw	0                  	MOVLW	0x00
000ac6   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000ac8   6e09     movwf	0x9, 0             	MOVWF	r0x09
000aca   0e00     movlw	0                  	MOVLW	0x00
000acc   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000ace   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000ad0   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
000ad2   ffe9
000ad4   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
000ad6   fff3
000ad8   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000ada   ec78     call	0x6ef0, 0           	CALL	__gptrget1
000adc   f037
000ade   6e08     movwf	0x8, 0             	MOVWF	r0x08
                                           ;	.line	247; brtos/semaphore.c	pont_event->OSEventWait++;
000ae0   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ae2   0f02     addlw	0x2                	ADDLW	0x02
000ae4   6e09     movwf	0x9, 0             	MOVWF	r0x09
000ae6   0e00     movlw	0                  	MOVLW	0x00
000ae8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
000aea   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
000aec   0e00     movlw	0                  	MOVLW	0x00
000aee   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
000af0   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000af2   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
000af4   ffe9
000af6   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
000af8   fff3
000afa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000afc   ec78     call	0x6ef0, 0           	CALL	__gptrget1
000afe   f037
000b00   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000b02   2a0c     incf	0xc, 0x1, 0         	INCF	r0x0c, F
000b04   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000b06   ffe5
000b08   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
000b0a   ffe9
000b0c   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
000b0e   fff3
000b10   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000b12   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
000b14   f037
                                           ;	.line	250; brtos/semaphore.c	pont_event->OSEventWaitList = pont_event->OSEventWaitList | (PriorityMask[iPriority]);
000b16   0e03     movlw	0x3                	MOVLW	0x03
000b18   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000b1a   0e00     movlw	0                  	MOVLW	0x00
000b1c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000b1e   0e00     movlw	0                  	MOVLW	0x00
000b20   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000b22   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000b24   ffe9
000b26   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000b28   fff3
000b2a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b2c   ec50     call	0x6ea0, 0           	CALL	__gptrget2
000b2e   f037
000b30   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000b32   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
000b34   f00d
                                           ; ;multiply lit val:0x02 by variable r0x08 and store in r0x0e
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000b36   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000b38   3408     rlcf	0x8, 0, 0           	RLCF	r0x08, W
000b3a   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000b3c   6a0f     clrf	0xf, 0              	CLRF	r0x0f
000b3e   6a10     clrf	0x10, 0             	CLRF	r0x10
000b40   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
000b42   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
000b44   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
000b46   220f     addwfc	0xf, 0x1, 0       	ADDWFC	r0x0f, F
000b48   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
000b4a   2210     addwfc	0x10, 0x1, 0      	ADDWFC	r0x10, F
000b4c   c00e     movff	0xe, 0xff6         	MOVFF	r0x0e, TBLPTRL
000b4e   fff6
000b50   c00f     movff	0xf, 0xff7         	MOVFF	r0x0f, TBLPTRH
000b52   fff7
000b54   c010     movff	0x10, 0xff8        	MOVFF	r0x10, TBLPTRU
000b56   fff8
000b58   0009     tblrd	*+                 	TBLRD*+	
000b5a   cff5     movff	0xff5, 0xe         	MOVFF	TABLAT, r0x0e
000b5c   f00e
000b5e   0009     tblrd	*+                 	TBLRD*+	
000b60   cff5     movff	0xff5, 0xf         	MOVFF	TABLAT, r0x0f
000b62   f00f
000b64   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000b66   120c     iorwf	0xc, 0x1, 0        	IORWF	r0x0c, F
000b68   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000b6a   120d     iorwf	0xd, 0x1, 0        	IORWF	r0x0d, F
000b6c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000b6e   ffe5
000b70   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
000b72   fff4
000b74   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000b76   ffe9
000b78   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000b7a   fff3
000b7c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000b7e   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000b80   f037
                                           ;	.line	259; brtos/semaphore.c	OSReadyList = OSReadyList & ~(PriorityMask[iPriority]);
000b82   1e0e     comf	0xe, 0x1, 0         	COMF	r0x0e, F
000b84   1e0f     comf	0xf, 0x1, 0         	COMF	r0x0f, F
000b86   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000b88   0102     movlb	0x2                	BANKSEL	_OSReadyList
000b8a   1799     andwf	0x99, 0x1, 0x1     	ANDWF	_OSReadyList, F, B
000b8c   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000b8e   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
000b90   179a     andwf	0x9a, 0x1, 0x1     	ANDWF	(_OSReadyList + 1), F, B
                                           ;	.line	262; brtos/semaphore.c	if (time_wait)
000b92   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b94   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
000b96   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000b98   d0e4     bra	0xd62                	BRA	_00155_DS_
                                           ;	.line	264; brtos/semaphore.c	timeout = (INT32U)((INT32U)counter + (INT32U)time_wait);
000b9a   c2fe     movff	0x2fe, 0xc         	MOVFF	_counter, r0x0c
000b9c   f00c
000b9e   c2ff     movff	0x2ff, 0xd         	MOVFF	(_counter + 1), r0x0d
000ba0   f00d
000ba2   6a0e     clrf	0xe, 0              	CLRF	r0x0e
000ba4   6a0f     clrf	0xf, 0              	CLRF	r0x0f
000ba6   c003     movff	0x3, 0x10          	MOVFF	r0x03, r0x10
000ba8   f010
000baa   c004     movff	0x4, 0x11          	MOVFF	r0x04, r0x11
000bac   f011
000bae   6a12     clrf	0x12, 0             	CLRF	r0x12
000bb0   6a13     clrf	0x13, 0             	CLRF	r0x13
000bb2   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
000bb4   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
000bb6   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
000bb8   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
000bba   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000bbc   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
000bbe   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
000bc0   220f     addwfc	0xf, 0x1, 0       	ADDWFC	r0x0f, F
                                           ;	.line	266; brtos/semaphore.c	if (timeout >= TickCountOverFlow)
000bc2   0e00     movlw	0                  	MOVLW	0x00
000bc4   5c0f     subwf	0xf, 0, 0          	SUBWF	r0x0f, W
000bc6   e108     bnz	0xbd8                	BNZ	_00187_DS_
000bc8   0e00     movlw	0                  	MOVLW	0x00
000bca   5c0e     subwf	0xe, 0, 0          	SUBWF	r0x0e, W
000bcc   e105     bnz	0xbd8                	BNZ	_00187_DS_
000bce   0efa     movlw	0xfa               	MOVLW	0xfa
000bd0   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
000bd2   e102     bnz	0xbd8                	BNZ	_00187_DS_
000bd4   0e00     movlw	0                  	MOVLW	0x00
000bd6   5c0c     subwf	0xc, 0, 0          	SUBWF	r0x0c, W
                                           _00187_DS_:
000bd8   e320     bnc	0xc1a                	BNC	_00149_DS_
                                           ;	.line	268; brtos/semaphore.c	Task->TimeToWait = (INT16U)(timeout - TickCountOverFlow);
000bda   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000bdc   0f07     addlw	0x7                	ADDLW	0x07
000bde   6e10     movwf	0x10, 0            	MOVWF	r0x10
000be0   0e00     movlw	0                  	MOVLW	0x00
000be2   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000be4   6e11     movwf	0x11, 0            	MOVWF	r0x11
000be6   0e00     movlw	0                  	MOVLW	0x00
000be8   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000bea   6e12     movwf	0x12, 0            	MOVWF	r0x12
000bec   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000bee   6e13     movwf	0x13, 0            	MOVWF	r0x13
000bf0   0e06     movlw	0x6                	MOVLW	0x06
000bf2   240d     addwf	0xd, 0, 0          	ADDWF	r0x0d, W
000bf4   6e14     movwf	0x14, 0            	MOVWF	r0x14
000bf6   0eff     movlw	0xff               	MOVLW	0xff
000bf8   200e     addwfc	0xe, 0, 0         	ADDWFC	r0x0e, W
000bfa   6e15     movwf	0x15, 0            	MOVWF	r0x15
000bfc   0eff     movlw	0xff               	MOVLW	0xff
000bfe   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
000c00   6e16     movwf	0x16, 0            	MOVWF	r0x16
000c02   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000c04   ffe5
000c06   c014     movff	0x14, 0xff4        	MOVFF	r0x14, PRODH
000c08   fff4
000c0a   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
000c0c   ffe9
000c0e   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
000c10   fff3
000c12   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000c14   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000c16   f037
000c18   d014     bra	0xc42                	BRA	_00150_DS_
                                           _00149_DS_:
                                           ;	.line	272; brtos/semaphore.c	Task->TimeToWait = (INT16U)timeout;
000c1a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c1c   0f07     addlw	0x7                	ADDLW	0x07
000c1e   6e10     movwf	0x10, 0            	MOVWF	r0x10
000c20   0e00     movlw	0                  	MOVLW	0x00
000c22   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000c24   6e11     movwf	0x11, 0            	MOVWF	r0x11
000c26   0e00     movlw	0                  	MOVLW	0x00
000c28   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000c2a   6e12     movwf	0x12, 0            	MOVWF	r0x12
000c2c   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000c2e   ffe5
000c30   c00d     movff	0xd, 0xff4         	MOVFF	r0x0d, PRODH
000c32   fff4
000c34   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
000c36   ffe9
000c38   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
000c3a   fff3
000c3c   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000c3e   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000c40   f037
                                           _00150_DS_:
000c42   0103     movlb	0x3                	BANKSEL	_Tail
                                           ;	.line	276; brtos/semaphore.c	IncludeTaskIntoDelayList();
000c44   51ec     movf	0xec, 0, 0x1        	MOVF	_Tail, W, B
000c46   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
000c48   11ed     iorwf	0xed, 0, 0x1       	IORWF	(_Tail + 1), W, B
000c4a   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
000c4c   11ee     iorwf	0xee, 0, 0x1       	IORWF	(_Tail + 2), W, B
000c4e   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000c50   d04f     bra	0xcf0                	BRA	_00152_DS_
000c52   c3ec     movff	0x3ec, 0xc         	MOVFF	_Tail, r0x0c
000c54   f00c
000c56   c3ed     movff	0x3ed, 0xd         	MOVFF	(_Tail + 1), r0x0d
000c58   f00d
000c5a   c3ee     movff	0x3ee, 0xe         	MOVFF	(_Tail + 2), r0x0e
000c5c   f00e
000c5e   0e0a     movlw	0xa                	MOVLW	0x0a
000c60   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
000c62   0e00     movlw	0                  	MOVLW	0x00
000c64   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
000c66   0e00     movlw	0                  	MOVLW	0x00
000c68   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
000c6a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000c6c   ffe5
000c6e   c006     movff	0x6, 0xff4         	MOVFF	r0x06, PRODH
000c70   fff4
000c72   c007     movff	0x7, 0xff6         	MOVFF	r0x07, TBLPTRL
000c74   fff6
000c76   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
000c78   ffe9
000c7a   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
000c7c   fff3
000c7e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000c80   ec99     call	0x6f32, 0           	CALL	__gptrput3
000c82   f037
000c84   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000c86   0f0d     addlw	0xd                	ADDLW	0x0d
000c88   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000c8a   0e00     movlw	0                  	MOVLW	0x00
000c8c   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000c8e   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000c90   0e00     movlw	0                  	MOVLW	0x00
000c92   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000c94   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000c96   c3ec     movff	0x3ec, 0xfe5       	MOVFF	_Tail, POSTDEC1
000c98   ffe5
000c9a   c3ed     movff	0x3ed, 0xff4       	MOVFF	(_Tail + 1), PRODH
000c9c   fff4
000c9e   c3ee     movff	0x3ee, 0xff6       	MOVFF	(_Tail + 2), TBLPTRL
000ca0   fff6
000ca2   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
000ca4   ffe9
000ca6   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
000ca8   fff3
000caa   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000cac   ec99     call	0x6f32, 0           	CALL	__gptrput3
000cae   f037
000cb0   c005     movff	0x5, 0x3ec         	MOVFF	r0x05, _Tail
000cb2   f3ec
000cb4   c006     movff	0x6, 0x3ed         	MOVFF	r0x06, (_Tail + 1)
000cb6   f3ed
000cb8   c007     movff	0x7, 0x3ee         	MOVFF	r0x07, (_Tail + 2)
000cba   f3ee
000cbc   c3ec     movff	0x3ec, 0xc         	MOVFF	_Tail, r0x0c
000cbe   f00c
000cc0   c3ed     movff	0x3ed, 0xd         	MOVFF	(_Tail + 1), r0x0d
000cc2   f00d
000cc4   c3ee     movff	0x3ee, 0xe         	MOVFF	(_Tail + 2), r0x0e
000cc6   f00e
000cc8   0e0a     movlw	0xa                	MOVLW	0x0a
000cca   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
000ccc   0e00     movlw	0                  	MOVLW	0x00
000cce   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
000cd0   0e00     movlw	0                  	MOVLW	0x00
000cd2   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
000cd4   0e00     movlw	0                  	MOVLW	0x00
000cd6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000cd8   0e00     movlw	0                  	MOVLW	0x00
000cda   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000cdc   0e00     movlw	0                  	MOVLW	0x00
000cde   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000ce0   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
000ce2   ffe9
000ce4   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
000ce6   fff3
000ce8   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000cea   ec99     call	0x6f32, 0           	CALL	__gptrput3
000cec   f037
000cee   d04d     bra	0xd8a                	BRA	_00156_DS_
                                           _00152_DS_:
000cf0   c005     movff	0x5, 0x3ec         	MOVFF	r0x05, _Tail
000cf2   f3ec
000cf4   c006     movff	0x6, 0x3ed         	MOVFF	r0x06, (_Tail + 1)
000cf6   f3ed
000cf8   c007     movff	0x7, 0x3ee         	MOVFF	r0x07, (_Tail + 2)
000cfa   f3ee
000cfc   c005     movff	0x5, 0x3ef         	MOVFF	r0x05, _Head
000cfe   f3ef
000d00   c006     movff	0x6, 0x3f0         	MOVFF	r0x06, (_Head + 1)
000d02   f3f0
000d04   c007     movff	0x7, 0x3f1         	MOVFF	r0x07, (_Head + 2)
000d06   f3f1
000d08   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d0a   0f0a     addlw	0xa                	ADDLW	0x0a
000d0c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000d0e   0e00     movlw	0                  	MOVLW	0x00
000d10   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000d12   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000d14   0e00     movlw	0                  	MOVLW	0x00
000d16   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000d18   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000d1a   0e00     movlw	0                  	MOVLW	0x00
000d1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d1e   0e00     movlw	0                  	MOVLW	0x00
000d20   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000d22   0e00     movlw	0                  	MOVLW	0x00
000d24   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000d26   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
000d28   ffe9
000d2a   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
000d2c   fff3
000d2e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d30   ec99     call	0x6f32, 0           	CALL	__gptrput3
000d32   f037
000d34   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d36   0f0d     addlw	0xd                	ADDLW	0x0d
000d38   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000d3a   0e00     movlw	0                  	MOVLW	0x00
000d3c   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000d3e   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000d40   0e00     movlw	0                  	MOVLW	0x00
000d42   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000d44   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000d46   0e00     movlw	0                  	MOVLW	0x00
000d48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d4a   0e00     movlw	0                  	MOVLW	0x00
000d4c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000d4e   0e00     movlw	0                  	MOVLW	0x00
000d50   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000d52   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
000d54   ffe9
000d56   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
000d58   fff3
000d5a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d5c   ec99     call	0x6f32, 0           	CALL	__gptrput3
000d5e   f037
000d60   d014     bra	0xd8a                	BRA	_00156_DS_
                                           _00155_DS_:
                                           ;	.line	279; brtos/semaphore.c	Task->TimeToWait = NO_TIMEOUT;
000d62   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d64   0f07     addlw	0x7                	ADDLW	0x07
000d66   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000d68   0e00     movlw	0                  	MOVLW	0x00
000d6a   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000d6c   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000d6e   0e00     movlw	0                  	MOVLW	0x00
000d70   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000d72   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000d74   0ee8     movlw	0xe8               	MOVLW	0xe8
000d76   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000d78   0efd     movlw	0xfd               	MOVLW	0xfd
000d7a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000d7c   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
000d7e   ffe9
000d80   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
000d82   fff3
000d84   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000d86   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000d88   f037
                                           _00156_DS_:
                                           ;	.line	283; brtos/semaphore.c	ChangeContext();
000d8a   ec82     call	0x4b04, 0           	CALL	_SwitchContext
000d8c   f025
                                           ;	.line	286; brtos/semaphore.c	if (time_wait)
000d8e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d90   1004     iorwf	0x4, 0, 0          	IORWF	r0x04, W
000d92   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000d94   d163     bra	0x105c               	BRA	_00172_DS_
                                           ;	.line	292; brtos/semaphore.c	OSExitCritical();
000d96   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	294; brtos/semaphore.c	OSEnterCritical();
000d98   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	299; brtos/semaphore.c	if(Task->TimeToWait == EXIT_BY_TIMEOUT)
000d9a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000d9c   0f07     addlw	0x7                	ADDLW	0x07
000d9e   6e03     movwf	0x3, 0             	MOVWF	r0x03
000da0   0e00     movlw	0                  	MOVLW	0x00
000da2   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000da4   6e04     movwf	0x4, 0             	MOVWF	r0x04
000da6   0e00     movlw	0                  	MOVLW	0x00
000da8   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000daa   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
000dac   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000dae   ffe9
000db0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000db2   fff3
000db4   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000db6   ec50     call	0x6ea0, 0           	CALL	__gptrget2
000db8   f037
000dba   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000dbc   cff3     movff	0xff3, 0xe         	MOVFF	PRODL, r0x0e
000dbe   f00e
000dc0   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000dc2   0ae9     xorlw	0xe9               	XORLW	0xe9
000dc4   e103     bnz	0xdcc                	BNZ	_00188_DS_
000dc6   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000dc8   0afd     xorlw	0xfd               	XORLW	0xfd
000dca   e001     bz	0xdce                 	BZ	_00189_DS_
                                           _00188_DS_:
000dcc   d058     bra	0xe7e                	BRA	_00169_DS_
                                           _00189_DS_:
                                           ;	.line	302; brtos/semaphore.c	if ((pont_event->OSEventWaitList & PriorityMask[iPriority]))
000dce   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000dd0   ffe9
000dd2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000dd4   fff3
000dd6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000dd8   ec50     call	0x6ea0, 0           	CALL	__gptrget2
000dda   f037
000ddc   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000dde   cff3     movff	0xff3, 0xe         	MOVFF	PRODL, r0x0e
000de0   f00e
                                           ; ;multiply lit val:0x02 by variable r0x08 and store in r0x08
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000de2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000de4   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
000de6   6a0f     clrf	0xf, 0              	CLRF	r0x0f
000de8   6a10     clrf	0x10, 0             	CLRF	r0x10
000dea   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
000dec   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
000dee   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
000df0   220f     addwfc	0xf, 0x1, 0       	ADDWFC	r0x0f, F
000df2   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
000df4   2210     addwfc	0x10, 0x1, 0      	ADDWFC	r0x10, F
000df6   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
000df8   fff6
000dfa   c00f     movff	0xf, 0xff7         	MOVFF	r0x0f, TBLPTRH
000dfc   fff7
000dfe   c010     movff	0x10, 0xff8        	MOVFF	r0x10, TBLPTRU
000e00   fff8
000e02   0009     tblrd	*+                 	TBLRD*+	
000e04   cff5     movff	0xff5, 0x8         	MOVFF	TABLAT, r0x08
000e06   f008
000e08   0009     tblrd	*+                 	TBLRD*+	
000e0a   cff5     movff	0xff5, 0xf         	MOVFF	TABLAT, r0x0f
000e0c   f00f
000e0e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000e10   160d     andwf	0xd, 0x1, 0        	ANDWF	r0x0d, F
000e12   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000e14   160e     andwf	0xe, 0x1, 0        	ANDWF	r0x0e, F
000e16   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000e18   100e     iorwf	0xe, 0, 0          	IORWF	r0x0e, W
000e1a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000e1c   d11f     bra	0x105c               	BRA	_00172_DS_
                                           ;	.line	305; brtos/semaphore.c	pont_event->OSEventWaitList = pont_event->OSEventWaitList & ~(PriorityMask[iPriority]);
000e1e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000e20   ffe9
000e22   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000e24   fff3
000e26   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e28   ec50     call	0x6ea0, 0           	CALL	__gptrget2
000e2a   f037
000e2c   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000e2e   cff3     movff	0xff3, 0xe         	MOVFF	PRODL, r0x0e
000e30   f00e
000e32   1e08     comf	0x8, 0x1, 0         	COMF	r0x08, F
000e34   1e0f     comf	0xf, 0x1, 0         	COMF	r0x0f, F
000e36   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000e38   160d     andwf	0xd, 0x1, 0        	ANDWF	r0x0d, F
000e3a   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000e3c   160e     andwf	0xe, 0x1, 0        	ANDWF	r0x0e, F
000e3e   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000e40   ffe5
000e42   c00e     movff	0xe, 0xff4         	MOVFF	r0x0e, PRODH
000e44   fff4
000e46   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000e48   ffe9
000e4a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000e4c   fff3
000e4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000e50   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000e52   f037
                                           ;	.line	308; brtos/semaphore.c	pont_event->OSEventWait--;
000e54   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
000e56   ffe9
000e58   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
000e5a   fff3
000e5c   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000e5e   ec78     call	0x6ef0, 0           	CALL	__gptrget1
000e60   f037
000e62   6e00     movwf	0, 0               	MOVWF	r0x00
000e64   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000e66   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e68   ffe5
000e6a   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
000e6c   ffe9
000e6e   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
000e70   fff3
000e72   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000e74   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
000e76   f037
                                           ;	.line	311; brtos/semaphore.c	OSExitCritical();
000e78   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	314; brtos/semaphore.c	return TIMEOUT;
000e7a   0e06     movlw	0x6                	MOVLW	0x06
000e7c   d0f1     bra	0x1060               	BRA	_00173_DS_
                                           _00169_DS_:
                                           ;	.line	320; brtos/semaphore.c	Task->TimeToWait = NO_TIMEOUT;
000e7e   0ee8     movlw	0xe8               	MOVLW	0xe8
000e80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000e82   0efd     movlw	0xfd               	MOVLW	0xfd
000e84   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000e86   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
000e88   ffe9
000e8a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000e8c   fff3
000e8e   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000e90   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000e92   f037
                                           ;	.line	323; brtos/semaphore.c	RemoveFromDelayList();
000e94   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000e96   0103     movlb	0x3                	BANKSEL	_Head
000e98   19ef     xorwf	0xef, 0, 0x1       	XORWF	_Head, W, B
000e9a   e108     bnz	0xeac                	BNZ	_00191_DS_
000e9c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000e9e   0103     movlb	0x3                	BANKSEL	(_Head + 1)
000ea0   19f0     xorwf	0xf0, 0, 0x1       	XORWF	(_Head + 1), W, B
000ea2   e104     bnz	0xeac                	BNZ	_00191_DS_
000ea4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000ea6   0103     movlb	0x3                	BANKSEL	(_Head + 2)
000ea8   19f1     xorwf	0xf1, 0, 0x1       	XORWF	(_Head + 2), W, B
000eaa   e001     bz	0xeae                 	BZ	_00192_DS_
                                           _00191_DS_:
000eac   d04a     bra	0xf42                	BRA	_00166_DS_
                                           _00192_DS_:
000eae   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000eb0   0103     movlb	0x3                	BANKSEL	_Tail
000eb2   19ec     xorwf	0xec, 0, 0x1       	XORWF	_Tail, W, B
000eb4   e108     bnz	0xec6                	BNZ	_00193_DS_
000eb6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000eb8   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
000eba   19ed     xorwf	0xed, 0, 0x1       	XORWF	(_Tail + 1), W, B
000ebc   e104     bnz	0xec6                	BNZ	_00193_DS_
000ebe   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000ec0   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
000ec2   19ee     xorwf	0xee, 0, 0x1       	XORWF	(_Tail + 2), W, B
000ec4   e001     bz	0xec8                 	BZ	_00194_DS_
                                           _00193_DS_:
000ec6   d00d     bra	0xee2                	BRA	_00160_DS_
                                           _00194_DS_:
000ec8   0103     movlb	0x3                	BANKSEL	_Tail
000eca   6bec     clrf	0xec, 0x1           	CLRF	_Tail, B
000ecc   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
000ece   6bed     clrf	0xed, 0x1           	CLRF	(_Tail + 1), B
000ed0   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
000ed2   6bee     clrf	0xee, 0x1           	CLRF	(_Tail + 2), B
000ed4   0103     movlb	0x3                	BANKSEL	_Head
000ed6   6bef     clrf	0xef, 0x1           	CLRF	_Head, B
000ed8   0103     movlb	0x3                	BANKSEL	(_Head + 1)
000eda   6bf0     clrf	0xf0, 0x1           	CLRF	(_Head + 1), B
000edc   0103     movlb	0x3                	BANKSEL	(_Head + 2)
000ede   6bf1     clrf	0xf1, 0x1           	CLRF	(_Head + 2), B
000ee0   d0bd     bra	0x105c               	BRA	_00172_DS_
                                           _00160_DS_:
000ee2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ee4   0f0a     addlw	0xa                	ADDLW	0x0a
000ee6   6e00     movwf	0, 0               	MOVWF	r0x00
000ee8   0e00     movlw	0                  	MOVLW	0x00
000eea   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000eec   6e01     movwf	0x1, 0             	MOVWF	r0x01
000eee   0e00     movlw	0                  	MOVLW	0x00
000ef0   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000ef2   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ef4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000ef6   ffe9
000ef8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000efa   fff3
000efc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000efe   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
000f00   f036
000f02   0103     movlb	0x3                	BANKSEL	_Head
000f04   6fef     movwf	0xef, 0x1          	MOVWF	_Head, B
000f06   cff3     movff	0xff3, 0x3f0       	MOVFF	PRODL, (_Head + 1)
000f08   f3f0
000f0a   cff4     movff	0xff4, 0x3f1       	MOVFF	PRODH, (_Head + 2)
000f0c   f3f1
000f0e   c3ef     movff	0x3ef, 0           	MOVFF	_Head, r0x00
000f10   f000
000f12   c3f0     movff	0x3f0, 0x1         	MOVFF	(_Head + 1), r0x01
000f14   f001
000f16   c3f1     movff	0x3f1, 0x2         	MOVFF	(_Head + 2), r0x02
000f18   f002
000f1a   0e0d     movlw	0xd                	MOVLW	0x0d
000f1c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f1e   0e00     movlw	0                  	MOVLW	0x00
000f20   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f22   0e00     movlw	0                  	MOVLW	0x00
000f24   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000f26   0e00     movlw	0                  	MOVLW	0x00
000f28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000f2a   0e00     movlw	0                  	MOVLW	0x00
000f2c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000f2e   0e00     movlw	0                  	MOVLW	0x00
000f30   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000f32   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000f34   ffe9
000f36   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000f38   fff3
000f3a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f3c   ec99     call	0x6f32, 0           	CALL	__gptrput3
000f3e   f037
000f40   d08d     bra	0x105c               	BRA	_00172_DS_
                                           _00166_DS_:
000f42   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000f44   0103     movlb	0x3                	BANKSEL	_Tail
000f46   19ec     xorwf	0xec, 0, 0x1       	XORWF	_Tail, W, B
000f48   e108     bnz	0xf5a                	BNZ	_00195_DS_
000f4a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000f4c   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
000f4e   19ed     xorwf	0xed, 0, 0x1       	XORWF	(_Tail + 1), W, B
000f50   e104     bnz	0xf5a                	BNZ	_00195_DS_
000f52   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000f54   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
000f56   19ee     xorwf	0xee, 0, 0x1       	XORWF	(_Tail + 2), W, B
000f58   e001     bz	0xf5c                 	BZ	_00196_DS_
                                           _00195_DS_:
000f5a   d030     bra	0xfbc                	BRA	_00163_DS_
                                           _00196_DS_:
000f5c   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000f5e   0f0d     addlw	0xd                	ADDLW	0x0d
000f60   6e00     movwf	0, 0               	MOVWF	r0x00
000f62   0e00     movlw	0                  	MOVLW	0x00
000f64   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000f66   6e01     movwf	0x1, 0             	MOVWF	r0x01
000f68   0e00     movlw	0                  	MOVLW	0x00
000f6a   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000f6c   6e02     movwf	0x2, 0             	MOVWF	r0x02
000f6e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000f70   ffe9
000f72   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000f74   fff3
000f76   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000f78   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
000f7a   f036
000f7c   0103     movlb	0x3                	BANKSEL	_Tail
000f7e   6fec     movwf	0xec, 0x1          	MOVWF	_Tail, B
000f80   cff3     movff	0xff3, 0x3ed       	MOVFF	PRODL, (_Tail + 1)
000f82   f3ed
000f84   cff4     movff	0xff4, 0x3ee       	MOVFF	PRODH, (_Tail + 2)
000f86   f3ee
000f88   c3ec     movff	0x3ec, 0           	MOVFF	_Tail, r0x00
000f8a   f000
000f8c   c3ed     movff	0x3ed, 0x1         	MOVFF	(_Tail + 1), r0x01
000f8e   f001
000f90   c3ee     movff	0x3ee, 0x2         	MOVFF	(_Tail + 2), r0x02
000f92   f002
000f94   0e0a     movlw	0xa                	MOVLW	0x0a
000f96   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000f98   0e00     movlw	0                  	MOVLW	0x00
000f9a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000f9c   0e00     movlw	0                  	MOVLW	0x00
000f9e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000fa0   0e00     movlw	0                  	MOVLW	0x00
000fa2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000fa4   0e00     movlw	0                  	MOVLW	0x00
000fa6   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000fa8   0e00     movlw	0                  	MOVLW	0x00
000faa   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000fac   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000fae   ffe9
000fb0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000fb2   fff3
000fb4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fb6   ec99     call	0x6f32, 0           	CALL	__gptrput3
000fb8   f037
000fba   d050     bra	0x105c               	BRA	_00172_DS_
                                           _00163_DS_:
000fbc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000fbe   0f0a     addlw	0xa                	ADDLW	0x0a
000fc0   6e00     movwf	0, 0               	MOVWF	r0x00
000fc2   0e00     movlw	0                  	MOVLW	0x00
000fc4   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
000fc6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000fc8   0e00     movlw	0                  	MOVLW	0x00
000fca   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
000fcc   6e02     movwf	0x2, 0             	MOVWF	r0x02
000fce   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000fd0   ffe9
000fd2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000fd4   fff3
000fd6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000fd8   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
000fda   f036
000fdc   6e00     movwf	0, 0               	MOVWF	r0x00
000fde   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000fe0   f001
000fe2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000fe4   f002
000fe6   5000     movf	0, 0, 0             	MOVF	r0x00, W
000fe8   0f0d     addlw	0xd                	ADDLW	0x0d
000fea   6e03     movwf	0x3, 0             	MOVWF	r0x03
000fec   0e00     movlw	0                  	MOVLW	0x00
000fee   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
000ff0   6e04     movwf	0x4, 0             	MOVWF	r0x04
000ff2   0e00     movlw	0                  	MOVLW	0x00
000ff4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
000ff6   6e08     movwf	0x8, 0             	MOVWF	r0x08
000ff8   0e0d     movlw	0xd                	MOVLW	0x0d
000ffa   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
000ffc   0e00     movlw	0                  	MOVLW	0x00
000ffe   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
001000   0e00     movlw	0                  	MOVLW	0x00
001002   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
001004   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001006   ffe9
001008   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00100a   fff3
00100c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00100e   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
001010   f036
001012   6e05     movwf	0x5, 0             	MOVWF	r0x05
001014   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001016   f006
001018   cff4     movff	0xff4, 0x7         	MOVFF	PRODH, r0x07
00101a   f007
00101c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00101e   ffe5
001020   c006     movff	0x6, 0xff4         	MOVFF	r0x06, PRODH
001022   fff4
001024   c007     movff	0x7, 0xff6         	MOVFF	r0x07, TBLPTRL
001026   fff6
001028   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00102a   ffe9
00102c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00102e   fff3
001030   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001032   ec99     call	0x6f32, 0           	CALL	__gptrput3
001034   f037
001036   0e0a     movlw	0xa                	MOVLW	0x0a
001038   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
00103a   0e00     movlw	0                  	MOVLW	0x00
00103c   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00103e   0e00     movlw	0                  	MOVLW	0x00
001040   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
001042   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001044   ffe5
001046   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
001048   fff4
00104a   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
00104c   fff6
00104e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001050   ffe9
001052   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001054   fff3
001056   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001058   ec99     call	0x6f32, 0           	CALL	__gptrput3
00105a   f037
                                           _00172_DS_:
                                           ;	.line	328; brtos/semaphore.c	OSExitCritical();
00105c   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	330; brtos/semaphore.c	return OK;
00105e   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00173_DS_:
001060   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
001062   f016
001064   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
001066   f015
001068   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
00106a   f014
00106c   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
00106e   f013
001070   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
001072   f012
001074   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
001076   f011
001078   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00107a   f010
00107c   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
00107e   f00f
001080   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
001082   f00e
001084   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
001086   f00d
001088   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00108a   f00c
00108c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
00108e   f00b
001090   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001092   f00a
001094   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001096   f009
001098   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00109a   f008
00109c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00109e   f007
0010a0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0010a2   f006
0010a4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0010a6   f005
0010a8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0010aa   f004
0010ac   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0010ae   f003
0010b0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0010b2   f002
0010b4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0010b6   f001
0010b8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0010ba   f000
0010bc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0010be   ffd9
0010c0   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0010c2   ffda
0010c4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_semaphore__OSSemDelete	code
                                           _OSSemDelete:
                                           ;	.line	146; brtos/semaphore.c	INT8U OSSemDelete (BRTOS_Sem **event)
005444   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005446   ffe5
005448   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00544a   ffe5
00544c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00544e   ffda
005450   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005452   ffd9
005454   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005456   ffe5
005458   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00545a   ffe5
00545c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00545e   ffe5
005460   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005462   ffe5
005464   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005466   ffe5
005468   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00546a   ffe5
00546c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00546e   ffe5
005470   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
005472   ffe5
005474   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
005476   ffe5
005478   0e03     movlw	0x3                	MOVLW	0x03
00547a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00547c   f000
00547e   0e04     movlw	0x4                	MOVLW	0x04
005480   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005482   f001
005484   0e05     movlw	0x5                	MOVLW	0x05
005486   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005488   f002
00548a   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	151; brtos/semaphore.c	if (iNesting > 0) {                                // See if caller is an interrupt
00548c   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00548e   e002     bz	0x5494                	BZ	_00140_DS_
                                           ;	.line	152; brtos/semaphore.c	return(IRQ_PEND_ERR);                          // Can't be delete by interrupt
005490   0e02     movlw	0x2                	MOVLW	0x02
005492   d05a     bra	0x5548               	BRA	_00141_DS_
                                           _00140_DS_:
                                           ;	.line	156; brtos/semaphore.c	OSEnterCritical();
005494   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	158; brtos/semaphore.c	pont_event = *event;  
005496   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005498   ffe9
00549a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00549c   fff3
00549e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0054a0   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0054a2   f036
0054a4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0054a6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0054a8   f004
0054aa   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
0054ac   f005
                                           ;	.line	159; brtos/semaphore.c	pont_event->OSEventAllocated = 0;
0054ae   0e00     movlw	0                  	MOVLW	0x00
0054b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0054b2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0054b4   ffe9
0054b6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0054b8   fff3
0054ba   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0054bc   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0054be   f037
                                           ;	.line	160; brtos/semaphore.c	pont_event->OSEventCount     = 0;                      
0054c0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0054c2   0f01     addlw	0x1                	ADDLW	0x01
0054c4   6e06     movwf	0x6, 0             	MOVWF	r0x06
0054c6   0e00     movlw	0                  	MOVLW	0x00
0054c8   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0054ca   6e07     movwf	0x7, 0             	MOVWF	r0x07
0054cc   0e00     movlw	0                  	MOVLW	0x00
0054ce   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0054d0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0054d2   0e00     movlw	0                  	MOVLW	0x00
0054d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0054d6   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0054d8   ffe9
0054da   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0054dc   fff3
0054de   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0054e0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0054e2   f037
                                           ;	.line	161; brtos/semaphore.c	pont_event->OSEventWait      = 0;
0054e4   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0054e6   0f02     addlw	0x2                	ADDLW	0x02
0054e8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0054ea   0e00     movlw	0                  	MOVLW	0x00
0054ec   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0054ee   6e07     movwf	0x7, 0             	MOVWF	r0x07
0054f0   0e00     movlw	0                  	MOVLW	0x00
0054f2   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0054f4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0054f6   0e00     movlw	0                  	MOVLW	0x00
0054f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0054fa   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0054fc   ffe9
0054fe   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
005500   fff3
005502   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
005504   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
005506   f037
                                           ;	.line	163; brtos/semaphore.c	pont_event->OSEventWaitList=0;
005508   0e03     movlw	0x3                	MOVLW	0x03
00550a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00550c   0e00     movlw	0                  	MOVLW	0x00
00550e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
005510   0e00     movlw	0                  	MOVLW	0x00
005512   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
005514   0e00     movlw	0                  	MOVLW	0x00
005516   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005518   0e00     movlw	0                  	MOVLW	0x00
00551a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00551c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00551e   ffe9
005520   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005522   fff3
005524   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
005526   ecb3     call	0x6f66, 0           	CALL	__gptrput2
005528   f037
                                           ;	.line	165; brtos/semaphore.c	*event = NULL;
00552a   0e00     movlw	0                  	MOVLW	0x00
00552c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00552e   0e00     movlw	0                  	MOVLW	0x00
005530   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
005532   0e00     movlw	0                  	MOVLW	0x00
005534   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
005536   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005538   ffe9
00553a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00553c   fff3
00553e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005540   ec99     call	0x6f32, 0           	CALL	__gptrput3
005542   f037
                                           ;	.line	168; brtos/semaphore.c	OSExitCritical();
005544   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	170; brtos/semaphore.c	return(DELETE_EVENT_OK);
005546   0e08     movlw	0x8                	MOVLW	0x08
                                           _00141_DS_:
005548   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00554a   f008
00554c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00554e   f007
005550   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
005552   f006
005554   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005556   f005
005558   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00555a   f004
00555c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00555e   f003
005560   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005562   f002
005564   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005566   f001
005568   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00556a   f000
00556c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00556e   ffd9
005570   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005572   ffda
005574   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_semaphore__OSSemCreate	code
                                           _OSSemCreate:
                                           ;	.line	77; brtos/semaphore.c	INT8U OSSemCreate (INT8U cnt, BRTOS_Sem **event)
00417c   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00417e   ffe5
004180   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004182   ffe5
004184   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
004186   ffda
004188   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00418a   ffd9
00418c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00418e   ffe5
004190   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004192   ffe5
004194   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004196   ffe5
004198   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00419a   ffe5
00419c   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00419e   ffe5
0041a0   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0041a2   ffe5
0041a4   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0041a6   ffe5
0041a8   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0041aa   ffe5
0041ac   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0041ae   ffe5
0041b0   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0041b2   ffe5
0041b4   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0041b6   ffe5
0041b8   0e03     movlw	0x3                	MOVLW	0x03
0041ba   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0041bc   f000
0041be   0e04     movlw	0x4                	MOVLW	0x04
0041c0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0041c2   f001
0041c4   0e05     movlw	0x5                	MOVLW	0x05
0041c6   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0041c8   f002
0041ca   0e06     movlw	0x6                	MOVLW	0x06
0041cc   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0041ce   f003
0041d0   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	84; brtos/semaphore.c	if (iNesting > 0) {                                // See if caller is an interrupt
0041d2   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0041d4   e002     bz	0x41da                	BZ	_00106_DS_
                                           ;	.line	85; brtos/semaphore.c	return(IRQ_PEND_ERR);                           // Can't be create by interrupt
0041d6   0e02     movlw	0x2                	MOVLW	0x02
0041d8   d090     bra	0x42fa               	BRA	_00121_DS_
                                           _00106_DS_:
0041da   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	89; brtos/semaphore.c	if (currentTask)
0041dc   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0041de   e001     bz	0x41e2                	BZ	_00129_DS_
                                           ;	.line	90; brtos/semaphore.c	OSEnterCritical();
0041e0   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00129_DS_:
                                           ;	.line	93; brtos/semaphore.c	for(i=0;i<=BRTOS_MAX_SEM;i++)
0041e2   6a04     clrf	0x4, 0              	CLRF	r0x04
0041e4   6a05     clrf	0x5, 0              	CLRF	r0x05
0041e6   6a06     clrf	0x6, 0              	CLRF	r0x06
0041e8   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00115_DS_:
0041ea   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0041ec   0f80     addlw	0x80               	ADDLW	0x80
0041ee   0f80     addlw	0x80               	ADDLW	0x80
0041f0   e102     bnz	0x41f6               	BNZ	_00131_DS_
0041f2   0e03     movlw	0x3                	MOVLW	0x03
0041f4   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00131_DS_:
0041f6   e237     bc	0x4266                	BC	_00118_DS_
                                           ;	.line	96; brtos/semaphore.c	if(i >= BRTOS_MAX_SEM)
0041f8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0041fa   0f80     addlw	0x80               	ADDLW	0x80
0041fc   0f80     addlw	0x80               	ADDLW	0x80
0041fe   e102     bnz	0x4204               	BNZ	_00132_DS_
004200   0e02     movlw	0x2                	MOVLW	0x02
004202   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00132_DS_:
004204   e306     bnc	0x4212               	BNC	_00112_DS_
004206   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	101; brtos/semaphore.c	if (currentTask)
004208   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
00420a   e001     bz	0x420e                	BZ	_00110_DS_
                                           ;	.line	102; brtos/semaphore.c	OSExitCritical();
00420c   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00110_DS_:
                                           ;	.line	104; brtos/semaphore.c	return(NO_AVAILABLE_EVENT);
00420e   0e01     movlw	0x1                	MOVLW	0x01
004210   d074     bra	0x42fa               	BRA	_00121_DS_
                                           _00112_DS_:
                                           ;	.line	108; brtos/semaphore.c	if(BRTOS_Sem_Table[i].OSEventAllocated != TRUE)
004212   0ec4     movlw	0xc4               	MOVLW	LOW(_BRTOS_Sem_Table)
004214   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
004216   6e08     movwf	0x8, 0             	MOVWF	r0x08
004218   0e03     movlw	0x3                	MOVLW	HIGH(_BRTOS_Sem_Table)
00421a   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
00421c   6e09     movwf	0x9, 0             	MOVWF	r0x09
00421e   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
004220   ffe9
004222   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
004224   ffea
004226   cfef     movff	0xfef, 0xa         	MOVFF	INDF0, r0x0a
004228   f00a
00422a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00422c   0a01     xorlw	0x1                	XORLW	0x01
00422e   e013     bz	0x4256                	BZ	_00117_DS_
                                           ;	.line	110; brtos/semaphore.c	BRTOS_Sem_Table[i].OSEventAllocated = TRUE;
004230   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
004232   ffe9
004234   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
004236   ffea
004238   0e01     movlw	0x1                	MOVLW	0x01
00423a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	111; brtos/semaphore.c	pont_event = &BRTOS_Sem_Table[i];
00423c   0ec4     movlw	0xc4               	MOVLW	LOW(_BRTOS_Sem_Table)
00423e   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
004240   6e08     movwf	0x8, 0             	MOVWF	r0x08
004242   0e03     movlw	0x3                	MOVLW	HIGH(_BRTOS_Sem_Table)
004244   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
004246   6e09     movwf	0x9, 0             	MOVWF	r0x09
004248   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00424a   6e09     movwf	0x9, 0             	MOVWF	r0x09
00424c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00424e   6e08     movwf	0x8, 0             	MOVWF	r0x08
004250   0e80     movlw	0x80               	MOVLW	0x80
004252   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	112; brtos/semaphore.c	break;      
004254   d008     bra	0x4266               	BRA	_00118_DS_
                                           _00117_DS_:
                                           ;	.line	93; brtos/semaphore.c	for(i=0;i<=BRTOS_MAX_SEM;i++)
004256   0e05     movlw	0x5                	MOVLW	0x05
004258   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
00425a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00425c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
00425e   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
004260   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004262   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
004264   d7c2     bra	0x41ea               	BRA	_00115_DS_
                                           _00118_DS_:
                                           ;	.line	117; brtos/semaphore.c	pont_event->OSEventCount = cnt;                      // Set semaphore count value
004266   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004268   0f01     addlw	0x1                	ADDLW	0x01
00426a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00426c   0e00     movlw	0                  	MOVLW	0x00
00426e   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
004270   6e05     movwf	0x5, 0             	MOVWF	r0x05
004272   0e00     movlw	0                  	MOVLW	0x00
004274   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
004276   6e06     movwf	0x6, 0             	MOVWF	r0x06
004278   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00427a   ffe5
00427c   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00427e   ffe9
004280   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
004282   fff3
004284   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
004286   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004288   f037
                                           ;	.line	118; brtos/semaphore.c	pont_event->OSEventWait  = 0;
00428a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00428c   0f02     addlw	0x2                	ADDLW	0x02
00428e   6e00     movwf	0, 0               	MOVWF	r0x00
004290   0e00     movlw	0                  	MOVLW	0x00
004292   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
004294   6e04     movwf	0x4, 0             	MOVWF	r0x04
004296   0e00     movlw	0                  	MOVLW	0x00
004298   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
00429a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00429c   0e00     movlw	0                  	MOVLW	0x00
00429e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042a0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0042a2   ffe9
0042a4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0042a6   fff3
0042a8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0042aa   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0042ac   f037
                                           ;	.line	120; brtos/semaphore.c	pont_event->OSEventWaitList=0;
0042ae   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0042b0   0f03     addlw	0x3                	ADDLW	0x03
0042b2   6e00     movwf	0, 0               	MOVWF	r0x00
0042b4   0e00     movlw	0                  	MOVLW	0x00
0042b6   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0042b8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0042ba   0e00     movlw	0                  	MOVLW	0x00
0042bc   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
0042be   6e05     movwf	0x5, 0             	MOVWF	r0x05
0042c0   0e00     movlw	0                  	MOVLW	0x00
0042c2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0042c4   0e00     movlw	0                  	MOVLW	0x00
0042c6   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0042c8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0042ca   ffe9
0042cc   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0042ce   fff3
0042d0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0042d2   ecb3     call	0x6f66, 0           	CALL	__gptrput2
0042d4   f037
                                           ;	.line	122; brtos/semaphore.c	*event = pont_event;
0042d6   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0042d8   ffe5
0042da   c009     movff	0x9, 0xff4         	MOVFF	r0x09, PRODH
0042dc   fff4
0042de   c00a     movff	0xa, 0xff6         	MOVFF	r0x0a, TBLPTRL
0042e0   fff6
0042e2   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0042e4   ffe9
0042e6   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
0042e8   fff3
0042ea   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0042ec   ec99     call	0x6f32, 0           	CALL	__gptrput3
0042ee   f037
0042f0   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	125; brtos/semaphore.c	if (currentTask)
0042f2   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0042f4   e001     bz	0x42f8                	BZ	_00120_DS_
                                           ;	.line	126; brtos/semaphore.c	OSExitCritical();
0042f6   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00120_DS_:
                                           ;	.line	128; brtos/semaphore.c	return(ALLOC_EVENT_OK);
0042f8   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00121_DS_:
0042fa   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0042fc   f00a
0042fe   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
004300   f009
004302   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004304   f008
004306   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004308   f007
00430a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00430c   f006
00430e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004310   f005
004312   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004314   f004
004316   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004318   f003
00431a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00431c   f002
00431e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004320   f001
004322   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004324   f000
004326   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004328   ffd9
00432a   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
00432c   ffda
00432e   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 3042 (0x0be2) bytes ( 2.32%)
                                           ;           	 1521 (0x05f1) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	   23 (0x0017) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:13 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _SemTeste
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _InstallTask
                                           	extern _BRTOSStart
                                           	extern _BRTOS_Init
                                           	extern _OSSemCreate
                                           	extern _System_Time
                                           	extern _Task_2
                                           	extern _Task_3
                                           	extern _Task_Serial
                                           	extern _Task_LCD
                                           	extern _Serial_Init
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           POSTDEC1	equ	0xfe5
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_main_0	udata
                                           _SemTeste	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_main__main	code
                                           _main:
                                           ;	.line	13; main.c	OSCCONbits.IDLEN = 1;
003fc0   8ed3     bsf	0xd3, 0x7, 0         	BSF	_OSCCONbits, 7
                                           ;	.line	16; main.c	BRTOS_Init(); 
003fc2   ecda     call	0x6db4, 0           	CALL	_BRTOS_Init
003fc4   f036
                                           ;	.line	18; main.c	Serial_Init(57600,3); 
003fc6   0e03     movlw	0x3                	MOVLW	0x03
003fc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fca   0ee1     movlw	0xe1               	MOVLW	0xe1
003fcc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fce   0e00     movlw	0                  	MOVLW	0x00
003fd0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fd2   ecf2     call	0x3de4, 0           	CALL	_Serial_Init
003fd4   f01e
003fd6   0e03     movlw	0x3                	MOVLW	0x03
003fd8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003fda   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003fdc   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	20; main.c	if (OSSemCreate(0,&SemTeste) != ALLOC_EVENT_OK)
003fde   0e03     movlw	0x3                	MOVLW	HIGH(_SemTeste)
003fe0   6e01     movwf	0x1, 0             	MOVWF	r0x01
003fe2   0ee9     movlw	0xe9               	MOVLW	LOW(_SemTeste)
003fe4   6e00     movwf	0, 0               	MOVWF	r0x00
003fe6   0e80     movlw	0x80               	MOVLW	0x80
003fe8   6e02     movwf	0x2, 0             	MOVWF	r0x02
003fea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003fec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003fee   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003ff0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ff2   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ff4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ff6   0e00     movlw	0                  	MOVLW	0x00
003ff8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ffa   ecbe     call	0x417c, 0           	CALL	_OSSemCreate
003ffc   f020
003ffe   6e00     movwf	0, 0               	MOVWF	r0x00
004000   0e04     movlw	0x4                	MOVLW	0x04
004002   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004004   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004006   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
004008   5000     movf	0, 0, 0             	MOVF	r0x00, W
00400a   e001     bz	0x400e                	BZ	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	24; main.c	while(1){};
00400c   d7ff     bra	0x400c               	BRA	_00106_DS_
                                           _00109_DS_:
                                           ;	.line	28; main.c	if(InstallTask(&System_Time,(const CHAR8 *)"System Time",90,6) != OK)
00400e   0e06     movlw	0x6                	MOVLW	0x06
004010   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004012   0e00     movlw	0                  	MOVLW	0x00
004014   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004016   0e5a     movlw	0x5a               	MOVLW	0x5a
004018   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00401a   0e00     movlw	0                  	MOVLW	UPPER(__str_0)
00401c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00401e   0e41     movlw	0x41               	MOVLW	HIGH(__str_0)
004020   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004022   0e36     movlw	0x36               	MOVLW	LOW(__str_0)
004024   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004026   0e00     movlw	0                  	MOVLW	UPPER(_System_Time)
004028   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00402a   0e57     movlw	0x57               	MOVLW	HIGH(_System_Time)
00402c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00402e   0eb4     movlw	0xb4               	MOVLW	LOW(_System_Time)
004030   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004032   ecc1     call	0x1f82, 0           	CALL	_InstallTask
004034   f00f
004036   6e00     movwf	0, 0               	MOVWF	r0x00
004038   0e09     movlw	0x9                	MOVLW	0x09
00403a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00403c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00403e   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
004040   5000     movf	0, 0, 0             	MOVF	r0x00, W
004042   e001     bz	0x4046                	BZ	_00114_DS_
                                           _00111_DS_:
                                           ;	.line	32; main.c	while(1){};
004044   d7ff     bra	0x4044               	BRA	_00111_DS_
                                           _00114_DS_:
                                           ;	.line	37; main.c	if(InstallTask(&Task_2,(const CHAR8 *)"Tarefa Teste 1",83,4) != OK)
004046   0e04     movlw	0x4                	MOVLW	0x04
004048   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00404a   0e00     movlw	0                  	MOVLW	0x00
00404c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00404e   0e53     movlw	0x53               	MOVLW	0x53
004050   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004052   0e00     movlw	0                  	MOVLW	UPPER(__str_1)
004054   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004056   0e41     movlw	0x41               	MOVLW	HIGH(__str_1)
004058   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00405a   0e42     movlw	0x42               	MOVLW	LOW(__str_1)
00405c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00405e   0e00     movlw	0                  	MOVLW	UPPER(_Task_2)
004060   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004062   0e6b     movlw	0x6b               	MOVLW	HIGH(_Task_2)
004064   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004066   0e6c     movlw	0x6c               	MOVLW	LOW(_Task_2)
004068   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00406a   ecc1     call	0x1f82, 0           	CALL	_InstallTask
00406c   f00f
00406e   6e00     movwf	0, 0               	MOVWF	r0x00
004070   0e09     movlw	0x9                	MOVLW	0x09
004072   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
004074   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004076   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
004078   5000     movf	0, 0, 0             	MOVF	r0x00, W
00407a   e001     bz	0x407e                	BZ	_00119_DS_
                                           _00116_DS_:
                                           ;	.line	41; main.c	while(1){};
00407c   d7ff     bra	0x407c               	BRA	_00116_DS_
                                           _00119_DS_:
                                           ;	.line	44; main.c	if(InstallTask(&Task_3,(const CHAR8 *)"Tarefa Teste 2",83,5) != OK)
00407e   0e05     movlw	0x5                	MOVLW	0x05
004080   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004082   0e00     movlw	0                  	MOVLW	0x00
004084   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004086   0e53     movlw	0x53               	MOVLW	0x53
004088   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00408a   0e00     movlw	0                  	MOVLW	UPPER(__str_2)
00408c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00408e   0e41     movlw	0x41               	MOVLW	HIGH(__str_2)
004090   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004092   0e52     movlw	0x52               	MOVLW	LOW(__str_2)
004094   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004096   0e00     movlw	0                  	MOVLW	UPPER(_Task_3)
004098   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00409a   0e68     movlw	0x68               	MOVLW	HIGH(_Task_3)
00409c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00409e   0e0a     movlw	0xa                	MOVLW	LOW(_Task_3)
0040a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040a2   ecc1     call	0x1f82, 0           	CALL	_InstallTask
0040a4   f00f
0040a6   6e00     movwf	0, 0               	MOVWF	r0x00
0040a8   0e09     movlw	0x9                	MOVLW	0x09
0040aa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0040ac   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0040ae   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
0040b0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040b2   e001     bz	0x40b6                	BZ	_00124_DS_
                                           _00121_DS_:
                                           ;	.line	48; main.c	while(1){};
0040b4   d7ff     bra	0x40b4               	BRA	_00121_DS_
                                           _00124_DS_:
                                           ;	.line	52; main.c	if(InstallTask(&Task_Serial,(const CHAR8 *)"Tarefa Serial",128,2) != OK)
0040b6   0e02     movlw	0x2                	MOVLW	0x02
0040b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ba   0e00     movlw	0                  	MOVLW	0x00
0040bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040be   0e80     movlw	0x80               	MOVLW	0x80
0040c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040c2   0e00     movlw	0                  	MOVLW	UPPER(__str_3)
0040c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040c6   0e41     movlw	0x41               	MOVLW	HIGH(__str_3)
0040c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ca   0e62     movlw	0x62               	MOVLW	LOW(__str_3)
0040cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040ce   0e00     movlw	0                  	MOVLW	UPPER(_Task_Serial)
0040d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040d2   0e6f     movlw	0x6f               	MOVLW	HIGH(_Task_Serial)
0040d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040d6   0e12     movlw	0x12               	MOVLW	LOW(_Task_Serial)
0040d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040da   ecc1     call	0x1f82, 0           	CALL	_InstallTask
0040dc   f00f
0040de   6e00     movwf	0, 0               	MOVWF	r0x00
0040e0   0e09     movlw	0x9                	MOVLW	0x09
0040e2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0040e4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0040e6   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
0040e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0040ea   e001     bz	0x40ee                	BZ	_00129_DS_
                                           _00126_DS_:
                                           ;	.line	56; main.c	while(1){};
0040ec   d7ff     bra	0x40ec               	BRA	_00126_DS_
                                           _00129_DS_:
                                           ;	.line	60; main.c	if(InstallTask(&Task_LCD,(const CHAR8 *)"Tarefa LCD",128,1) != OK)
0040ee   0e01     movlw	0x1                	MOVLW	0x01
0040f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f2   0e00     movlw	0                  	MOVLW	0x00
0040f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040f6   0e80     movlw	0x80               	MOVLW	0x80
0040f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040fa   0e00     movlw	0                  	MOVLW	UPPER(__str_4)
0040fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0040fe   0e41     movlw	0x41               	MOVLW	HIGH(__str_4)
004100   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004102   0e70     movlw	0x70               	MOVLW	LOW(__str_4)
004104   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004106   0e00     movlw	0                  	MOVLW	UPPER(_Task_LCD)
004108   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00410a   0e53     movlw	0x53               	MOVLW	HIGH(_Task_LCD)
00410c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00410e   0e06     movlw	0x6                	MOVLW	LOW(_Task_LCD)
004110   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004112   ecc1     call	0x1f82, 0           	CALL	_InstallTask
004114   f00f
004116   6e00     movwf	0, 0               	MOVWF	r0x00
004118   0e09     movlw	0x9                	MOVLW	0x09
00411a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00411c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00411e   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
004120   5000     movf	0, 0, 0             	MOVF	r0x00, W
004122   e001     bz	0x4126                	BZ	_00134_DS_
                                           _00131_DS_:
                                           ;	.line	64; main.c	while(1){};
004124   d7ff     bra	0x4124               	BRA	_00131_DS_
                                           _00134_DS_:
                                           ;	.line	68; main.c	if(BRTOSStart() != OK)
004126   ecd1     call	0x59a2, 0           	CALL	_BRTOSStart
004128   f02c
00412a   6e00     movwf	0, 0               	MOVWF	r0x00
00412c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00412e   e001     bz	0x4132                	BZ	_00141_DS_
                                           _00136_DS_:
                                           ;	.line	72; main.c	while(1){};
004130   d7ff     bra	0x4130               	BRA	_00136_DS_
                                           _00141_DS_:
004132   d7ff     bra	0x4132               	BRA	_00141_DS_
004134   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           __str_0:
004136   7953     btg	0x53, 0x4, 0x1       	DB	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x00
004138   7473     btg	0x73, 0x2, 0         
00413a   6d65     negf	0x65, 0x1           
00413c   5420     subfwb	0x20, 0, 0        
00413e   6d69     negf	0x69, 0x1           
004140   0065     dw	0x65  ;unknown opcode 
                                           ; ; Starting pCode block
                                           __str_1:
004142   6154     cpfslt	0x54, 0x1         	DB	0x54, 0x61, 0x72, 0x65, 0x66, 0x61, 0x20, 0x54, 0x65, 0x73, 0x74, 0x65
004144   6572     cpfsgt	0x72, 0x1         
004146   6166     cpfslt	0x66, 0x1         
004148   5420     subfwb	0x20, 0, 0        
00414a   7365     btg	0x65, 0x1, 0x1       
00414c   6574     cpfsgt	0x74, 0x1         
00414e   3120     rrcf	0x20, 0, 0x1        	DB	0x20, 0x31, 0x00
004150   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_2:
004152   6154     cpfslt	0x54, 0x1         	DB	0x54, 0x61, 0x72, 0x65, 0x66, 0x61, 0x20, 0x54, 0x65, 0x73, 0x74, 0x65
004154   6572     cpfsgt	0x72, 0x1         
004156   6166     cpfslt	0x66, 0x1         
004158   5420     subfwb	0x20, 0, 0        
00415a   7365     btg	0x65, 0x1, 0x1       
00415c   6574     cpfsgt	0x74, 0x1         
00415e   3220     rrcf	0x20, 0x1, 0        	DB	0x20, 0x32, 0x00
004160   0000     nop                      
                                           ; ; Starting pCode block
                                           __str_3:
004162   6154     cpfslt	0x54, 0x1         	DB	0x54, 0x61, 0x72, 0x65, 0x66, 0x61, 0x20, 0x53, 0x65, 0x72, 0x69, 0x61
004164   6572     cpfsgt	0x72, 0x1         
004166   6166     cpfslt	0x66, 0x1         
004168   5320     movf	0x20, 0x1, 0x1      
00416a   7265     btg	0x65, 0x1, 0         
00416c   6169     cpfslt	0x69, 0x1         
00416e   006c     dw	0x6c  ;unknown opcode 	DB	0x6c, 0x00
                                           ; ; Starting pCode block
                                           __str_4:
004170   6154     cpfslt	0x54, 0x1         	DB	0x54, 0x61, 0x72, 0x65, 0x66, 0x61, 0x20, 0x4c, 0x43, 0x44, 0x00
004172   6572     cpfsgt	0x72, 0x1         
004174   6166     cpfslt	0x66, 0x1         
004176   4c20     dcfsnz	0x20, 0, 0        
004178   4443     rlncf	0x43, 0, 0         
00417a   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  390 (0x0186) bytes ( 0.30%)
                                           ;           	  195 (0x00c3) words
                                           ; udata size:	    3 (0x0003) bytes ( 0.23%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:13 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _InicializaAD
                                           	global _LeValorAD
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_adc__LeValorAD	code
                                           _LeValorAD:
                                           ;	.line	32; drivers/adc.c	int LeValorAD(void)
006036   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006038   ffe5
00603a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00603c   ffe5
00603e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006040   ffda
006042   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006044   ffd9
006046   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006048   ffe5
00604a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00604c   ffe5
00604e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006050   ffe5
006052   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006054   ffe5
                                           ;	.line	35; drivers/adc.c	ADCON0 |= 0b00000010;     //inicia conversao
006056   0ec2     movlw	0xc2               	MOVLW	0xc2
006058   6e00     movwf	0, 0               	MOVWF	r0x00
00605a   0e0f     movlw	0xf                	MOVLW	0x0f
00605c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00605e   0ec2     movlw	0xc2               	MOVLW	0xc2
006060   6e02     movwf	0x2, 0             	MOVWF	r0x02
006062   0e0f     movlw	0xf                	MOVLW	0x0f
006064   6e03     movwf	0x3, 0             	MOVWF	r0x03
006066   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
006068   ffe9
00606a   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00606c   ffea
00606e   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
006070   f002
006072   8202     bsf	0x2, 0x1, 0          	BSF	r0x02, 1
006074   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006076   ffe9
006078   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00607a   ffea
00607c   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
00607e   ffef
                                           _00110_DS_:
                                           ;	.line	37; drivers/adc.c	while(BitTst(ADCON0,1)); // espera terminar a convers�o;
006080   0ec2     movlw	0xc2               	MOVLW	0xc2
006082   6e00     movwf	0, 0               	MOVWF	r0x00
006084   0e0f     movlw	0xf                	MOVLW	0x0f
006086   6e01     movwf	0x1, 0             	MOVWF	r0x01
006088   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00608a   ffe9
00608c   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00608e   ffea
006090   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
006092   f000
006094   b200     btfsc	0, 0x1, 0          	BTFSC	r0x00, 1
006096   d7f4     bra	0x6080               	BRA	_00110_DS_
                                           ;	.line	39; drivers/adc.c	ADvalor = ADRESH ; // le o resultado
006098   0ec4     movlw	0xc4               	MOVLW	0xc4
00609a   6e00     movwf	0, 0               	MOVWF	r0x00
00609c   0e0f     movlw	0xf                	MOVLW	0x0f
00609e   6e01     movwf	0x1, 0             	MOVWF	r0x01
0060a0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0060a2   ffe9
0060a4   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0060a6   ffea
0060a8   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0060aa   f000
0060ac   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           ;	.line	40; drivers/adc.c	ADvalor <<= 8;
0060ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0060b0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0060b2   6a00     clrf	0, 0                	CLRF	r0x00
                                           ;	.line	41; drivers/adc.c	ADvalor += ADRESL;
0060b4   0ec3     movlw	0xc3               	MOVLW	0xc3
0060b6   6e02     movwf	0x2, 0             	MOVWF	r0x02
0060b8   0e0f     movlw	0xf                	MOVLW	0x0f
0060ba   6e03     movwf	0x3, 0             	MOVWF	r0x03
0060bc   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
0060be   ffe9
0060c0   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
0060c2   ffea
0060c4   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
0060c6   f002
0060c8   6a03     clrf	0x3, 0              	CLRF	r0x03
0060ca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0060cc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0060ce   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0060d0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
                                           ;	.line	42; drivers/adc.c	return ADvalor;
0060d2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0060d4   fff3
0060d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0060d8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0060da   f003
0060dc   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0060de   f002
0060e0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0060e2   f001
0060e4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0060e6   f000
0060e8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0060ea   ffd9
0060ec   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0060ee   ffda
0060f0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_adc__InicializaAD	code
                                           _InicializaAD:
                                           ;	.line	23; drivers/adc.c	void InicializaAD(void)
006528   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00652a   ffe5
00652c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00652e   ffe5
006530   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006532   ffda
006534   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006536   ffd9
006538   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00653a   ffe5
00653c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00653e   ffe5
006540   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006542   ffe5
006544   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006546   ffe5
                                           ;	.line	25; drivers/adc.c	BitSet(TRISA,0); //seta o bit 0 como entrada
006548   0e92     movlw	0x92               	MOVLW	0x92
00654a   6e00     movwf	0, 0               	MOVWF	r0x00
00654c   0e0f     movlw	0xf                	MOVLW	0x0f
00654e   6e01     movwf	0x1, 0             	MOVWF	r0x01
006550   0e92     movlw	0x92               	MOVLW	0x92
006552   6e02     movwf	0x2, 0             	MOVWF	r0x02
006554   0e0f     movlw	0xf                	MOVLW	0x0f
006556   6e03     movwf	0x3, 0             	MOVWF	r0x03
006558   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
00655a   ffe9
00655c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
00655e   ffea
006560   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
006562   f002
006564   8002     bsf	0x2, 0, 0            	BSF	r0x02, 0
006566   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006568   ffe9
00656a   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00656c   ffea
00656e   c002     movff	0x2, 0xfef         	MOVFF	r0x02, INDF0
006570   ffef
                                           ;	.line	27; drivers/adc.c	ADCON0 = 0b00000001; //seleciona o canal 0 e liga o ad
006572   0ec2     movlw	0xc2               	MOVLW	0xc2
006574   6e00     movwf	0, 0               	MOVWF	r0x00
006576   0e0f     movlw	0xf                	MOVLW	0x0f
006578   6e01     movwf	0x1, 0             	MOVWF	r0x01
00657a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00657c   ffe9
00657e   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
006580   ffea
006582   0e01     movlw	0x1                	MOVLW	0x01
006584   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	28; drivers/adc.c	ADCON1 = 0b00001110; //apenas AN0 � analogico, a referencia � baseada na fonte
006586   0ec1     movlw	0xc1               	MOVLW	0xc1
006588   6e00     movwf	0, 0               	MOVWF	r0x00
00658a   0e0f     movlw	0xf                	MOVLW	0x0f
00658c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00658e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006590   ffe9
006592   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
006594   ffea
006596   0e0e     movlw	0xe                	MOVLW	0x0e
006598   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	29; drivers/adc.c	ADCON2 = 0b10101010; //FOSC /32, Alinhamento � direita e tempo de conv = 12 TAD
00659a   0ec0     movlw	0xc0               	MOVLW	0xc0
00659c   6e00     movwf	0, 0               	MOVWF	r0x00
00659e   0e0f     movlw	0xf                	MOVLW	0x0f
0065a0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0065a2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0065a4   ffe9
0065a6   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0065a8   ffea
0065aa   0eaa     movlw	0xaa               	MOVLW	0xaa
0065ac   6eef     movwf	0xef, 0            	MOVWF	INDF0
0065ae   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0065b0   f003
0065b2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0065b4   f002
0065b6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0065b8   f001
0065ba   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0065bc   f000
0065be   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0065c0   ffd9
0065c2   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0065c4   ffda
0065c6   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  348 (0x015c) bytes ( 0.27%)
                                           ;           	  174 (0x00ae) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:13 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _QUEUE_STACK
                                           	global _LastOSDuty
                                           	global _SelectedTask
                                           	global _iQueueAddress
                                           	global _BufferText
                                           	global _version
                                           	global _OSSchedule
                                           	global _DelayTask
                                           	global _DelayTaskHMSM
                                           	global _OS_TICK_HANDLER
                                           	global _BRTOSStart
                                           	global _PreInstallTasks
                                           	global _BlockPriority
                                           	global _UnBlockPriority
                                           	global _BlockTask
                                           	global _UnBlockTask
                                           	global _BlockMultipleTask
                                           	global _UnBlockMultipleTask
                                           	global _Idle
                                           	global _InstallTask
                                           	global _InstallIdle
                                           	global _BRTOS_Init
                                           	global _initEvents
                                           	global _SAScheduler
                                           	global _PriorityVector
                                           	global _iStackAddress
                                           	global _StackAddress
                                           	global _NumberOfInstalledTasks
                                           	global _currentTask
                                           	global _OSReadyList
                                           	global _OSBlockedList
                                           	global _counter
                                           	global _OSDuty
                                           	global _OSDutyTmp
                                           	global _DutyCnt
                                           	global _TaskAlloc
                                           	global _iNesting
                                           	global _Tail
                                           	global _Head
                                           	global _BRTOS_Sem_Table
                                           	global _BRTOS_Mutex_Table
                                           	global _BRTOS_Queue_Table
                                           	global _STACK
                                           	global _ContextTask
                                           	global _PriorityMask
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput2
                                           	extern __gptrput3
                                           	extern __gptrget1
                                           	extern __gptrget2
                                           	extern __gptrget3
                                           	extern __gptrput1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _CreateVirtualStack
                                           	extern _TickTimerSetup
                                           	extern _SwitchContext
                                           	extern __mullong
                                           	extern __divulong
                                           	extern __modulong
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _version	db	LOW(__str_0), HIGH(__str_0), UPPER(__str_0)
                                           _iStackAddress	db	0x00, 0x00
                                           _iQueueAddress	db	0x00, 0x00
                                           _StackAddress	db	0x00, 0x00
                                           _OSReadyList	db	0x00, 0x00
                                           _OSBlockedList	db	0xff, 0xff
                                           _OSDuty	db	0x00, 0x00, 0x00, 0x00
                                           _OSDutyTmp	db	0x00, 0x00, 0x00, 0x00
                                           _LastOSDuty	db	0x00, 0x00
                                           _DutyCnt	db	0x00, 0x00
                                           _TaskAlloc	db	0x00, 0x00, 0x00, 0x00
                                           _iNesting	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           
                                           udata_BRTOS_0	udata
                                           _BufferText	res	32
                                           
                                           udata_BRTOS_1	udata
                                           _SelectedTask	res	1
                                           
                                           udata_BRTOS_2	udata
                                           _QUEUE_STACK	res	128
                                           
                                           udata_BRTOS_3	udata
                                           _PriorityVector	res	16
                                           
                                           udata_BRTOS_4	udata
                                           _Tail	res	3
                                           
                                           udata_BRTOS_5	udata
                                           _Head	res	3
                                           
                                           udata_BRTOS_6	udata
                                           _ContextTask	res	144
                                           
                                           udata_BRTOS_7	udata
                                           _currentTask	res	1
                                           
                                           udata_BRTOS_8	udata
                                           _counter	res	2
                                           
                                           udata_BRTOS_9	udata
                                           _NumberOfInstalledTasks	res	1
                                           
                                           udata_BRTOS_10	udata
                                           _STACK	res	128
                                           
                                           udata_BRTOS_11	udata
                                           _BRTOS_Sem_Table	res	10
                                           
                                           udata_BRTOS_12	udata
                                           _BRTOS_Mutex_Table	res	16
                                           
                                           udata_BRTOS_13	udata
                                           _BRTOS_Queue_Table	res	24
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_BRTOS__SAScheduler	code
                                           _SAScheduler:
                                           ;	.line	1199; brtos/BRTOS.c	INT8U SAScheduler(PriorityType ReadyList)
004dde   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
004de0   ffe5
004de2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004de4   ffe5
004de6   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
004de8   ffda
004dea   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004dec   ffd9
004dee   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004df0   ffe5
004df2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004df4   ffe5
004df6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004df8   ffe5
004dfa   0e03     movlw	0x3                	MOVLW	0x03
004dfc   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004dfe   f000
004e00   0e04     movlw	0x4                	MOVLW	0x04
004e02   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004e04   f001
                                           ;	.line	1318; brtos/BRTOS.c	if (ReadyList > 0xFF)
004e06   0e01     movlw	0x1                	MOVLW	0x01
004e08   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e0a   e102     bnz	0x4e10               	BNZ	_00532_DS_
004e0c   0e00     movlw	0                  	MOVLW	0x00
004e0e   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00532_DS_:
004e10   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
004e12   d042     bra	0x4e98               	BRA	_00513_DS_
                                           ;	.line	1320; brtos/BRTOS.c	if (ReadyList > 0xFFF)
004e14   0e10     movlw	0x10               	MOVLW	0x10
004e16   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e18   e102     bnz	0x4e1e               	BNZ	_00533_DS_
004e1a   0e00     movlw	0                  	MOVLW	0x00
004e1c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00533_DS_:
004e1e   e31e     bnc	0x4e5c               	BNC	_00489_DS_
                                           ;	.line	1322; brtos/BRTOS.c	if (ReadyList > 0x3FFF)
004e20   0e40     movlw	0x40               	MOVLW	0x40
004e22   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e24   e102     bnz	0x4e2a               	BNZ	_00534_DS_
004e26   0e00     movlw	0                  	MOVLW	0x00
004e28   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00534_DS_:
004e2a   e30c     bnc	0x4e44               	BNC	_00477_DS_
                                           ;	.line	1324; brtos/BRTOS.c	if (ReadyList > 0x7FFF)
004e2c   0e80     movlw	0x80               	MOVLW	0x80
004e2e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e30   e102     bnz	0x4e36               	BNZ	_00535_DS_
004e32   0e00     movlw	0                  	MOVLW	0x00
004e34   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00535_DS_:
004e36   e303     bnc	0x4e3e               	BNC	_00471_DS_
                                           ;	.line	1326; brtos/BRTOS.c	prio = 15;
004e38   0e0f     movlw	0xf                	MOVLW	0x0f
004e3a   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e3c   d06d     bra	0x4f18               	BRA	_00514_DS_
                                           _00471_DS_:
                                           ;	.line	1330; brtos/BRTOS.c	prio = 14;
004e3e   0e0e     movlw	0xe                	MOVLW	0x0e
004e40   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e42   d06a     bra	0x4f18               	BRA	_00514_DS_
                                           _00477_DS_:
                                           ;	.line	1335; brtos/BRTOS.c	if (ReadyList > 0x1FFF)
004e44   0e20     movlw	0x20               	MOVLW	0x20
004e46   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e48   e102     bnz	0x4e4e               	BNZ	_00536_DS_
004e4a   0e00     movlw	0                  	MOVLW	0x00
004e4c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00536_DS_:
004e4e   e303     bnc	0x4e56               	BNC	_00474_DS_
                                           ;	.line	1337; brtos/BRTOS.c	prio = 13; 
004e50   0e0d     movlw	0xd                	MOVLW	0x0d
004e52   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e54   d061     bra	0x4f18               	BRA	_00514_DS_
                                           _00474_DS_:
                                           ;	.line	1341; brtos/BRTOS.c	prio = 12;
004e56   0e0c     movlw	0xc                	MOVLW	0x0c
004e58   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e5a   d05e     bra	0x4f18               	BRA	_00514_DS_
                                           _00489_DS_:
                                           ;	.line	1347; brtos/BRTOS.c	if (ReadyList > 0x3FF)
004e5c   0e04     movlw	0x4                	MOVLW	0x04
004e5e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e60   e102     bnz	0x4e66               	BNZ	_00537_DS_
004e62   0e00     movlw	0                  	MOVLW	0x00
004e64   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00537_DS_:
004e66   e30c     bnc	0x4e80               	BNC	_00486_DS_
                                           ;	.line	1349; brtos/BRTOS.c	if (ReadyList > 0x7FF)
004e68   0e08     movlw	0x8                	MOVLW	0x08
004e6a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e6c   e102     bnz	0x4e72               	BNZ	_00538_DS_
004e6e   0e00     movlw	0                  	MOVLW	0x00
004e70   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00538_DS_:
004e72   e303     bnc	0x4e7a               	BNC	_00480_DS_
                                           ;	.line	1351; brtos/BRTOS.c	prio = 11;
004e74   0e0b     movlw	0xb                	MOVLW	0x0b
004e76   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e78   d04f     bra	0x4f18               	BRA	_00514_DS_
                                           _00480_DS_:
                                           ;	.line	1355; brtos/BRTOS.c	prio = 10;
004e7a   0e0a     movlw	0xa                	MOVLW	0x0a
004e7c   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e7e   d04c     bra	0x4f18               	BRA	_00514_DS_
                                           _00486_DS_:
                                           ;	.line	1360; brtos/BRTOS.c	if (ReadyList > 0x1FF)
004e80   0e02     movlw	0x2                	MOVLW	0x02
004e82   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e84   e102     bnz	0x4e8a               	BNZ	_00539_DS_
004e86   0e00     movlw	0                  	MOVLW	0x00
004e88   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00539_DS_:
004e8a   e303     bnc	0x4e92               	BNC	_00483_DS_
                                           ;	.line	1362; brtos/BRTOS.c	prio = 9;
004e8c   0e09     movlw	0x9                	MOVLW	0x09
004e8e   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e90   d043     bra	0x4f18               	BRA	_00514_DS_
                                           _00483_DS_:
                                           ;	.line	1366; brtos/BRTOS.c	prio = 8;
004e92   0e08     movlw	0x8                	MOVLW	0x08
004e94   6e02     movwf	0x2, 0             	MOVWF	r0x02
004e96   d040     bra	0x4f18               	BRA	_00514_DS_
                                           _00513_DS_:
                                           ;	.line	1374; brtos/BRTOS.c	if (ReadyList > 0x0F)
004e98   0e00     movlw	0                  	MOVLW	0x00
004e9a   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004e9c   e102     bnz	0x4ea2               	BNZ	_00540_DS_
004e9e   0e10     movlw	0x10               	MOVLW	0x10
004ea0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00540_DS_:
004ea2   e31e     bnc	0x4ee0               	BNC	_00510_DS_
                                           ;	.line	1376; brtos/BRTOS.c	if (ReadyList > 0x3F)
004ea4   0e00     movlw	0                  	MOVLW	0x00
004ea6   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004ea8   e102     bnz	0x4eae               	BNZ	_00541_DS_
004eaa   0e40     movlw	0x40               	MOVLW	0x40
004eac   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00541_DS_:
004eae   e30c     bnc	0x4ec8               	BNC	_00498_DS_
                                           ;	.line	1378; brtos/BRTOS.c	if (ReadyList > 0x7F)
004eb0   0e00     movlw	0                  	MOVLW	0x00
004eb2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004eb4   e102     bnz	0x4eba               	BNZ	_00542_DS_
004eb6   0e80     movlw	0x80               	MOVLW	0x80
004eb8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00542_DS_:
004eba   e303     bnc	0x4ec2               	BNC	_00492_DS_
                                           ;	.line	1380; brtos/BRTOS.c	prio = 7;
004ebc   0e07     movlw	0x7                	MOVLW	0x07
004ebe   6e02     movwf	0x2, 0             	MOVWF	r0x02
004ec0   d02b     bra	0x4f18               	BRA	_00514_DS_
                                           _00492_DS_:
                                           ;	.line	1384; brtos/BRTOS.c	prio = 6;
004ec2   0e06     movlw	0x6                	MOVLW	0x06
004ec4   6e02     movwf	0x2, 0             	MOVWF	r0x02
004ec6   d028     bra	0x4f18               	BRA	_00514_DS_
                                           _00498_DS_:
                                           ;	.line	1389; brtos/BRTOS.c	if (ReadyList > 0x1F)
004ec8   0e00     movlw	0                  	MOVLW	0x00
004eca   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004ecc   e102     bnz	0x4ed2               	BNZ	_00543_DS_
004ece   0e20     movlw	0x20               	MOVLW	0x20
004ed0   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00543_DS_:
004ed2   e303     bnc	0x4eda               	BNC	_00495_DS_
                                           ;	.line	1391; brtos/BRTOS.c	prio = 5; 
004ed4   0e05     movlw	0x5                	MOVLW	0x05
004ed6   6e02     movwf	0x2, 0             	MOVWF	r0x02
004ed8   d01f     bra	0x4f18               	BRA	_00514_DS_
                                           _00495_DS_:
                                           ;	.line	1395; brtos/BRTOS.c	prio = 4;
004eda   0e04     movlw	0x4                	MOVLW	0x04
004edc   6e02     movwf	0x2, 0             	MOVWF	r0x02
004ede   d01c     bra	0x4f18               	BRA	_00514_DS_
                                           _00510_DS_:
                                           ;	.line	1401; brtos/BRTOS.c	if (ReadyList > 0x03)
004ee0   0e00     movlw	0                  	MOVLW	0x00
004ee2   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004ee4   e102     bnz	0x4eea               	BNZ	_00544_DS_
004ee6   0e04     movlw	0x4                	MOVLW	0x04
004ee8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00544_DS_:
004eea   e30c     bnc	0x4f04               	BNC	_00507_DS_
                                           ;	.line	1403; brtos/BRTOS.c	if (ReadyList > 0x07)
004eec   0e00     movlw	0                  	MOVLW	0x00
004eee   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004ef0   e102     bnz	0x4ef6               	BNZ	_00545_DS_
004ef2   0e08     movlw	0x8                	MOVLW	0x08
004ef4   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00545_DS_:
004ef6   e303     bnc	0x4efe               	BNC	_00501_DS_
                                           ;	.line	1405; brtos/BRTOS.c	prio = 3;
004ef8   0e03     movlw	0x3                	MOVLW	0x03
004efa   6e02     movwf	0x2, 0             	MOVWF	r0x02
004efc   d00d     bra	0x4f18               	BRA	_00514_DS_
                                           _00501_DS_:
                                           ;	.line	1409; brtos/BRTOS.c	prio = 2;
004efe   0e02     movlw	0x2                	MOVLW	0x02
004f00   6e02     movwf	0x2, 0             	MOVWF	r0x02
004f02   d00a     bra	0x4f18               	BRA	_00514_DS_
                                           _00507_DS_:
                                           ;	.line	1414; brtos/BRTOS.c	if (ReadyList > 0x1)
004f04   0e00     movlw	0                  	MOVLW	0x00
004f06   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
004f08   e102     bnz	0x4f0e               	BNZ	_00546_DS_
004f0a   0e02     movlw	0x2                	MOVLW	0x02
004f0c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00546_DS_:
004f0e   e303     bnc	0x4f16               	BNC	_00504_DS_
                                           ;	.line	1416; brtos/BRTOS.c	prio = 1;
004f10   0e01     movlw	0x1                	MOVLW	0x01
004f12   6e02     movwf	0x2, 0             	MOVWF	r0x02
004f14   d001     bra	0x4f18               	BRA	_00514_DS_
                                           _00504_DS_:
                                           ;	.line	1420; brtos/BRTOS.c	prio = 0;
004f16   6a02     clrf	0x2, 0              	CLRF	r0x02
                                           _00514_DS_:
                                           ;	.line	1430; brtos/BRTOS.c	return prio;
004f18   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004f1a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
004f1c   f002
004f1e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004f20   f001
004f22   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004f24   f000
004f26   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004f28   ffd9
004f2a   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
004f2c   ffda
004f2e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__initEvents	code
                                           _initEvents:
                                           ;	.line	1161; brtos/BRTOS.c	void initEvents(void)
005eb2   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005eb4   ffe5
005eb6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005eb8   ffe5
005eba   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005ebc   ffda
005ebe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005ec0   ffd9
005ec2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005ec4   ffe5
005ec6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005ec8   ffe5
005eca   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005ecc   ffe5
005ece   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005ed0   ffe5
                                           ;	.line	1166; brtos/BRTOS.c	for(i=0;i<BRTOS_MAX_SEM;i++)
005ed2   0e02     movlw	0x2                	MOVLW	0x02
005ed4   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00458_DS_:
                                           ;	.line	1167; brtos/BRTOS.c	BRTOS_Sem_Table[i].OSEventAllocated = 0;
005ed6   0400     decf	0, 0, 0             	DECF	r0x00, W
005ed8   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ; ;multiply lit val:0x05 by variable r0x01 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
005eda   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005edc   0d05     mullw	0x5                	MULLW	0x05
005ede   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
005ee0   f002
005ee2   6a03     clrf	0x3, 0              	CLRF	r0x03
005ee4   0ec4     movlw	0xc4               	MOVLW	LOW(_BRTOS_Sem_Table)
005ee6   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
005ee8   0e03     movlw	0x3                	MOVLW	HIGH(_BRTOS_Sem_Table)
005eea   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005eec   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
005eee   ffe9
005ef0   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
005ef2   ffea
005ef4   0e00     movlw	0                  	MOVLW	0x00
005ef6   6eef     movwf	0xef, 0            	MOVWF	INDF0
005ef8   c001     movff	0x1, 0             	MOVFF	r0x01, r0x00
005efa   f000
                                           ;	.line	1166; brtos/BRTOS.c	for(i=0;i<BRTOS_MAX_SEM;i++)
005efc   5000     movf	0, 0, 0             	MOVF	r0x00, W
005efe   e1eb     bnz	0x5ed6               	BNZ	_00458_DS_
                                           ;	.line	1171; brtos/BRTOS.c	for(i=0;i<BRTOS_MAX_MUTEX;i++)
005f00   0e02     movlw	0x2                	MOVLW	0x02
005f02   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00461_DS_:
                                           ;	.line	1172; brtos/BRTOS.c	BRTOS_Mutex_Table[i].OSEventAllocated = 0;
005f04   0400     decf	0, 0, 0             	DECF	r0x00, W
005f06   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ; ;multiply lit val:0x08 by variable r0x01 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
005f08   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005f0a   0d08     mullw	0x8                	MULLW	0x08
005f0c   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
005f0e   f002
005f10   6a03     clrf	0x3, 0              	CLRF	r0x03
005f12   0eb4     movlw	0xb4               	MOVLW	LOW(_BRTOS_Mutex_Table)
005f14   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
005f16   0e03     movlw	0x3                	MOVLW	HIGH(_BRTOS_Mutex_Table)
005f18   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005f1a   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
005f1c   ffe9
005f1e   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
005f20   ffea
005f22   0e00     movlw	0                  	MOVLW	0x00
005f24   6eef     movwf	0xef, 0            	MOVWF	INDF0
005f26   c001     movff	0x1, 0             	MOVFF	r0x01, r0x00
005f28   f000
                                           ;	.line	1171; brtos/BRTOS.c	for(i=0;i<BRTOS_MAX_MUTEX;i++)
005f2a   5000     movf	0, 0, 0             	MOVF	r0x00, W
005f2c   e1eb     bnz	0x5f04               	BNZ	_00461_DS_
                                           ;	.line	1181; brtos/BRTOS.c	for(i=0;i<BRTOS_MAX_QUEUE;i++)
005f2e   0e03     movlw	0x3                	MOVLW	0x03
005f30   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00464_DS_:
                                           ;	.line	1182; brtos/BRTOS.c	BRTOS_Queue_Table[i].OSEventAllocated = 0;    
005f32   0400     decf	0, 0, 0             	DECF	r0x00, W
005f34   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ; ;multiply lit val:0x08 by variable r0x01 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
005f36   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005f38   0d08     mullw	0x8                	MULLW	0x08
005f3a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
005f3c   f002
005f3e   6a03     clrf	0x3, 0              	CLRF	r0x03
005f40   0ed3     movlw	0xd3               	MOVLW	LOW(_BRTOS_Queue_Table)
005f42   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
005f44   0e02     movlw	0x2                	MOVLW	HIGH(_BRTOS_Queue_Table)
005f46   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005f48   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
005f4a   ffe9
005f4c   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
005f4e   ffea
005f50   0e00     movlw	0                  	MOVLW	0x00
005f52   6eef     movwf	0xef, 0            	MOVWF	INDF0
005f54   c001     movff	0x1, 0             	MOVFF	r0x01, r0x00
005f56   f000
                                           ;	.line	1181; brtos/BRTOS.c	for(i=0;i<BRTOS_MAX_QUEUE;i++)
005f58   5000     movf	0, 0, 0             	MOVF	r0x00, W
005f5a   e1eb     bnz	0x5f32               	BNZ	_00464_DS_
005f5c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005f5e   f003
005f60   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005f62   f002
005f64   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005f66   f001
005f68   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005f6a   f000
005f6c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005f6e   ffd9
005f70   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005f72   ffda
005f74   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__BRTOS_Init	code
                                           _BRTOS_Init:
                                           ;	.line	1130; brtos/BRTOS.c	void BRTOS_Init(void)
006db4   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006db6   ffe5
006db8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006dba   ffe5
006dbc   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006dbe   ffda
006dc0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006dc2   ffd9
                                           ;	.line	1134; brtos/BRTOS.c	StackAddress = (INT16U)&STACK;
006dc4   0e00     movlw	0                  	MOVLW	LOW(_STACK)
006dc6   0102     movlb	0x2                	BANKSEL	_StackAddress
006dc8   6f97     movwf	0x97, 0x1          	MOVWF	_StackAddress, B
006dca   0e03     movlw	0x3                	MOVLW	HIGH(_STACK)
006dcc   0102     movlb	0x2                	BANKSEL	(_StackAddress + 1)
006dce   6f98     movwf	0x98, 0x1          	MOVWF	(_StackAddress + 1), B
                                           ;	.line	1138; brtos/BRTOS.c	initEvents();
006dd0   ec59     call	0x5eb2, 0           	CALL	_initEvents
006dd2   f02f
                                           ;	.line	1143; brtos/BRTOS.c	PreInstallTasks();  
006dd4   ec30     call	0x6660, 0           	CALL	_PreInstallTasks
006dd6   f033
                                           ;	.line	1148; brtos/BRTOS.c	TickTimerSetup(); 
006dd8   ec22     call	0x6e44, 0           	CALL	_TickTimerSetup
006dda   f037
006ddc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006dde   ffd9
006de0   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006de2   ffda
006de4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__InstallIdle	code
                                           _InstallIdle:
                                           ;	.line	1056; brtos/BRTOS.c	INT8U InstallIdle(void(*FctPtr)(void), INT16U USER_STACKED_BYTES)
0051c6   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0051c8   ffe5
0051ca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0051cc   ffe5
0051ce   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0051d0   ffda
0051d2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0051d4   ffd9
0051d6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0051d8   ffe5
0051da   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0051dc   ffe5
0051de   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0051e0   ffe5
0051e2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0051e4   ffe5
0051e6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0051e8   ffe5
0051ea   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0051ec   ffe5
0051ee   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0051f0   ffe5
0051f2   0e03     movlw	0x3                	MOVLW	0x03
0051f4   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0051f6   f000
0051f8   0e04     movlw	0x4                	MOVLW	0x04
0051fa   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0051fc   f001
0051fe   0e05     movlw	0x5                	MOVLW	0x05
005200   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
005202   f002
005204   0e06     movlw	0x6                	MOVLW	0x06
005206   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
005208   f003
00520a   0e07     movlw	0x7                	MOVLW	0x07
00520c   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
00520e   f004
005210   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	1060; brtos/BRTOS.c	if (currentTask)
005212   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
005214   e001     bz	0x5218                	BZ	_00426_DS_
                                           ;	.line	1062; brtos/BRTOS.c	OSEnterCritical();
005216   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00426_DS_:
                                           ;	.line	1064; brtos/BRTOS.c	if (USER_STACKED_BYTES < NUMBER_MIN_OF_STACKED_BYTES)
005218   0e00     movlw	0                  	MOVLW	0x00
00521a   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
00521c   e102     bnz	0x5222               	BNZ	_00445_DS_
00521e   0e38     movlw	0x38               	MOVLW	0x38
005220   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00445_DS_:
005222   e206     bc	0x5230                	BC	_00430_DS_
005224   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	1066; brtos/BRTOS.c	if (currentTask)
005226   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
005228   e001     bz	0x522c                	BZ	_00428_DS_
                                           ;	.line	1068; brtos/BRTOS.c	OSExitCritical();
00522a   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00428_DS_:
                                           ;	.line	1069; brtos/BRTOS.c	return STACK_SIZE_TOO_SMALL;
00522c   0e02     movlw	0x2                	MOVLW	0x02
00522e   d058     bra	0x52e0               	BRA	_00437_DS_
                                           _00430_DS_:
                                           ;	.line	1072; brtos/BRTOS.c	if ((iStackAddress + USER_STACKED_BYTES) > HEAP_SIZE)
005230   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005232   0102     movlb	0x2                	BANKSEL	_iStackAddress
005234   2593     addwf	0x93, 0, 0x1       	ADDWF	_iStackAddress, W, B
005236   6e05     movwf	0x5, 0             	MOVWF	r0x05
005238   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00523a   0102     movlb	0x2                	BANKSEL	(_iStackAddress + 1)
00523c   2194     addwfc	0x94, 0, 0x1      	ADDWFC	(_iStackAddress + 1), W, B
00523e   6e06     movwf	0x6, 0             	MOVWF	r0x06
005240   0e00     movlw	0                  	MOVLW	0x00
005242   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
005244   e102     bnz	0x524a               	BNZ	_00446_DS_
005246   0e81     movlw	0x81               	MOVLW	0x81
005248   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
                                           _00446_DS_:
00524a   e306     bnc	0x5258               	BNC	_00434_DS_
00524c   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	1074; brtos/BRTOS.c	if (currentTask)
00524e   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
005250   e001     bz	0x5254                	BZ	_00432_DS_
                                           ;	.line	1076; brtos/BRTOS.c	OSExitCritical();
005252   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00432_DS_:
                                           ;	.line	1077; brtos/BRTOS.c	return NO_MEMORY;
005254   0e01     movlw	0x1                	MOVLW	0x01
005256   d044     bra	0x52e0               	BRA	_00437_DS_
                                           _00434_DS_:
005258   0102     movlb	0x2                	BANKSEL	_StackAddress
                                           ;	.line	1084; brtos/BRTOS.c	ContextTask[NUMBER_OF_TASKS+1].StackPoint = StackAddress + NUMBER_MIN_OF_STACKED_BYTES;
00525a   5197     movf	0x97, 0, 0x1        	MOVF	_StackAddress, W, B
00525c   0f38     addlw	0x38               	ADDLW	0x38
00525e   6e05     movwf	0x5, 0             	MOVWF	r0x05
005260   0e00     movlw	0                  	MOVLW	0x00
005262   0102     movlb	0x2                	BANKSEL	(_StackAddress + 1)
005264   2198     addwfc	0x98, 0, 0x1      	ADDWFC	(_StackAddress + 1), W, B
005266   6e06     movwf	0x6, 0             	MOVWF	r0x06
005268   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00526a   0102     movlb	0x2                	BANKSEL	(_ContextTask + 131)
00526c   6f83     movwf	0x83, 0x1          	MOVWF	(_ContextTask + 131), B
00526e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
005270   0102     movlb	0x2                	BANKSEL	(_ContextTask + 132)
005272   6f84     movwf	0x84, 0x1          	MOVWF	(_ContextTask + 132), B
005274   0102     movlb	0x2                	BANKSEL	_StackAddress
                                           ;	.line	1091; brtos/BRTOS.c	ContextTask[NUMBER_OF_TASKS+1].StackInit = StackAddress;
005276   5197     movf	0x97, 0, 0x1        	MOVF	_StackAddress, W, B
005278   0102     movlb	0x2                	BANKSEL	(_ContextTask + 133)
00527a   6f85     movwf	0x85, 0x1          	MOVWF	(_ContextTask + 133), B
00527c   0102     movlb	0x2                	BANKSEL	(_StackAddress + 1)
00527e   5198     movf	0x98, 0, 0x1        	MOVF	(_StackAddress + 1), W, B
005280   0102     movlb	0x2                	BANKSEL	(_ContextTask + 134)
005282   6f86     movwf	0x86, 0x1          	MOVWF	(_ContextTask + 134), B
005284   0102     movlb	0x2                	BANKSEL	(_ContextTask + 137)
                                           ;	.line	1097; brtos/BRTOS.c	ContextTask[NUMBER_OF_TASKS+1].Priority = 0;
005286   6b89     clrf	0x89, 0x1           	CLRF	(_ContextTask + 137), B
                                           ;	.line	1099; brtos/BRTOS.c	PriorityVector[0] = NUMBER_OF_TASKS+1;
005288   0e08     movlw	0x8                	MOVLW	0x08
00528a   0103     movlb	0x3                	BANKSEL	_PriorityVector
00528c   6fa4     movwf	0xa4, 0x1          	MOVWF	_PriorityVector, B
                                           ;	.line	1102; brtos/BRTOS.c	CreateVirtualStack(FctPtr, USER_STACKED_BYTES);    
00528e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005290   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005292   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005294   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005296   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005298   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00529a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00529c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00529e   5000     movf	0, 0, 0             	MOVF	r0x00, W
0052a0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0052a2   ec63     call	0x10c6, 0           	CALL	_CreateVirtualStack
0052a4   f008
0052a6   0e05     movlw	0x5                	MOVLW	0x05
0052a8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0052aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0052ac   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	1105; brtos/BRTOS.c	iStackAddress = iStackAddress + USER_STACKED_BYTES;
0052ae   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0052b0   0102     movlb	0x2                	BANKSEL	_iStackAddress
0052b2   2793     addwf	0x93, 0x1, 0x1     	ADDWF	_iStackAddress, F, B
0052b4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0052b6   0102     movlb	0x2                	BANKSEL	(_iStackAddress + 1)
0052b8   2394     addwfc	0x94, 0x1, 0x1    	ADDWFC	(_iStackAddress + 1), F, B
                                           ;	.line	1108; brtos/BRTOS.c	StackAddress = StackAddress + USER_STACKED_BYTES;   
0052ba   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0052bc   0102     movlb	0x2                	BANKSEL	_StackAddress
0052be   2797     addwf	0x97, 0x1, 0x1     	ADDWF	_StackAddress, F, B
0052c0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0052c2   0102     movlb	0x2                	BANKSEL	(_StackAddress + 1)
0052c4   2398     addwfc	0x98, 0x1, 0x1    	ADDWFC	(_StackAddress + 1), F, B
                                           ;	.line	1110; brtos/BRTOS.c	ContextTask[NUMBER_OF_TASKS+1].TimeToWait = NO_TIMEOUT;
0052c6   0ee8     movlw	0xe8               	MOVLW	0xe8
0052c8   0102     movlb	0x2                	BANKSEL	(_ContextTask + 135)
0052ca   6f87     movwf	0x87, 0x1          	MOVWF	(_ContextTask + 135), B
0052cc   0efd     movlw	0xfd               	MOVLW	0xfd
0052ce   0102     movlb	0x2                	BANKSEL	(_ContextTask + 136)
0052d0   6f88     movwf	0x88, 0x1          	MOVWF	(_ContextTask + 136), B
0052d2   0102     movlb	0x2                	BANKSEL	_OSReadyList
                                           ;	.line	1117; brtos/BRTOS.c	OSReadyList = OSReadyList | (PriorityType)1;
0052d4   8199     bsf	0x99, 0, 0x1         	BSF	_OSReadyList, 0, B
0052d6   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	1119; brtos/BRTOS.c	if (currentTask)
0052d8   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0052da   e001     bz	0x52de                	BZ	_00436_DS_
                                           ;	.line	1121; brtos/BRTOS.c	OSExitCritical();
0052dc   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00436_DS_:
                                           ;	.line	1123; brtos/BRTOS.c	return OK;
0052de   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00437_DS_:
0052e0   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0052e2   f006
0052e4   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0052e6   f005
0052e8   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0052ea   f004
0052ec   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0052ee   f003
0052f0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0052f2   f002
0052f4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0052f6   f001
0052f8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0052fa   f000
0052fc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0052fe   ffd9
005300   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005302   ffda
005304   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__InstallTask	code
                                           _InstallTask:
                                           ;	.line	916; brtos/BRTOS.c	INT8U InstallTask(void(*FctPtr)(void),const CHAR8 *TaskName, INT16U USER_STACKED_BYTES,INT8U iPriority)
001f82   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
001f84   ffe5
001f86   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001f88   ffe5
001f8a   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
001f8c   ffda
001f8e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001f90   ffd9
001f92   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001f94   ffe5
001f96   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001f98   ffe5
001f9a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001f9c   ffe5
001f9e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001fa0   ffe5
001fa2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001fa4   ffe5
001fa6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001fa8   ffe5
001faa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001fac   ffe5
001fae   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001fb0   ffe5
001fb2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001fb4   ffe5
001fb6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001fb8   ffe5
001fba   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001fbc   ffe5
001fbe   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001fc0   ffe5
001fc2   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
001fc4   ffe5
001fc6   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
001fc8   ffe5
001fca   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
001fcc   ffe5
001fce   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
001fd0   ffe5
001fd2   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
001fd4   ffe5
001fd6   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
001fd8   ffe5
001fda   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
001fdc   ffe5
001fde   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
001fe0   ffe5
001fe2   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
001fe4   ffe5
001fe6   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
001fe8   ffe5
001fea   0e03     movlw	0x3                	MOVLW	0x03
001fec   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001fee   f000
001ff0   0e04     movlw	0x4                	MOVLW	0x04
001ff2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001ff4   f001
001ff6   0e05     movlw	0x5                	MOVLW	0x05
001ff8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001ffa   f002
001ffc   0e06     movlw	0x6                	MOVLW	0x06
001ffe   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
002000   f003
002002   0e07     movlw	0x7                	MOVLW	0x07
002004   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
002006   f004
002008   0e08     movlw	0x8                	MOVLW	0x08
00200a   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
00200c   f005
00200e   0e09     movlw	0x9                	MOVLW	0x09
002010   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
002012   f006
002014   0e0a     movlw	0xa                	MOVLW	0x0a
002016   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
002018   f007
00201a   0e0b     movlw	0xb                	MOVLW	0x0b
00201c   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
00201e   f008
                                           ;	.line	920; brtos/BRTOS.c	INT8U TaskNumber = 0;
002020   6a09     clrf	0x9, 0              	CLRF	r0x09
002022   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	923; brtos/BRTOS.c	if (currentTask)
002024   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002026   e001     bz	0x202a                	BZ	_00366_DS_
                                           ;	.line	925; brtos/BRTOS.c	OSEnterCritical();  
002028   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00366_DS_:
                                           ;	.line	927; brtos/BRTOS.c	if (USER_STACKED_BYTES < NUMBER_MIN_OF_STACKED_BYTES)
00202a   0e00     movlw	0                  	MOVLW	0x00
00202c   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
00202e   e102     bnz	0x2034               	BNZ	_00413_DS_
002030   0e38     movlw	0x38               	MOVLW	0x38
002032   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
                                           _00413_DS_:
002034   e206     bc	0x2042                	BC	_00370_DS_
002036   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	929; brtos/BRTOS.c	if (currentTask)
002038   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
00203a   e001     bz	0x203e                	BZ	_00368_DS_
                                           ;	.line	931; brtos/BRTOS.c	OSExitCritical();
00203c   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00368_DS_:
                                           ;	.line	932; brtos/BRTOS.c	return STACK_SIZE_TOO_SMALL;
00203e   0e02     movlw	0x2                	MOVLW	0x02
002040   d15a     bra	0x22f6               	BRA	_00396_DS_
                                           _00370_DS_:
                                           ;	.line	935; brtos/BRTOS.c	if ((iStackAddress + USER_STACKED_BYTES) > HEAP_SIZE)
002042   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002044   0102     movlb	0x2                	BANKSEL	_iStackAddress
002046   2593     addwf	0x93, 0, 0x1       	ADDWF	_iStackAddress, W, B
002048   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00204a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00204c   0102     movlb	0x2                	BANKSEL	(_iStackAddress + 1)
00204e   2194     addwfc	0x94, 0, 0x1      	ADDWFC	(_iStackAddress + 1), W, B
002050   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002052   0e00     movlw	0                  	MOVLW	0x00
002054   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
002056   e102     bnz	0x205c               	BNZ	_00414_DS_
002058   0e81     movlw	0x81               	MOVLW	0x81
00205a   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00414_DS_:
00205c   e306     bnc	0x206a               	BNC	_00374_DS_
00205e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	937; brtos/BRTOS.c	if (currentTask)
002060   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002062   e001     bz	0x2066                	BZ	_00372_DS_
                                           ;	.line	939; brtos/BRTOS.c	OSExitCritical();
002064   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00372_DS_:
                                           ;	.line	940; brtos/BRTOS.c	return NO_MEMORY;
002066   0e01     movlw	0x1                	MOVLW	0x01
002068   d146     bra	0x22f6               	BRA	_00396_DS_
                                           _00374_DS_:
                                           ;	.line	943; brtos/BRTOS.c	if (iPriority)
00206a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00206c   e01e     bz	0x20aa                	BZ	_00386_DS_
                                           ;	.line	945; brtos/BRTOS.c	if (iPriority > configMAX_TASK_PRIORITY)
00206e   0e10     movlw	0x10               	MOVLW	0x10
002070   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
002072   e306     bnc	0x2080               	BNC	_00378_DS_
002074   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	947; brtos/BRTOS.c	if (currentTask)
002076   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002078   e001     bz	0x207c                	BZ	_00376_DS_
                                           ;	.line	949; brtos/BRTOS.c	OSExitCritical();        
00207a   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00376_DS_:
                                           ;	.line	950; brtos/BRTOS.c	return END_OF_AVAILABLE_PRIORITIES;
00207c   0e03     movlw	0x3                	MOVLW	0x03
00207e   d13b     bra	0x22f6               	BRA	_00396_DS_
                                           _00378_DS_:
                                           ;	.line	953; brtos/BRTOS.c	if (PriorityVector[iPriority] != EMPTY_PRIO)
002080   0ea4     movlw	0xa4               	MOVLW	LOW(_PriorityVector)
002082   2408     addwf	0x8, 0, 0          	ADDWF	r0x08, W
002084   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002086   6a0b     clrf	0xb, 0              	CLRF	r0x0b
002088   0e03     movlw	0x3                	MOVLW	HIGH(_PriorityVector)
00208a   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
00208c   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
00208e   ffe9
002090   c00b     movff	0xb, 0xfea         	MOVFF	r0x0b, FSR0H
002092   ffea
002094   cfef     movff	0xfef, 0xc         	MOVFF	INDF0, r0x0c
002096   f00c
002098   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00209a   0aff     xorlw	0xff               	XORLW	0xff
00209c   e00c     bz	0x20b6                	BZ	_00387_DS_
                                           _00417_DS_:
00209e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	955; brtos/BRTOS.c	if (currentTask)
0020a0   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0020a2   e001     bz	0x20a6                	BZ	_00380_DS_
                                           ;	.line	957; brtos/BRTOS.c	OSExitCritical();        
0020a4   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00380_DS_:
                                           ;	.line	958; brtos/BRTOS.c	return BUSY_PRIORITY;
0020a6   0e04     movlw	0x4                	MOVLW	0x04
0020a8   d126     bra	0x22f6               	BRA	_00396_DS_
                                           _00386_DS_:
0020aa   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	963; brtos/BRTOS.c	if (currentTask)
0020ac   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0020ae   e001     bz	0x20b2                	BZ	_00384_DS_
                                           ;	.line	965; brtos/BRTOS.c	OSExitCritical();
0020b0   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00384_DS_:
                                           ;	.line	966; brtos/BRTOS.c	return CANNOT_ASSIGN_IDLE_TASK_PRIO;
0020b2   0e07     movlw	0x7                	MOVLW	0x07
0020b4   d120     bra	0x22f6               	BRA	_00396_DS_
                                           _00387_DS_:
0020b6   0104     movlb	0x4                	BANKSEL	_NumberOfInstalledTasks
                                           ;	.line	969; brtos/BRTOS.c	NumberOfInstalledTasks++;
0020b8   2b05     incf	0x5, 0x1, 0x1       	INCF	_NumberOfInstalledTasks, F, B
                                           ;	.line	972; brtos/BRTOS.c	for(i=0;i<NUMBER_OF_TASKS;i++)
0020ba   6a0c     clrf	0xc, 0              	CLRF	r0x0c
0020bc   6a0d     clrf	0xd, 0              	CLRF	r0x0d
                                           _00390_DS_:
0020be   0e07     movlw	0x7                	MOVLW	0x07
0020c0   5c0d     subwf	0xd, 0, 0          	SUBWF	r0x0d, W
0020c2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0020c4   d03a     bra	0x213a               	BRA	_00393_DS_
                                           ;	.line	975; brtos/BRTOS.c	teste = teste<<i;
0020c6   0e01     movlw	0x1                	MOVLW	0x01
0020c8   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0020ca   0e00     movlw	0                  	MOVLW	0x00
0020cc   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
0020ce   0e00     movlw	0                  	MOVLW	0x00
0020d0   6e10     movwf	0x10, 0            	MOVWF	r0x10
0020d2   0e00     movlw	0                  	MOVLW	0x00
0020d4   6e11     movwf	0x11, 0            	MOVWF	r0x11
0020d6   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0020d8   e008     bz	0x20ea                	BZ	_00419_DS_
0020da   6ce8     negf	0xe8, 0             	NEGF	WREG
0020dc   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
                                           _00420_DS_:
0020de   360e     rlcf	0xe, 0x1, 0         	RLCF	r0x0e, F
0020e0   360f     rlcf	0xf, 0x1, 0         	RLCF	r0x0f, F
0020e2   3610     rlcf	0x10, 0x1, 0        	RLCF	r0x10, F
0020e4   3611     rlcf	0x11, 0x1, 0        	RLCF	r0x11, F
0020e6   0f01     addlw	0x1                	ADDLW	0x01
0020e8   e3fa     bnc	0x20de               	BNC	_00420_DS_
                                           _00419_DS_:
0020ea   0102     movlb	0x2                	BANKSEL	_TaskAlloc
                                           ;	.line	977; brtos/BRTOS.c	if (!(teste & TaskAlloc))
0020ec   51a9     movf	0xa9, 0, 0x1        	MOVF	_TaskAlloc, W, B
0020ee   140e     andwf	0xe, 0, 0          	ANDWF	r0x0e, W
0020f0   6e12     movwf	0x12, 0            	MOVWF	r0x12
0020f2   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 1)
0020f4   51aa     movf	0xaa, 0, 0x1        	MOVF	(_TaskAlloc + 1), W, B
0020f6   140f     andwf	0xf, 0, 0          	ANDWF	r0x0f, W
0020f8   6e13     movwf	0x13, 0            	MOVWF	r0x13
0020fa   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 2)
0020fc   51ab     movf	0xab, 0, 0x1        	MOVF	(_TaskAlloc + 2), W, B
0020fe   1410     andwf	0x10, 0, 0         	ANDWF	r0x10, W
002100   6e14     movwf	0x14, 0            	MOVWF	r0x14
002102   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 3)
002104   51ac     movf	0xac, 0, 0x1        	MOVF	(_TaskAlloc + 3), W, B
002106   1411     andwf	0x11, 0, 0         	ANDWF	r0x11, W
002108   6e15     movwf	0x15, 0            	MOVWF	r0x15
00210a   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00210c   1013     iorwf	0x13, 0, 0         	IORWF	r0x13, W
00210e   1014     iorwf	0x14, 0, 0         	IORWF	r0x14, W
002110   1015     iorwf	0x15, 0, 0         	IORWF	r0x15, W
002112   e10f     bnz	0x2132               	BNZ	_00392_DS_
                                           ;	.line	979; brtos/BRTOS.c	TaskNumber = i+1;
002114   280c     incf	0xc, 0, 0           	INCF	r0x0c, W
002116   6e09     movwf	0x9, 0             	MOVWF	r0x09
                                           ;	.line	980; brtos/BRTOS.c	TaskAlloc = TaskAlloc | teste;
002118   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00211a   0102     movlb	0x2                	BANKSEL	_TaskAlloc
00211c   13a9     iorwf	0xa9, 0x1, 0x1     	IORWF	_TaskAlloc, F, B
00211e   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
002120   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 1)
002122   13aa     iorwf	0xaa, 0x1, 0x1     	IORWF	(_TaskAlloc + 1), F, B
002124   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
002126   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 2)
002128   13ab     iorwf	0xab, 0x1, 0x1     	IORWF	(_TaskAlloc + 2), F, B
00212a   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
00212c   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 3)
00212e   13ac     iorwf	0xac, 0x1, 0x1     	IORWF	(_TaskAlloc + 3), F, B
                                           ;	.line	981; brtos/BRTOS.c	break;
002130   d004     bra	0x213a               	BRA	_00393_DS_
                                           _00392_DS_:
                                           ;	.line	972; brtos/BRTOS.c	for(i=0;i<NUMBER_OF_TASKS;i++)
002132   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
002134   c00d     movff	0xd, 0xc           	MOVFF	r0x0d, r0x0c
002136   f00c
002138   d7c2     bra	0x20be               	BRA	_00390_DS_
                                           ; ;multiply lit val:0x10 by variable r0x09 and store in r0x0c
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00393_DS_:
                                           ;	.line	985; brtos/BRTOS.c	Task = &ContextTask[TaskNumber];   
00213a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00213c   0d10     mullw	0x10               	MULLW	0x10
00213e   cff3     movff	0xff3, 0xc         	MOVFF	PRODL, r0x0c
002140   f00c
002142   6a0d     clrf	0xd, 0              	CLRF	r0x0d
002144   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
002146   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002148   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
00214a   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
00214c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00214e   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002150   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002152   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002154   0e80     movlw	0x80               	MOVLW	0x80
002156   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
                                           ;	.line	987; brtos/BRTOS.c	Task->TaskName = TaskName;
002158   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00215a   ffe5
00215c   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00215e   fff4
002160   c005     movff	0x5, 0xff6         	MOVFF	r0x05, TBLPTRL
002162   fff6
002164   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
002166   ffe9
002168   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
00216a   fff3
00216c   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00216e   ec99     call	0x6f32, 0           	CALL	__gptrput3
002170   f037
                                           ;	.line	992; brtos/BRTOS.c	Task->StackPoint = StackAddress + NUMBER_MIN_OF_STACKED_BYTES;
002172   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002174   0f03     addlw	0x3                	ADDLW	0x03
002176   6e03     movwf	0x3, 0             	MOVWF	r0x03
002178   0e00     movlw	0                  	MOVLW	0x00
00217a   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
00217c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00217e   0e00     movlw	0                  	MOVLW	0x00
002180   200e     addwfc	0xe, 0, 0         	ADDWFC	r0x0e, W
002182   6e05     movwf	0x5, 0             	MOVWF	r0x05
002184   0102     movlb	0x2                	BANKSEL	_StackAddress
002186   5197     movf	0x97, 0, 0x1        	MOVF	_StackAddress, W, B
002188   0f38     addlw	0x38               	ADDLW	0x38
00218a   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00218c   0e00     movlw	0                  	MOVLW	0x00
00218e   0102     movlb	0x2                	BANKSEL	(_StackAddress + 1)
002190   2198     addwfc	0x98, 0, 0x1      	ADDWFC	(_StackAddress + 1), W, B
002192   6e10     movwf	0x10, 0            	MOVWF	r0x10
002194   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002196   ffe5
002198   c010     movff	0x10, 0xff4        	MOVFF	r0x10, PRODH
00219a   fff4
00219c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00219e   ffe9
0021a0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0021a2   fff3
0021a4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0021a6   ecb3     call	0x6f66, 0           	CALL	__gptrput2
0021a8   f037
                                           ;	.line	999; brtos/BRTOS.c	Task->StackInit = StackAddress;
0021aa   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0021ac   0f05     addlw	0x5                	ADDLW	0x05
0021ae   6e03     movwf	0x3, 0             	MOVWF	r0x03
0021b0   0e00     movlw	0                  	MOVLW	0x00
0021b2   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
0021b4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0021b6   0e00     movlw	0                  	MOVLW	0x00
0021b8   200e     addwfc	0xe, 0, 0         	ADDWFC	r0x0e, W
0021ba   6e05     movwf	0x5, 0             	MOVWF	r0x05
0021bc   c297     movff	0x297, 0xfe5       	MOVFF	_StackAddress, POSTDEC1
0021be   ffe5
0021c0   c298     movff	0x298, 0xff4       	MOVFF	(_StackAddress + 1), PRODH
0021c2   fff4
0021c4   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0021c6   ffe9
0021c8   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0021ca   fff3
0021cc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0021ce   ecb3     call	0x6f66, 0           	CALL	__gptrput2
0021d0   f037
                                           ;	.line	1006; brtos/BRTOS.c	Task->Priority = iPriority;
0021d2   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0021d4   0f09     addlw	0x9                	ADDLW	0x09
0021d6   6e03     movwf	0x3, 0             	MOVWF	r0x03
0021d8   0e00     movlw	0                  	MOVLW	0x00
0021da   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
0021dc   6e04     movwf	0x4, 0             	MOVWF	r0x04
0021de   0e00     movlw	0                  	MOVLW	0x00
0021e0   200e     addwfc	0xe, 0, 0         	ADDWFC	r0x0e, W
0021e2   6e05     movwf	0x5, 0             	MOVWF	r0x05
0021e4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0021e6   ffe5
0021e8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0021ea   ffe9
0021ec   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0021ee   fff3
0021f0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0021f2   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0021f4   f037
                                           ;	.line	1009; brtos/BRTOS.c	PriorityVector[iPriority] = TaskNumber;
0021f6   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
0021f8   ffe9
0021fa   c00b     movff	0xb, 0xfea         	MOVFF	r0x0b, FSR0H
0021fc   ffea
0021fe   c009     movff	0x9, 0xfef         	MOVFF	r0x09, INDF0
002200   ffef
                                           ;	.line	1013; brtos/BRTOS.c	CreateVirtualStack(FctPtr, USER_STACKED_BYTES);   
002202   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002204   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002206   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002208   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00220a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00220c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00220e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002210   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002212   5000     movf	0, 0, 0             	MOVF	r0x00, W
002214   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002216   ec63     call	0x10c6, 0           	CALL	_CreateVirtualStack
002218   f008
00221a   0e05     movlw	0x5                	MOVLW	0x05
00221c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00221e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002220   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	1016; brtos/BRTOS.c	iStackAddress = iStackAddress + USER_STACKED_BYTES;
002222   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002224   0102     movlb	0x2                	BANKSEL	_iStackAddress
002226   2793     addwf	0x93, 0x1, 0x1     	ADDWF	_iStackAddress, F, B
002228   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00222a   0102     movlb	0x2                	BANKSEL	(_iStackAddress + 1)
00222c   2394     addwfc	0x94, 0x1, 0x1    	ADDWFC	(_iStackAddress + 1), F, B
                                           ;	.line	1019; brtos/BRTOS.c	StackAddress = StackAddress + USER_STACKED_BYTES;
00222e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002230   0102     movlb	0x2                	BANKSEL	_StackAddress
002232   2797     addwf	0x97, 0x1, 0x1     	ADDWF	_StackAddress, F, B
002234   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002236   0102     movlb	0x2                	BANKSEL	(_StackAddress + 1)
002238   2398     addwfc	0x98, 0x1, 0x1    	ADDWFC	(_StackAddress + 1), F, B
                                           ;	.line	1022; brtos/BRTOS.c	Task->TimeToWait = NO_TIMEOUT;
00223a   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
00223c   0f07     addlw	0x7                	ADDLW	0x07
00223e   6e00     movwf	0, 0               	MOVWF	r0x00
002240   0e00     movlw	0                  	MOVLW	0x00
002242   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
002244   6e01     movwf	0x1, 0             	MOVWF	r0x01
002246   0e00     movlw	0                  	MOVLW	0x00
002248   200e     addwfc	0xe, 0, 0         	ADDWFC	r0x0e, W
00224a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00224c   0ee8     movlw	0xe8               	MOVLW	0xe8
00224e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002250   0efd     movlw	0xfd               	MOVLW	0xfd
002252   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002254   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002256   ffe9
002258   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00225a   fff3
00225c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00225e   ecb3     call	0x6f66, 0           	CALL	__gptrput2
002260   f037
                                           ;	.line	1023; brtos/BRTOS.c	Task->Next     =  NULL;
002262   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002264   0f0a     addlw	0xa                	ADDLW	0x0a
002266   6e00     movwf	0, 0               	MOVWF	r0x00
002268   0e00     movlw	0                  	MOVLW	0x00
00226a   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
00226c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00226e   0e00     movlw	0                  	MOVLW	0x00
002270   200e     addwfc	0xe, 0, 0         	ADDWFC	r0x0e, W
002272   6e02     movwf	0x2, 0             	MOVWF	r0x02
002274   0e00     movlw	0                  	MOVLW	0x00
002276   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002278   0e00     movlw	0                  	MOVLW	0x00
00227a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00227c   0e00     movlw	0                  	MOVLW	0x00
00227e   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
002280   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002282   ffe9
002284   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002286   fff3
002288   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00228a   ec99     call	0x6f32, 0           	CALL	__gptrput3
00228c   f037
                                           ;	.line	1024; brtos/BRTOS.c	Task->Previous =  NULL;
00228e   0e0d     movlw	0xd                	MOVLW	0x0d
002290   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002292   0e00     movlw	0                  	MOVLW	0x00
002294   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
002296   0e00     movlw	0                  	MOVLW	0x00
002298   220e     addwfc	0xe, 0x1, 0       	ADDWFC	r0x0e, F
00229a   0e00     movlw	0                  	MOVLW	0x00
00229c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00229e   0e00     movlw	0                  	MOVLW	0x00
0022a0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0022a2   0e00     movlw	0                  	MOVLW	0x00
0022a4   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0022a6   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0022a8   ffe9
0022aa   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0022ac   fff3
0022ae   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0022b0   ec99     call	0x6f32, 0           	CALL	__gptrput3
0022b2   f037
                                           ; ;multiply lit val:0x02 by variable r0x08 and store in r0x08
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	1031; brtos/BRTOS.c	OSReadyList = OSReadyList | (PriorityMask[iPriority]);
0022b4   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0022b6   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
0022b8   6a00     clrf	0, 0                	CLRF	r0x00
0022ba   6a01     clrf	0x1, 0              	CLRF	r0x01
0022bc   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
0022be   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
0022c0   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
0022c2   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
0022c4   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
0022c6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0022c8   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
0022ca   fff6
0022cc   c000     movff	0, 0xff7           	MOVFF	r0x00, TBLPTRH
0022ce   fff7
0022d0   c001     movff	0x1, 0xff8         	MOVFF	r0x01, TBLPTRU
0022d2   fff8
0022d4   0009     tblrd	*+                 	TBLRD*+	
0022d6   cff5     movff	0xff5, 0x8         	MOVFF	TABLAT, r0x08
0022d8   f008
0022da   0009     tblrd	*+                 	TBLRD*+	
0022dc   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
0022de   f000
0022e0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0022e2   0102     movlb	0x2                	BANKSEL	_OSReadyList
0022e4   1399     iorwf	0x99, 0x1, 0x1     	IORWF	_OSReadyList, F, B
0022e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0022e8   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
0022ea   139a     iorwf	0x9a, 0x1, 0x1     	IORWF	(_OSReadyList + 1), F, B
0022ec   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	1033; brtos/BRTOS.c	if (currentTask)
0022ee   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0022f0   e001     bz	0x22f4                	BZ	_00395_DS_
                                           ;	.line	1035; brtos/BRTOS.c	OSExitCritical();   
0022f2   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00395_DS_:
                                           ;	.line	1037; brtos/BRTOS.c	return OK;
0022f4   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00396_DS_:
0022f6   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
0022f8   f015
0022fa   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
0022fc   f014
0022fe   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
002300   f013
002302   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
002304   f012
002306   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002308   f011
00230a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00230c   f010
00230e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002310   f00f
002312   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002314   f00e
002316   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002318   f00d
00231a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00231c   f00c
00231e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002320   f00b
002322   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002324   f00a
002326   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002328   f009
00232a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00232c   f008
00232e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002330   f007
002332   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002334   f006
002336   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002338   f005
00233a   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00233c   f004
00233e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002340   f003
002342   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002344   f002
002346   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002348   f001
00234a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00234c   f000
00234e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002350   ffd9
002352   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
002354   ffda
002356   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__Idle	code
                                           _Idle:
                                           ;	.line	873; brtos/BRTOS.c	void Idle(void)
0069ea   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0069ec   ffe5
0069ee   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0069f0   ffe5
0069f2   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0069f4   ffda
0069f6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0069f8   ffd9
0069fa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0069fc   ffe5
0069fe   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006a00   ffe5
006a02   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006a04   ffe5
006a06   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006a08   ffe5
                                           _00358_DS_:
                                           ;	.line	882; brtos/BRTOS.c	OSDutyTmp = TIMER_COUNTER;
006a0a   cfcf     movff	0xfcf, 0           	MOVFF	_TMR1H, r0x00
006a0c   f000
006a0e   6a01     clrf	0x1, 0              	CLRF	r0x01
006a10   5000     movf	0, 0, 0             	MOVF	r0x00, W
006a12   6e03     movwf	0x3, 0             	MOVWF	r0x03
006a14   6a02     clrf	0x2, 0              	CLRF	r0x02
006a16   cfce     movff	0xfce, 0           	MOVFF	_TMR1L, r0x00
006a18   f000
006a1a   6a01     clrf	0x1, 0              	CLRF	r0x01
006a1c   5000     movf	0, 0, 0             	MOVF	r0x00, W
006a1e   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
006a20   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006a22   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
006a24   c002     movff	0x2, 0x2a1         	MOVFF	r0x02, _OSDutyTmp
006a26   f2a1
006a28   c003     movff	0x3, 0x2a2         	MOVFF	r0x03, (_OSDutyTmp + 1)
006a2a   f2a2
006a2c   6ae8     clrf	0xe8, 0             	CLRF	WREG
006a2e   be03     btfsc	0x3, 0x7, 0        	BTFSC	r0x03, 7
006a30   0eff     movlw	0xff               	MOVLW	0xff
006a32   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 2)
006a34   6fa3     movwf	0xa3, 0x1          	MOVWF	(_OSDutyTmp + 2), B
006a36   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 3)
006a38   6fa4     movwf	0xa4, 0x1          	MOVWF	(_OSDutyTmp + 3), B
006a3a   0003     sleep                    	SLEEP 
006a3c   d7e6     bra	0x6a0a               	BRA	_00358_DS_
006a3e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006a40   f003
006a42   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006a44   f002
006a46   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006a48   f001
006a4a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006a4c   f000
006a4e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006a50   ffd9
006a52   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006a54   ffda
006a56   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__UnBlockMultipleTask	code
                                           _UnBlockMultipleTask:
                                           ;	.line	817; brtos/BRTOS.c	INT8U UnBlockMultipleTask(INT8U TaskStart, INT8U TaskNumber)
005a96   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005a98   ffe5
005a9a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005a9c   ffe5
005a9e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005aa0   ffda
005aa2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005aa4   ffd9
005aa6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005aa8   ffe5
005aaa   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005aac   ffe5
005aae   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005ab0   ffe5
005ab2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005ab4   ffe5
005ab6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
005ab8   ffe5
005aba   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
005abc   ffe5
005abe   0e03     movlw	0x3                	MOVLW	0x03
005ac0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005ac2   f000
005ac4   0e04     movlw	0x4                	MOVLW	0x04
005ac6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005ac8   f001
005aca   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	824; brtos/BRTOS.c	if (iNesting > 0) {                                // See if caller is an interrupt
005acc   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
005ace   e002     bz	0x5ad4                	BZ	_00330_DS_
                                           ;	.line	825; brtos/BRTOS.c	return(IRQ_PEND_ERR);                           // Can't be blocked by interrupt
005ad0   0e02     movlw	0x2                	MOVLW	0x02
005ad2   d048     bra	0x5b64               	BRA	_00341_DS_
                                           _00330_DS_:
005ad4   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	829; brtos/BRTOS.c	if (currentTask)
005ad6   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
005ad8   e001     bz	0x5adc                	BZ	_00332_DS_
                                           ;	.line	830; brtos/BRTOS.c	OSEnterCritical();
005ada   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00332_DS_:
                                           ;	.line	832; brtos/BRTOS.c	TaskFinish = (INT8U)(TaskStart + TaskNumber);
005adc   5000     movf	0, 0, 0             	MOVF	r0x00, W
005ade   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
                                           ;	.line	834; brtos/BRTOS.c	for (iTask = TaskStart; iTask <TaskFinish; iTask++)
005ae0   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
005ae2   f002
                                           ; ;multiply lit val:0x10 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
005ae4   5000     movf	0, 0, 0             	MOVF	r0x00, W
005ae6   0d10     mullw	0x10               	MULLW	0x10
005ae8   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
005aea   f000
                                           _00337_DS_:
005aec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005aee   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
005af0   e234     bc	0x5b5a                	BC	_00340_DS_
                                           ;	.line	837; brtos/BRTOS.c	if (iTask != currentTask)
005af2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005af4   0104     movlb	0x4                	BANKSEL	_currentTask
005af6   1904     xorwf	0x4, 0, 0x1        	XORWF	_currentTask, W, B
005af8   e02c     bz	0x5b52                	BZ	_00339_DS_
                                           ;	.line	839; brtos/BRTOS.c	iPriority = ContextTask[iTask].Priority;
005afa   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
005afc   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005afe   6e03     movwf	0x3, 0             	MOVWF	r0x03
005b00   6a04     clrf	0x4, 0              	CLRF	r0x04
005b02   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
005b04   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
005b06   0e09     movlw	0x9                	MOVLW	0x09
005b08   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
005b0a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005b0c   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
005b0e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005b10   ffe9
005b12   c004     movff	0x4, 0xfea         	MOVFF	r0x04, FSR0H
005b14   ffea
005b16   cfef     movff	0xfef, 0x3         	MOVFF	INDF0, r0x03
005b18   f003
                                           ; ;multiply lit val:0x02 by variable r0x03 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	845; brtos/BRTOS.c	OSBlockedList = OSBlockedList | (PriorityMask[iPriority]);
005b1a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
005b1c   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
005b1e   6a04     clrf	0x4, 0              	CLRF	r0x04
005b20   6a05     clrf	0x5, 0              	CLRF	r0x05
005b22   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
005b24   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
005b26   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
005b28   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
005b2a   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
005b2c   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
005b2e   c003     movff	0x3, 0xff6         	MOVFF	r0x03, TBLPTRL
005b30   fff6
005b32   c004     movff	0x4, 0xff7         	MOVFF	r0x04, TBLPTRH
005b34   fff7
005b36   c005     movff	0x5, 0xff8         	MOVFF	r0x05, TBLPTRU
005b38   fff8
005b3a   0009     tblrd	*+                 	TBLRD*+	
005b3c   cff5     movff	0xff5, 0x3         	MOVFF	TABLAT, r0x03
005b3e   f003
005b40   0009     tblrd	*+                 	TBLRD*+	
005b42   cff5     movff	0xff5, 0x4         	MOVFF	TABLAT, r0x04
005b44   f004
005b46   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005b48   0102     movlb	0x2                	BANKSEL	_OSBlockedList
005b4a   139b     iorwf	0x9b, 0x1, 0x1     	IORWF	_OSBlockedList, F, B
005b4c   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
005b4e   0102     movlb	0x2                	BANKSEL	(_OSBlockedList + 1)
005b50   139c     iorwf	0x9c, 0x1, 0x1     	IORWF	(_OSBlockedList + 1), F, B
                                           _00339_DS_:
                                           ;	.line	834; brtos/BRTOS.c	for (iTask = TaskStart; iTask <TaskFinish; iTask++)
005b52   0e10     movlw	0x10               	MOVLW	0x10
005b54   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005b56   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
005b58   d7c9     bra	0x5aec               	BRA	_00337_DS_
                                           _00340_DS_:
005b5a   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	850; brtos/BRTOS.c	if (currentTask)
005b5c   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
005b5e   e001     bz	0x5b62                	BZ	_00336_DS_
                                           ;	.line	851; brtos/BRTOS.c	OSExitCritical();
005b60   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00336_DS_:
                                           ;	.line	853; brtos/BRTOS.c	return OK;
005b62   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00341_DS_:
005b64   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005b66   f005
005b68   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005b6a   f004
005b6c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005b6e   f003
005b70   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005b72   f002
005b74   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005b76   f001
005b78   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005b7a   f000
005b7c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005b7e   ffd9
005b80   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005b82   ffda
005b84   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__BlockMultipleTask	code
                                           _BlockMultipleTask:
                                           ;	.line	765; brtos/BRTOS.c	INT8U BlockMultipleTask(INT8U TaskStart, INT8U TaskNumber)
0058ae   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0058b0   ffe5
0058b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0058b4   ffe5
0058b6   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0058b8   ffda
0058ba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0058bc   ffd9
0058be   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0058c0   ffe5
0058c2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0058c4   ffe5
0058c6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0058c8   ffe5
0058ca   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0058cc   ffe5
0058ce   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0058d0   ffe5
0058d2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0058d4   ffe5
0058d6   0e03     movlw	0x3                	MOVLW	0x03
0058d8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0058da   f000
0058dc   0e04     movlw	0x4                	MOVLW	0x04
0058de   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0058e0   f001
0058e2   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	772; brtos/BRTOS.c	if (iNesting > 0) {                                // See if caller is an interrupt
0058e4   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0058e6   e002     bz	0x58ec                	BZ	_00302_DS_
                                           ;	.line	773; brtos/BRTOS.c	return(IRQ_PEND_ERR);                           // Can't be blocked by interrupt
0058e8   0e02     movlw	0x2                	MOVLW	0x02
0058ea   d04a     bra	0x5980               	BRA	_00313_DS_
                                           _00302_DS_:
0058ec   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	777; brtos/BRTOS.c	if (currentTask)
0058ee   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0058f0   e001     bz	0x58f4                	BZ	_00304_DS_
                                           ;	.line	778; brtos/BRTOS.c	OSEnterCritical();
0058f2   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00304_DS_:
                                           ;	.line	780; brtos/BRTOS.c	TaskFinish = (INT8U)(TaskStart + TaskNumber);
0058f4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0058f6   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
                                           ;	.line	782; brtos/BRTOS.c	for (iTask = TaskStart; iTask <TaskFinish; iTask++)
0058f8   c000     movff	0, 0x2             	MOVFF	r0x00, r0x02
0058fa   f002
                                           ; ;multiply lit val:0x10 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0058fc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0058fe   0d10     mullw	0x10               	MULLW	0x10
005900   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
005902   f000
                                           _00309_DS_:
005904   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005906   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
005908   e236     bc	0x5976                	BC	_00312_DS_
                                           ;	.line	784; brtos/BRTOS.c	if (iTask != currentTask)
00590a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00590c   0104     movlb	0x4                	BANKSEL	_currentTask
00590e   1904     xorwf	0x4, 0, 0x1        	XORWF	_currentTask, W, B
005910   e02e     bz	0x596e                	BZ	_00311_DS_
                                           ;	.line	790; brtos/BRTOS.c	iPriority = ContextTask[iTask].Priority;   
005912   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
005914   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005916   6e03     movwf	0x3, 0             	MOVWF	r0x03
005918   6a04     clrf	0x4, 0              	CLRF	r0x04
00591a   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
00591c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00591e   0e09     movlw	0x9                	MOVLW	0x09
005920   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
005922   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005924   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
005926   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005928   ffe9
00592a   c004     movff	0x4, 0xfea         	MOVFF	r0x04, FSR0H
00592c   ffea
00592e   cfef     movff	0xfef, 0x3         	MOVFF	INDF0, r0x03
005930   f003
                                           ; ;multiply lit val:0x02 by variable r0x03 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	792; brtos/BRTOS.c	OSBlockedList = OSBlockedList & ~(PriorityMask[iPriority]);
005932   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
005934   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
005936   6a04     clrf	0x4, 0              	CLRF	r0x04
005938   6a05     clrf	0x5, 0              	CLRF	r0x05
00593a   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
00593c   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00593e   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
005940   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
005942   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
005944   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
005946   c003     movff	0x3, 0xff6         	MOVFF	r0x03, TBLPTRL
005948   fff6
00594a   c004     movff	0x4, 0xff7         	MOVFF	r0x04, TBLPTRH
00594c   fff7
00594e   c005     movff	0x5, 0xff8         	MOVFF	r0x05, TBLPTRU
005950   fff8
005952   0009     tblrd	*+                 	TBLRD*+	
005954   cff5     movff	0xff5, 0x3         	MOVFF	TABLAT, r0x03
005956   f003
005958   0009     tblrd	*+                 	TBLRD*+	
00595a   cff5     movff	0xff5, 0x4         	MOVFF	TABLAT, r0x04
00595c   f004
00595e   1e03     comf	0x3, 0x1, 0         	COMF	r0x03, F
005960   1e04     comf	0x4, 0x1, 0         	COMF	r0x04, F
005962   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
005964   0102     movlb	0x2                	BANKSEL	_OSBlockedList
005966   179b     andwf	0x9b, 0x1, 0x1     	ANDWF	_OSBlockedList, F, B
005968   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00596a   0102     movlb	0x2                	BANKSEL	(_OSBlockedList + 1)
00596c   179c     andwf	0x9c, 0x1, 0x1     	ANDWF	(_OSBlockedList + 1), F, B
                                           _00311_DS_:
                                           ;	.line	782; brtos/BRTOS.c	for (iTask = TaskStart; iTask <TaskFinish; iTask++)
00596e   0e10     movlw	0x10               	MOVLW	0x10
005970   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005972   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
005974   d7c7     bra	0x5904               	BRA	_00309_DS_
                                           _00312_DS_:
005976   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	797; brtos/BRTOS.c	if (currentTask)
005978   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
00597a   e001     bz	0x597e                	BZ	_00308_DS_
                                           ;	.line	798; brtos/BRTOS.c	OSExitCritical();
00597c   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00308_DS_:
                                           ;	.line	800; brtos/BRTOS.c	return OK;
00597e   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00313_DS_:
005980   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
005982   f005
005984   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005986   f004
005988   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00598a   f003
00598c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00598e   f002
005990   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005992   f001
005994   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005996   f000
005998   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00599a   ffd9
00599c   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
00599e   ffda
0059a0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__UnBlockTask	code
                                           _UnBlockTask:
                                           ;	.line	712; brtos/BRTOS.c	INT8U UnBlockTask(INT8U iTaskNumber)
00626a   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00626c   ffe5
00626e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006270   ffe5
006272   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006274   ffda
006276   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006278   ffd9
00627a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00627c   ffe5
00627e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006280   ffe5
006282   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006284   ffe5
006286   0e03     movlw	0x3                	MOVLW	0x03
006288   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00628a   f000
00628c   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	719; brtos/BRTOS.c	if (!iNesting)
00628e   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
006290   e101     bnz	0x6294               	BNZ	_00289_DS_
                                           ;	.line	721; brtos/BRTOS.c	OSEnterCritical();
006292   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ; ;multiply lit val:0x10 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00289_DS_:
                                           ;	.line	728; brtos/BRTOS.c	iPriority = ContextTask[iTaskNumber].Priority;
006294   5000     movf	0, 0, 0             	MOVF	r0x00, W
006296   0d10     mullw	0x10               	MULLW	0x10
006298   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00629a   f000
00629c   6a01     clrf	0x1, 0              	CLRF	r0x01
00629e   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
0062a0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0062a2   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
0062a4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0062a6   0e09     movlw	0x9                	MOVLW	0x09
0062a8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0062aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0062ac   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0062ae   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0062b0   ffe9
0062b2   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0062b4   ffea
0062b6   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0062b8   f000
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	730; brtos/BRTOS.c	OSBlockedList = OSBlockedList | (PriorityMask[iPriority]);
0062ba   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0062bc   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0062be   6a01     clrf	0x1, 0              	CLRF	r0x01
0062c0   6a02     clrf	0x2, 0              	CLRF	r0x02
0062c2   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
0062c4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0062c6   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
0062c8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0062ca   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
0062cc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0062ce   c000     movff	0, 0xff6           	MOVFF	r0x00, TBLPTRL
0062d0   fff6
0062d2   c001     movff	0x1, 0xff7         	MOVFF	r0x01, TBLPTRH
0062d4   fff7
0062d6   c002     movff	0x2, 0xff8         	MOVFF	r0x02, TBLPTRU
0062d8   fff8
0062da   0009     tblrd	*+                 	TBLRD*+	
0062dc   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
0062de   f000
0062e0   0009     tblrd	*+                 	TBLRD*+	
0062e2   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
0062e4   f001
0062e6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0062e8   0102     movlb	0x2                	BANKSEL	_OSBlockedList
0062ea   139b     iorwf	0x9b, 0x1, 0x1     	IORWF	_OSBlockedList, F, B
0062ec   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0062ee   0102     movlb	0x2                	BANKSEL	(_OSBlockedList + 1)
0062f0   139c     iorwf	0x9c, 0x1, 0x1     	IORWF	(_OSBlockedList + 1), F, B
0062f2   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	733; brtos/BRTOS.c	if (currentTask)
0062f4   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0062f6   e005     bz	0x6302                	BZ	_00293_DS_
0062f8   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	735; brtos/BRTOS.c	if (!iNesting)
0062fa   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0062fc   e102     bnz	0x6302               	BNZ	_00293_DS_
                                           ;	.line	737; brtos/BRTOS.c	ChangeContext();
0062fe   ec82     call	0x4b04, 0           	CALL	_SwitchContext
006300   f025
                                           _00293_DS_:
006302   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	743; brtos/BRTOS.c	if (!iNesting)
006304   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
006306   e101     bnz	0x630a               	BNZ	_00295_DS_
                                           ;	.line	745; brtos/BRTOS.c	OSExitCritical();
006308   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00295_DS_:
                                           ;	.line	747; brtos/BRTOS.c	return OK;  
00630a   6ae8     clrf	0xe8, 0             	CLRF	WREG
00630c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00630e   f002
006310   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006312   f001
006314   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006316   f000
006318   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00631a   ffd9
00631c   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
00631e   ffda
006320   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__BlockTask	code
                                           _BlockTask:
                                           ;	.line	665; brtos/BRTOS.c	INT8U BlockTask(INT8U iTaskNumber)
005d24   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005d26   ffe5
005d28   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005d2a   ffe5
005d2c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005d2e   ffda
005d30   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005d32   ffd9
005d34   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005d36   ffe5
005d38   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005d3a   ffe5
005d3c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005d3e   ffe5
005d40   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005d42   ffe5
005d44   0e03     movlw	0x3                	MOVLW	0x03
005d46   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005d48   f000
005d4a   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	670; brtos/BRTOS.c	if (iNesting > 0) {                                // See if caller is an interrupt
005d4c   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
005d4e   e002     bz	0x5d54                	BZ	_00268_DS_
                                           ;	.line	671; brtos/BRTOS.c	return(IRQ_PEND_ERR);                           // Can't be blocked by interrupt
005d50   0e02     movlw	0x2                	MOVLW	0x02
005d52   d040     bra	0x5dd4               	BRA	_00275_DS_
                                           _00268_DS_:
005d54   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	675; brtos/BRTOS.c	if (currentTask)
005d56   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
005d58   e001     bz	0x5d5c                	BZ	_00270_DS_
                                           ;	.line	676; brtos/BRTOS.c	OSEnterCritical();    
005d5a   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ; ;multiply lit val:0x10 by variable r0x00 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00270_DS_:
                                           ;	.line	682; brtos/BRTOS.c	iPriority = ContextTask[iTaskNumber].Priority;
005d5c   5000     movf	0, 0, 0             	MOVF	r0x00, W
005d5e   0d10     mullw	0x10               	MULLW	0x10
005d60   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
005d62   f001
005d64   6a02     clrf	0x2, 0              	CLRF	r0x02
005d66   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
005d68   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005d6a   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
005d6c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005d6e   0e09     movlw	0x9                	MOVLW	0x09
005d70   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005d72   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005d74   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
005d76   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
005d78   ffe9
005d7a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
005d7c   ffea
005d7e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
005d80   f001
                                           ; ;multiply lit val:0x02 by variable r0x01 and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	684; brtos/BRTOS.c	OSBlockedList = OSBlockedList & ~(PriorityMask[iPriority]);
005d82   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
005d84   3601     rlcf	0x1, 0x1, 0         	RLCF	r0x01, F
005d86   6a02     clrf	0x2, 0              	CLRF	r0x02
005d88   6a03     clrf	0x3, 0              	CLRF	r0x03
005d8a   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
005d8c   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
005d8e   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
005d90   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
005d92   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
005d94   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
005d96   c001     movff	0x1, 0xff6         	MOVFF	r0x01, TBLPTRL
005d98   fff6
005d9a   c002     movff	0x2, 0xff7         	MOVFF	r0x02, TBLPTRH
005d9c   fff7
005d9e   c003     movff	0x3, 0xff8         	MOVFF	r0x03, TBLPTRU
005da0   fff8
005da2   0009     tblrd	*+                 	TBLRD*+	
005da4   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
005da6   f001
005da8   0009     tblrd	*+                 	TBLRD*+	
005daa   cff5     movff	0xff5, 0x2         	MOVFF	TABLAT, r0x02
005dac   f002
005dae   1e01     comf	0x1, 0x1, 0         	COMF	r0x01, F
005db0   1e02     comf	0x2, 0x1, 0         	COMF	r0x02, F
005db2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005db4   0102     movlb	0x2                	BANKSEL	_OSBlockedList
005db6   179b     andwf	0x9b, 0x1, 0x1     	ANDWF	_OSBlockedList, F, B
005db8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005dba   0102     movlb	0x2                	BANKSEL	(_OSBlockedList + 1)
005dbc   179c     andwf	0x9c, 0x1, 0x1     	ANDWF	(_OSBlockedList + 1), F, B
005dbe   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	686; brtos/BRTOS.c	if (currentTask == iTaskNumber)
005dc0   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
005dc2   1800     xorwf	0, 0, 0            	XORWF	r0x00, W
005dc4   e102     bnz	0x5dca               	BNZ	_00272_DS_
                                           ;	.line	688; brtos/BRTOS.c	ChangeContext();     
005dc6   ec82     call	0x4b04, 0           	CALL	_SwitchContext
005dc8   f025
                                           _00272_DS_:
005dca   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	692; brtos/BRTOS.c	if (currentTask)
005dcc   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
005dce   e001     bz	0x5dd2                	BZ	_00274_DS_
                                           ;	.line	693; brtos/BRTOS.c	OSExitCritical();  
005dd0   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00274_DS_:
                                           ;	.line	695; brtos/BRTOS.c	return OK;
005dd2   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00275_DS_:
005dd4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005dd6   f003
005dd8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005dda   f002
005ddc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005dde   f001
005de0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005de2   f000
005de4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005de6   ffd9
005de8   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005dea   ffda
005dec   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__UnBlockPriority	code
                                           _UnBlockPriority:
                                           ;	.line	611; brtos/BRTOS.c	INT8U UnBlockPriority(INT8U iPriority)
0066f6   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0066f8   ffe5
0066fa   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0066fc   ffe5
0066fe   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006700   ffda
006702   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006704   ffd9
006706   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006708   ffe5
00670a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00670c   ffe5
00670e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006710   ffe5
006712   0e03     movlw	0x3                	MOVLW	0x03
006714   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006716   f000
006718   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	621; brtos/BRTOS.c	if (!iNesting)
00671a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00671c   e101     bnz	0x6720               	BNZ	_00255_DS_
                                           ;	.line	623; brtos/BRTOS.c	OSEnterCritical();
00671e   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00255_DS_:
                                           ;	.line	631; brtos/BRTOS.c	OSBlockedList = OSBlockedList | (PriorityMask[iPriority]);
006720   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
006722   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
006724   6a01     clrf	0x1, 0              	CLRF	r0x01
006726   6a02     clrf	0x2, 0              	CLRF	r0x02
006728   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
00672a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00672c   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
00672e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006730   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
006732   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006734   c000     movff	0, 0xff6           	MOVFF	r0x00, TBLPTRL
006736   fff6
006738   c001     movff	0x1, 0xff7         	MOVFF	r0x01, TBLPTRH
00673a   fff7
00673c   c002     movff	0x2, 0xff8         	MOVFF	r0x02, TBLPTRU
00673e   fff8
006740   0009     tblrd	*+                 	TBLRD*+	
006742   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
006744   f000
006746   0009     tblrd	*+                 	TBLRD*+	
006748   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
00674a   f001
00674c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00674e   0102     movlb	0x2                	BANKSEL	_OSBlockedList
006750   139b     iorwf	0x9b, 0x1, 0x1     	IORWF	_OSBlockedList, F, B
006752   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006754   0102     movlb	0x2                	BANKSEL	(_OSBlockedList + 1)
006756   139c     iorwf	0x9c, 0x1, 0x1     	IORWF	(_OSBlockedList + 1), F, B
006758   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	634; brtos/BRTOS.c	if (currentTask)
00675a   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
00675c   e005     bz	0x6768                	BZ	_00259_DS_
00675e   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	636; brtos/BRTOS.c	if (!iNesting)
006760   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
006762   e102     bnz	0x6768               	BNZ	_00259_DS_
                                           ;	.line	638; brtos/BRTOS.c	ChangeContext();
006764   ec82     call	0x4b04, 0           	CALL	_SwitchContext
006766   f025
                                           _00259_DS_:
006768   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	644; brtos/BRTOS.c	if (!iNesting)
00676a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00676c   e101     bnz	0x6770               	BNZ	_00261_DS_
                                           ;	.line	646; brtos/BRTOS.c	OSExitCritical();
00676e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00261_DS_:
                                           ;	.line	648; brtos/BRTOS.c	return OK;
006770   6ae8     clrf	0xe8, 0             	CLRF	WREG
006772   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006774   f002
006776   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006778   f001
00677a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00677c   f000
00677e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006780   ffd9
006782   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006784   ffda
006786   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__BlockPriority	code
                                           _BlockPriority:
                                           ;	.line	561; brtos/BRTOS.c	INT8U BlockPriority(INT8U iPriority)
0060f2   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0060f4   ffe5
0060f6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0060f8   ffe5
0060fa   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0060fc   ffda
0060fe   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006100   ffd9
006102   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006104   ffe5
006106   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006108   ffe5
00610a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00610c   ffe5
00610e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006110   ffe5
006112   0e03     movlw	0x3                	MOVLW	0x03
006114   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006116   f000
006118   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	566; brtos/BRTOS.c	if (iNesting > 0) {                                // See if caller is an interrupt
00611a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00611c   e002     bz	0x6122                	BZ	_00234_DS_
                                           ;	.line	567; brtos/BRTOS.c	return(IRQ_PEND_ERR);                           // Can't be blocked by interrupt
00611e   0e02     movlw	0x2                	MOVLW	0x02
006120   d039     bra	0x6194               	BRA	_00241_DS_
                                           _00234_DS_:
006122   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	571; brtos/BRTOS.c	if (currentTask)  
006124   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
006126   e001     bz	0x612a                	BZ	_00236_DS_
                                           ;	.line	572; brtos/BRTOS.c	OSEnterCritical();
006128   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00236_DS_:
                                           ;	.line	576; brtos/BRTOS.c	BlockedTask = PriorityVector[iPriority];  
00612a   0ea4     movlw	0xa4               	MOVLW	LOW(_PriorityVector)
00612c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00612e   6e01     movwf	0x1, 0             	MOVWF	r0x01
006130   6a02     clrf	0x2, 0              	CLRF	r0x02
006132   0e03     movlw	0x3                	MOVLW	HIGH(_PriorityVector)
006134   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006136   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
006138   ffe9
00613a   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
00613c   ffea
00613e   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
006140   f001
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	582; brtos/BRTOS.c	OSBlockedList = OSBlockedList & ~(PriorityMask[iPriority]);
006142   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
006144   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
006146   6a02     clrf	0x2, 0              	CLRF	r0x02
006148   6a03     clrf	0x3, 0              	CLRF	r0x03
00614a   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
00614c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00614e   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
006150   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
006152   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
006154   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
006156   c000     movff	0, 0xff6           	MOVFF	r0x00, TBLPTRL
006158   fff6
00615a   c002     movff	0x2, 0xff7         	MOVFF	r0x02, TBLPTRH
00615c   fff7
00615e   c003     movff	0x3, 0xff8         	MOVFF	r0x03, TBLPTRU
006160   fff8
006162   0009     tblrd	*+                 	TBLRD*+	
006164   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
006166   f000
006168   0009     tblrd	*+                 	TBLRD*+	
00616a   cff5     movff	0xff5, 0x2         	MOVFF	TABLAT, r0x02
00616c   f002
00616e   1e00     comf	0, 0x1, 0           	COMF	r0x00, F
006170   1e02     comf	0x2, 0x1, 0         	COMF	r0x02, F
006172   5000     movf	0, 0, 0             	MOVF	r0x00, W
006174   0102     movlb	0x2                	BANKSEL	_OSBlockedList
006176   179b     andwf	0x9b, 0x1, 0x1     	ANDWF	_OSBlockedList, F, B
006178   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00617a   0102     movlb	0x2                	BANKSEL	(_OSBlockedList + 1)
00617c   179c     andwf	0x9c, 0x1, 0x1     	ANDWF	(_OSBlockedList + 1), F, B
00617e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	585; brtos/BRTOS.c	if (currentTask == BlockedTask)
006180   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
006182   1801     xorwf	0x1, 0, 0          	XORWF	r0x01, W
006184   e102     bnz	0x618a               	BNZ	_00238_DS_
                                           ;	.line	587; brtos/BRTOS.c	ChangeContext();
006186   ec82     call	0x4b04, 0           	CALL	_SwitchContext
006188   f025
                                           _00238_DS_:
00618a   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	591; brtos/BRTOS.c	if (currentTask)
00618c   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
00618e   e001     bz	0x6192                	BZ	_00240_DS_
                                           ;	.line	592; brtos/BRTOS.c	OSExitCritical();
006190   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00240_DS_:
                                           ;	.line	594; brtos/BRTOS.c	return OK;
006192   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00241_DS_:
006194   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006196   f003
006198   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00619a   f002
00619c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00619e   f001
0061a0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0061a2   f000
0061a4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0061a6   ffd9
0061a8   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0061aa   ffda
0061ac   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__PreInstallTasks	code
                                           _PreInstallTasks:
                                           ;	.line	524; brtos/BRTOS.c	void PreInstallTasks(void)
006660   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006662   ffe5
006664   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006666   ffe5
006668   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00666a   ffda
00666c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00666e   ffd9
006670   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006672   ffe5
006674   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006676   ffe5
006678   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00667a   ffe5
00667c   0102     movlb	0x2                	BANKSEL	_counter
                                           ;	.line	527; brtos/BRTOS.c	counter = 0;
00667e   6bfe     clrf	0xfe, 0x1           	CLRF	_counter, B
006680   0102     movlb	0x2                	BANKSEL	(_counter + 1)
006682   6bff     clrf	0xff, 0x1           	CLRF	(_counter + 1), B
006684   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	528; brtos/BRTOS.c	currentTask = 0;
006686   6b04     clrf	0x4, 0x1            	CLRF	_currentTask, B
006688   0104     movlb	0x4                	BANKSEL	_NumberOfInstalledTasks
                                           ;	.line	529; brtos/BRTOS.c	NumberOfInstalledTasks = 0;
00668a   6b05     clrf	0x5, 0x1            	CLRF	_NumberOfInstalledTasks, B
00668c   0102     movlb	0x2                	BANKSEL	_TaskAlloc
                                           ;	.line	530; brtos/BRTOS.c	TaskAlloc = 0;
00668e   6ba9     clrf	0xa9, 0x1           	CLRF	_TaskAlloc, B
006690   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 1)
006692   6baa     clrf	0xaa, 0x1           	CLRF	(_TaskAlloc + 1), B
006694   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 2)
006696   6bab     clrf	0xab, 0x1           	CLRF	(_TaskAlloc + 2), B
006698   0102     movlb	0x2                	BANKSEL	(_TaskAlloc + 3)
00669a   6bac     clrf	0xac, 0x1           	CLRF	(_TaskAlloc + 3), B
00669c   0102     movlb	0x2                	BANKSEL	_iStackAddress
                                           ;	.line	531; brtos/BRTOS.c	iStackAddress = 0;
00669e   6b93     clrf	0x93, 0x1           	CLRF	_iStackAddress, B
0066a0   0102     movlb	0x2                	BANKSEL	(_iStackAddress + 1)
0066a2   6b94     clrf	0x94, 0x1           	CLRF	(_iStackAddress + 1), B
                                           ;	.line	533; brtos/BRTOS.c	for(i=0;i<configMAX_TASK_INSTALL;i++)
0066a4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00219_DS_:
0066a6   0e10     movlw	0x10               	MOVLW	0x10
0066a8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
0066aa   e20e     bc	0x66c8                	BC	_00222_DS_
                                           ;	.line	535; brtos/BRTOS.c	PriorityVector[i]=EMPTY_PRIO;
0066ac   0ea4     movlw	0xa4               	MOVLW	LOW(_PriorityVector)
0066ae   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0066b0   6e01     movwf	0x1, 0             	MOVWF	r0x01
0066b2   6a02     clrf	0x2, 0              	CLRF	r0x02
0066b4   0e03     movlw	0x3                	MOVLW	HIGH(_PriorityVector)
0066b6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0066b8   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
0066ba   ffe9
0066bc   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
0066be   ffea
0066c0   0eff     movlw	0xff               	MOVLW	0xff
0066c2   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	533; brtos/BRTOS.c	for(i=0;i<configMAX_TASK_INSTALL;i++)
0066c4   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0066c6   d7ef     bra	0x66a6               	BRA	_00219_DS_
                                           _00222_DS_:
0066c8   0103     movlb	0x3                	BANKSEL	_Tail
                                           ;	.line	538; brtos/BRTOS.c	Tail = NULL;
0066ca   6bec     clrf	0xec, 0x1           	CLRF	_Tail, B
0066cc   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
0066ce   6bed     clrf	0xed, 0x1           	CLRF	(_Tail + 1), B
0066d0   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
0066d2   6bee     clrf	0xee, 0x1           	CLRF	(_Tail + 2), B
0066d4   0103     movlb	0x3                	BANKSEL	_Head
                                           ;	.line	539; brtos/BRTOS.c	Head = NULL;
0066d6   6bef     clrf	0xef, 0x1           	CLRF	_Head, B
0066d8   0103     movlb	0x3                	BANKSEL	(_Head + 1)
0066da   6bf0     clrf	0xf0, 0x1           	CLRF	(_Head + 1), B
0066dc   0103     movlb	0x3                	BANKSEL	(_Head + 2)
0066de   6bf1     clrf	0xf1, 0x1           	CLRF	(_Head + 2), B
0066e0   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0066e2   f002
0066e4   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0066e6   f001
0066e8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0066ea   f000
0066ec   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0066ee   ffd9
0066f0   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0066f2   ffda
0066f4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__BRTOSStart	code
                                           _BRTOSStart:
                                           ;	.line	495; brtos/BRTOS.c	INT8U BRTOSStart(void)
0059a2   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0059a4   ffe5
0059a6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0059a8   ffe5
0059aa   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0059ac   ffda
0059ae   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0059b0   ffd9
0059b2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0059b4   ffe5
0059b6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0059b8   ffe5
                                           ;	.line	497; brtos/BRTOS.c	if (InstallIdle(&Idle,IDLE_STACK_SIZE) != OK)
0059ba   0e00     movlw	0                  	MOVLW	0x00
0059bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059be   0e80     movlw	0x80               	MOVLW	0x80
0059c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059c2   0e00     movlw	0                  	MOVLW	UPPER(_Idle)
0059c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059c6   0e69     movlw	0x69               	MOVLW	HIGH(_Idle)
0059c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059ca   0eea     movlw	0xea               	MOVLW	LOW(_Idle)
0059cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0059ce   ece3     call	0x51c6, 0           	CALL	_InstallIdle
0059d0   f028
0059d2   6e00     movwf	0, 0               	MOVWF	r0x00
0059d4   0e05     movlw	0x5                	MOVLW	0x05
0059d6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0059d8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0059da   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
0059dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0059de   e002     bz	0x59e4                	BZ	_00205_DS_
                                           ;	.line	499; brtos/BRTOS.c	return NO_MEMORY;
0059e0   0e01     movlw	0x1                	MOVLW	0x01
0059e2   d050     bra	0x5a84               	BRA	_00209_DS_
                                           _00205_DS_:
                                           ;	.line	502; brtos/BRTOS.c	currentTask = OSSchedule();
0059e4   ec2c     call	0x6a58, 0           	CALL	_OSSchedule
0059e6   f035
0059e8   0104     movlb	0x4                	BANKSEL	_currentTask
0059ea   6f04     movwf	0x4, 0x1           	MOVWF	_currentTask, B
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0059ec   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	503; brtos/BRTOS.c	SPvalue = ContextTask[currentTask].StackPoint;
0059ee   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0059f0   0d10     mullw	0x10               	MULLW	0x10
0059f2   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0059f4   f000
0059f6   6a01     clrf	0x1, 0              	CLRF	r0x01
0059f8   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
0059fa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0059fc   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
0059fe   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005a00   0e03     movlw	0x3                	MOVLW	0x03
005a02   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005a04   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005a06   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
005a08   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
005a0a   ffe9
005a0c   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
005a0e   ffea
005a10   cfee     movff	0xfee, 0x2ae       	MOVFF	POSTINC0, _SPvalue
005a12   f2ae
005a14   cfef     movff	0xfef, 0x2af       	MOVFF	INDF0, (_SPvalue + 1)
005a16   f2af
005a18   c2ae     movff	0x2ae, 0xfe1       	MOVFF _SPvalue, _FSR1L 
005a1a   ffe1
005a1c   c2af     movff	0x2af, 0xfe2       	MOVFF _SPvalue+1, _FSR1H 
005a1e   ffe2
005a20   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
005a22   ffe9
005a24   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
005a26   ffe9
                                           ;	.line	505; brtos/BRTOS.c	OS_RESTORE_CONTEXT();
005a28   6afc     clrf	0xfc, 0             	CLRF	_STKPTR
                                           _00206_DS_:
005a2a   50e9     movf	0xe9, 0, 0          	MOVF	_FSR0L, W
005a2c   5cfc     subwf	0xfc, 0, 0         	SUBWF	_STKPTR, W
005a2e   e208     bc	0x5a40                	BC	_00208_DS_
005a30   0005     push                     	PUSH 
005a32   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
005a34   6eff     movwf	0xff, 0            	MOVWF _TOSU, 0 
005a36   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
005a38   6efe     movwf	0xfe, 0            	MOVWF _TOSH, 0 
005a3a   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
005a3c   6efd     movwf	0xfd, 0            	MOVWF _TOSL, 0 
005a3e   d7f5     bra	0x5a2a               	BRA	_00206_DS_
                                           _00208_DS_:
005a40   cfe5     movff	0xfe5, 0xffb       	MOVFF POSTDEC1, _PCLATU 
005a42   fffb
005a44   cfe5     movff	0xfe5, 0xffa       	MOVFF POSTDEC1, _PCLATH 
005a46   fffa
005a48   cfe5     movff	0xfe5, 0xff4       	MOVFF POSTDEC1, _PRODH 
005a4a   fff4
005a4c   cfe5     movff	0xfe5, 0xff3       	MOVFF POSTDEC1, _PRODL 
005a4e   fff3
005a50   cfe5     movff	0xfe5, 0xff8       	MOVFF POSTDEC1, _TBLPTRU 
005a52   fff8
005a54   cfe5     movff	0xfe5, 0xff7       	MOVFF POSTDEC1, _TBLPTRH 
005a56   fff7
005a58   cfe5     movff	0xfe5, 0xff6       	MOVFF POSTDEC1, _TBLPTRL 
005a5a   fff6
005a5c   cfe5     movff	0xfe5, 0xff5       	MOVFF POSTDEC1, _TABLAT 
005a5e   fff5
005a60   cfe5     movff	0xfe5, 0xfea       	MOVFF POSTDEC1, _FSR0H 
005a62   ffea
005a64   cfe5     movff	0xfe5, 0xfe9       	MOVFF POSTDEC1, _FSR0L 
005a66   ffe9
005a68   cfe5     movff	0xfe5, 0xfd9       	MOVFF POSTDEC1, _FSR2L 
005a6a   ffd9
005a6c   cfe5     movff	0xfe5, 0xfda       	MOVFF POSTDEC1, _FSR2H 
005a6e   ffda
005a70   cfda     movff	0xfda, 0xfe2       	MOVFF _FSR2H, _FSR1H 
005a72   ffe2
005a74   cfe5     movff	0xfe5, 0xfe0       	MOVFF POSTDEC1, _BSR 
005a76   ffe0
005a78   cfe5     movff	0xfe5, 0xfe8       	MOVFF POSTDEC1, _WREG 
005a7a   ffe8
005a7c   cfe5     movff	0xfe5, 0xfd8       	MOVFF POSTDEC1, _STATUS 
005a7e   ffd8
005a80   0010     retfie	0                 	RETFIE 0 
                                           ;	.line	507; brtos/BRTOS.c	return OK;
005a82   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00209_DS_:
005a84   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005a86   f001
005a88   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005a8a   f000
005a8c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005a8e   ffd9
005a90   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005a92   ffda
005a94   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__OS_TICK_HANDLER	code
                                           _OS_TICK_HANDLER:
                                           ;	.line	402; brtos/BRTOS.c	void OS_TICK_HANDLER(void)
001b92   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
001b94   ffe5
001b96   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b98   ffe5
001b9a   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
001b9c   ffda
001b9e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001ba0   ffd9
001ba2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001ba4   ffe5
001ba6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001ba8   ffe5
001baa   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001bac   ffe5
001bae   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001bb0   ffe5
001bb2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001bb4   ffe5
001bb6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
001bb8   ffe5
001bba   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
001bbc   ffe5
001bbe   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001bc0   ffe5
001bc2   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001bc4   ffe5
001bc6   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001bc8   ffe5
001bca   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
001bcc   ffe5
001bce   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
001bd0   ffe5
                                           ;	.line	406; brtos/BRTOS.c	ContextType *Task = Head;  
001bd2   c3ef     movff	0x3ef, 0           	MOVFF	_Head, r0x00
001bd4   f000
001bd6   c3f0     movff	0x3f0, 0x1         	MOVFF	(_Head + 1), r0x01
001bd8   f001
001bda   c3f1     movff	0x3f1, 0x2         	MOVFF	(_Head + 2), r0x02
001bdc   f002
                                           _00175_DS_:
                                           ;	.line	411; brtos/BRTOS.c	while(Task != NULL)
001bde   5000     movf	0, 0, 0             	MOVF	r0x00, W
001be0   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
001be2   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
001be4   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001be6   d151     bra	0x1e8a               	BRA	_00177_DS_
                                           ;	.line	413; brtos/BRTOS.c	if (Task->TimeToWait == counter)
001be8   5000     movf	0, 0, 0             	MOVF	r0x00, W
001bea   0f07     addlw	0x7                	ADDLW	0x07
001bec   6e03     movwf	0x3, 0             	MOVWF	r0x03
001bee   0e00     movlw	0                  	MOVLW	0x00
001bf0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001bf2   6e04     movwf	0x4, 0             	MOVWF	r0x04
001bf4   0e00     movlw	0                  	MOVLW	0x00
001bf6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001bf8   6e05     movwf	0x5, 0             	MOVWF	r0x05
001bfa   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001bfc   ffe9
001bfe   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001c00   fff3
001c02   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c04   ec50     call	0x6ea0, 0           	CALL	__gptrget2
001c06   f037
001c08   6e06     movwf	0x6, 0             	MOVWF	r0x06
001c0a   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
001c0c   f007
001c0e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c10   0102     movlb	0x2                	BANKSEL	_counter
001c12   19fe     xorwf	0xfe, 0, 0x1       	XORWF	_counter, W, B
001c14   e104     bnz	0x1c1e               	BNZ	_00190_DS_
001c16   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c18   0102     movlb	0x2                	BANKSEL	(_counter + 1)
001c1a   19ff     xorwf	0xff, 0, 0x1       	XORWF	(_counter + 1), W, B
001c1c   e001     bz	0x1c20                	BZ	_00191_DS_
                                           _00190_DS_:
001c1e   d11f     bra	0x1e5e               	BRA	_00174_DS_
                                           _00191_DS_:
                                           ;	.line	416; brtos/BRTOS.c	iPrio = Task->Priority;
001c20   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c22   0f09     addlw	0x9                	ADDLW	0x09
001c24   6e06     movwf	0x6, 0             	MOVWF	r0x06
001c26   0e00     movlw	0                  	MOVLW	0x00
001c28   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001c2a   6e07     movwf	0x7, 0             	MOVWF	r0x07
001c2c   0e00     movlw	0                  	MOVLW	0x00
001c2e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001c30   6e08     movwf	0x8, 0             	MOVWF	r0x08
001c32   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001c34   ffe9
001c36   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001c38   fff3
001c3a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001c3c   ec78     call	0x6ef0, 0           	CALL	__gptrget1
001c3e   f037
001c40   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ; ;multiply lit val:0x02 by variable r0x06 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	423; brtos/BRTOS.c	OSReadyList = OSReadyList | (PriorityMask[iPrio]);
001c42   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001c44   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
001c46   6a07     clrf	0x7, 0              	CLRF	r0x07
001c48   6a08     clrf	0x8, 0              	CLRF	r0x08
001c4a   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
001c4c   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
001c4e   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
001c50   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
001c52   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
001c54   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
001c56   c006     movff	0x6, 0xff6         	MOVFF	r0x06, TBLPTRL
001c58   fff6
001c5a   c007     movff	0x7, 0xff7         	MOVFF	r0x07, TBLPTRH
001c5c   fff7
001c5e   c008     movff	0x8, 0xff8         	MOVFF	r0x08, TBLPTRU
001c60   fff8
001c62   0009     tblrd	*+                 	TBLRD*+	
001c64   cff5     movff	0xff5, 0x6         	MOVFF	TABLAT, r0x06
001c66   f006
001c68   0009     tblrd	*+                 	TBLRD*+	
001c6a   cff5     movff	0xff5, 0x7         	MOVFF	TABLAT, r0x07
001c6c   f007
001c6e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001c70   0102     movlb	0x2                	BANKSEL	_OSReadyList
001c72   1399     iorwf	0x99, 0x1, 0x1     	IORWF	_OSReadyList, F, B
001c74   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001c76   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
001c78   139a     iorwf	0x9a, 0x1, 0x1     	IORWF	(_OSReadyList + 1), F, B
                                           ;	.line	429; brtos/BRTOS.c	Task->TimeToWait = EXIT_BY_TIMEOUT;
001c7a   0ee9     movlw	0xe9               	MOVLW	0xe9
001c7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001c7e   0efd     movlw	0xfd               	MOVLW	0xfd
001c80   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001c82   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001c84   ffe9
001c86   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001c88   fff3
001c8a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001c8c   ecb3     call	0x6f66, 0           	CALL	__gptrput2
001c8e   f037
                                           ;	.line	436; brtos/BRTOS.c	RemoveFromDelayList();
001c90   5000     movf	0, 0, 0             	MOVF	r0x00, W
001c92   0103     movlb	0x3                	BANKSEL	_Head
001c94   19ef     xorwf	0xef, 0, 0x1       	XORWF	_Head, W, B
001c96   e108     bnz	0x1ca8               	BNZ	_00193_DS_
001c98   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001c9a   0103     movlb	0x3                	BANKSEL	(_Head + 1)
001c9c   19f0     xorwf	0xf0, 0, 0x1       	XORWF	(_Head + 1), W, B
001c9e   e104     bnz	0x1ca8               	BNZ	_00193_DS_
001ca0   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001ca2   0103     movlb	0x3                	BANKSEL	(_Head + 2)
001ca4   19f1     xorwf	0xf1, 0, 0x1       	XORWF	(_Head + 2), W, B
001ca6   e001     bz	0x1caa                	BZ	_00194_DS_
                                           _00193_DS_:
001ca8   d04a     bra	0x1d3e               	BRA	_00171_DS_
                                           _00194_DS_:
001caa   5000     movf	0, 0, 0             	MOVF	r0x00, W
001cac   0103     movlb	0x3                	BANKSEL	_Tail
001cae   19ec     xorwf	0xec, 0, 0x1       	XORWF	_Tail, W, B
001cb0   e108     bnz	0x1cc2               	BNZ	_00195_DS_
001cb2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001cb4   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
001cb6   19ed     xorwf	0xed, 0, 0x1       	XORWF	(_Tail + 1), W, B
001cb8   e104     bnz	0x1cc2               	BNZ	_00195_DS_
001cba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001cbc   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
001cbe   19ee     xorwf	0xee, 0, 0x1       	XORWF	(_Tail + 2), W, B
001cc0   e001     bz	0x1cc4                	BZ	_00196_DS_
                                           _00195_DS_:
001cc2   d00d     bra	0x1cde               	BRA	_00165_DS_
                                           _00196_DS_:
001cc4   0103     movlb	0x3                	BANKSEL	_Tail
001cc6   6bec     clrf	0xec, 0x1           	CLRF	_Tail, B
001cc8   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
001cca   6bed     clrf	0xed, 0x1           	CLRF	(_Tail + 1), B
001ccc   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
001cce   6bee     clrf	0xee, 0x1           	CLRF	(_Tail + 2), B
001cd0   0103     movlb	0x3                	BANKSEL	_Head
001cd2   6bef     clrf	0xef, 0x1           	CLRF	_Head, B
001cd4   0103     movlb	0x3                	BANKSEL	(_Head + 1)
001cd6   6bf0     clrf	0xf0, 0x1           	CLRF	(_Head + 1), B
001cd8   0103     movlb	0x3                	BANKSEL	(_Head + 2)
001cda   6bf1     clrf	0xf1, 0x1           	CLRF	(_Head + 2), B
001cdc   d0c0     bra	0x1e5e               	BRA	_00174_DS_
                                           _00165_DS_:
001cde   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ce0   0f0a     addlw	0xa                	ADDLW	0x0a
001ce2   6e03     movwf	0x3, 0             	MOVWF	r0x03
001ce4   0e00     movlw	0                  	MOVLW	0x00
001ce6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001ce8   6e04     movwf	0x4, 0             	MOVWF	r0x04
001cea   0e00     movlw	0                  	MOVLW	0x00
001cec   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001cee   6e05     movwf	0x5, 0             	MOVWF	r0x05
001cf0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001cf2   ffe9
001cf4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001cf6   fff3
001cf8   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001cfa   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
001cfc   f036
001cfe   0103     movlb	0x3                	BANKSEL	_Head
001d00   6fef     movwf	0xef, 0x1          	MOVWF	_Head, B
001d02   cff3     movff	0xff3, 0x3f0       	MOVFF	PRODL, (_Head + 1)
001d04   f3f0
001d06   cff4     movff	0xff4, 0x3f1       	MOVFF	PRODH, (_Head + 2)
001d08   f3f1
001d0a   c3ef     movff	0x3ef, 0x3         	MOVFF	_Head, r0x03
001d0c   f003
001d0e   c3f0     movff	0x3f0, 0x4         	MOVFF	(_Head + 1), r0x04
001d10   f004
001d12   c3f1     movff	0x3f1, 0x5         	MOVFF	(_Head + 2), r0x05
001d14   f005
001d16   0e0d     movlw	0xd                	MOVLW	0x0d
001d18   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001d1a   0e00     movlw	0                  	MOVLW	0x00
001d1c   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001d1e   0e00     movlw	0                  	MOVLW	0x00
001d20   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001d22   0e00     movlw	0                  	MOVLW	0x00
001d24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001d26   0e00     movlw	0                  	MOVLW	0x00
001d28   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001d2a   0e00     movlw	0                  	MOVLW	0x00
001d2c   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
001d2e   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001d30   ffe9
001d32   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001d34   fff3
001d36   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001d38   ec99     call	0x6f32, 0           	CALL	__gptrput3
001d3a   f037
001d3c   d090     bra	0x1e5e               	BRA	_00174_DS_
                                           _00171_DS_:
001d3e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d40   0103     movlb	0x3                	BANKSEL	_Tail
001d42   19ec     xorwf	0xec, 0, 0x1       	XORWF	_Tail, W, B
001d44   e108     bnz	0x1d56               	BNZ	_00197_DS_
001d46   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001d48   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
001d4a   19ed     xorwf	0xed, 0, 0x1       	XORWF	(_Tail + 1), W, B
001d4c   e104     bnz	0x1d56               	BNZ	_00197_DS_
001d4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001d50   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
001d52   19ee     xorwf	0xee, 0, 0x1       	XORWF	(_Tail + 2), W, B
001d54   e001     bz	0x1d58                	BZ	_00198_DS_
                                           _00197_DS_:
001d56   d030     bra	0x1db8               	BRA	_00168_DS_
                                           _00198_DS_:
001d58   5000     movf	0, 0, 0             	MOVF	r0x00, W
001d5a   0f0d     addlw	0xd                	ADDLW	0x0d
001d5c   6e03     movwf	0x3, 0             	MOVWF	r0x03
001d5e   0e00     movlw	0                  	MOVLW	0x00
001d60   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001d62   6e04     movwf	0x4, 0             	MOVWF	r0x04
001d64   0e00     movlw	0                  	MOVLW	0x00
001d66   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001d68   6e05     movwf	0x5, 0             	MOVWF	r0x05
001d6a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001d6c   ffe9
001d6e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001d70   fff3
001d72   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001d74   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
001d76   f036
001d78   0103     movlb	0x3                	BANKSEL	_Tail
001d7a   6fec     movwf	0xec, 0x1          	MOVWF	_Tail, B
001d7c   cff3     movff	0xff3, 0x3ed       	MOVFF	PRODL, (_Tail + 1)
001d7e   f3ed
001d80   cff4     movff	0xff4, 0x3ee       	MOVFF	PRODH, (_Tail + 2)
001d82   f3ee
001d84   c3ec     movff	0x3ec, 0x3         	MOVFF	_Tail, r0x03
001d86   f003
001d88   c3ed     movff	0x3ed, 0x4         	MOVFF	(_Tail + 1), r0x04
001d8a   f004
001d8c   c3ee     movff	0x3ee, 0x5         	MOVFF	(_Tail + 2), r0x05
001d8e   f005
001d90   0e0a     movlw	0xa                	MOVLW	0x0a
001d92   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001d94   0e00     movlw	0                  	MOVLW	0x00
001d96   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001d98   0e00     movlw	0                  	MOVLW	0x00
001d9a   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
001d9c   0e00     movlw	0                  	MOVLW	0x00
001d9e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001da0   0e00     movlw	0                  	MOVLW	0x00
001da2   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
001da4   0e00     movlw	0                  	MOVLW	0x00
001da6   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
001da8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001daa   ffe9
001dac   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001dae   fff3
001db0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001db2   ec99     call	0x6f32, 0           	CALL	__gptrput3
001db4   f037
001db6   d053     bra	0x1e5e               	BRA	_00174_DS_
                                           _00168_DS_:
001db8   5000     movf	0, 0, 0             	MOVF	r0x00, W
001dba   0f0a     addlw	0xa                	ADDLW	0x0a
001dbc   6e03     movwf	0x3, 0             	MOVWF	r0x03
001dbe   0e00     movlw	0                  	MOVLW	0x00
001dc0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001dc2   6e04     movwf	0x4, 0             	MOVWF	r0x04
001dc4   0e00     movlw	0                  	MOVLW	0x00
001dc6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001dc8   6e05     movwf	0x5, 0             	MOVWF	r0x05
001dca   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001dcc   ffe9
001dce   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001dd0   fff3
001dd2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001dd4   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
001dd6   f036
001dd8   6e03     movwf	0x3, 0             	MOVWF	r0x03
001dda   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
001ddc   f004
001dde   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
001de0   f005
001de2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001de4   0f0d     addlw	0xd                	ADDLW	0x0d
001de6   6e06     movwf	0x6, 0             	MOVWF	r0x06
001de8   0e00     movlw	0                  	MOVLW	0x00
001dea   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
001dec   6e07     movwf	0x7, 0             	MOVWF	r0x07
001dee   0e00     movlw	0                  	MOVLW	0x00
001df0   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
001df2   6e08     movwf	0x8, 0             	MOVWF	r0x08
001df4   5000     movf	0, 0, 0             	MOVF	r0x00, W
001df6   0f0d     addlw	0xd                	ADDLW	0x0d
001df8   6e09     movwf	0x9, 0             	MOVWF	r0x09
001dfa   0e00     movlw	0                  	MOVLW	0x00
001dfc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001dfe   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001e00   0e00     movlw	0                  	MOVLW	0x00
001e02   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001e04   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001e06   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001e08   ffe9
001e0a   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001e0c   fff3
001e0e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001e10   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
001e12   f036
001e14   6e09     movwf	0x9, 0             	MOVWF	r0x09
001e16   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
001e18   f00a
001e1a   cff4     movff	0xff4, 0xb         	MOVFF	PRODH, r0x0b
001e1c   f00b
001e1e   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
001e20   ffe5
001e22   c00a     movff	0xa, 0xff4         	MOVFF	r0x0a, PRODH
001e24   fff4
001e26   c00b     movff	0xb, 0xff6         	MOVFF	r0x0b, TBLPTRL
001e28   fff6
001e2a   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001e2c   ffe9
001e2e   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
001e30   fff3
001e32   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
001e34   ec99     call	0x6f32, 0           	CALL	__gptrput3
001e36   f037
001e38   0e0a     movlw	0xa                	MOVLW	0x0a
001e3a   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
001e3c   0e00     movlw	0                  	MOVLW	0x00
001e3e   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
001e40   0e00     movlw	0                  	MOVLW	0x00
001e42   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
001e44   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001e46   ffe5
001e48   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
001e4a   fff4
001e4c   c005     movff	0x5, 0xff6         	MOVFF	r0x05, TBLPTRL
001e4e   fff6
001e50   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001e52   ffe9
001e54   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
001e56   fff3
001e58   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001e5a   ec99     call	0x6f32, 0           	CALL	__gptrput3
001e5c   f037
                                           _00174_DS_:
                                           ;	.line	439; brtos/BRTOS.c	Task = Task->Next;
001e5e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001e60   0f0a     addlw	0xa                	ADDLW	0x0a
001e62   6e03     movwf	0x3, 0             	MOVWF	r0x03
001e64   0e00     movlw	0                  	MOVLW	0x00
001e66   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001e68   6e04     movwf	0x4, 0             	MOVWF	r0x04
001e6a   0e00     movlw	0                  	MOVLW	0x00
001e6c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001e6e   6e05     movwf	0x5, 0             	MOVWF	r0x05
001e70   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001e72   ffe9
001e74   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001e76   fff3
001e78   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001e7a   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
001e7c   f036
001e7e   6e00     movwf	0, 0               	MOVWF	r0x00
001e80   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001e82   f001
001e84   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
001e86   f002
001e88   d6aa     bra	0x1bde               	BRA	_00175_DS_
                                           _00177_DS_:
                                           ;	.line	448; brtos/BRTOS.c	if (DutyCnt >= 1024)
001e8a   0e04     movlw	0x4                	MOVLW	0x04
001e8c   0102     movlb	0x2                	BANKSEL	(_DutyCnt + 1)
001e8e   5da8     subwf	0xa8, 0, 0x1       	SUBWF	(_DutyCnt + 1), W, B
001e90   e103     bnz	0x1e98               	BNZ	_00199_DS_
001e92   0e00     movlw	0                  	MOVLW	0x00
001e94   0102     movlb	0x2                	BANKSEL	_DutyCnt
001e96   5da7     subwf	0xa7, 0, 0x1       	SUBWF	_DutyCnt, W, B
                                           _00199_DS_:
001e98   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001e9a   d039     bra	0x1f0e               	BRA	_00179_DS_
001e9c   0102     movlb	0x2                	BANKSEL	_DutyCnt
                                           ;	.line	450; brtos/BRTOS.c	DutyCnt = 0;
001e9e   6ba7     clrf	0xa7, 0x1           	CLRF	_DutyCnt, B
001ea0   0102     movlb	0x2                	BANKSEL	(_DutyCnt + 1)
001ea2   6ba8     clrf	0xa8, 0x1           	CLRF	(_DutyCnt + 1), B
001ea4   0102     movlb	0x2                	BANKSEL	_OSDutyTmp
                                           ;	.line	451; brtos/BRTOS.c	OSDuty = (INT32U)((INT32U)OSDuty + (INT32U)OSDutyTmp);
001ea6   51a1     movf	0xa1, 0, 0x1        	MOVF	_OSDutyTmp, W, B
001ea8   0102     movlb	0x2                	BANKSEL	_OSDuty
001eaa   279d     addwf	0x9d, 0x1, 0x1     	ADDWF	_OSDuty, F, B
001eac   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 1)
001eae   51a2     movf	0xa2, 0, 0x1        	MOVF	(_OSDutyTmp + 1), W, B
001eb0   0102     movlb	0x2                	BANKSEL	(_OSDuty + 1)
001eb2   239e     addwfc	0x9e, 0x1, 0x1    	ADDWFC	(_OSDuty + 1), F, B
001eb4   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 2)
001eb6   51a3     movf	0xa3, 0, 0x1        	MOVF	(_OSDutyTmp + 2), W, B
001eb8   0102     movlb	0x2                	BANKSEL	(_OSDuty + 2)
001eba   239f     addwfc	0x9f, 0x1, 0x1    	ADDWFC	(_OSDuty + 2), F, B
001ebc   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 3)
001ebe   51a4     movf	0xa4, 0, 0x1        	MOVF	(_OSDutyTmp + 3), W, B
001ec0   0102     movlb	0x2                	BANKSEL	(_OSDuty + 3)
001ec2   23a0     addwfc	0xa0, 0x1, 0x1    	ADDWFC	(_OSDuty + 3), F, B
                                           ;	.line	452; brtos/BRTOS.c	LastOSDuty = (INT16U)(OSDuty >> 10);
001ec4   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001ec6   0102     movlb	0x2                	BANKSEL	(_OSDuty + 2)
001ec8   319f     rrcf	0x9f, 0, 0x1        	RRCF	(_OSDuty + 2), W, B
001eca   6e01     movwf	0x1, 0             	MOVWF	r0x01
001ecc   0102     movlb	0x2                	BANKSEL	(_OSDuty + 1)
001ece   319e     rrcf	0x9e, 0, 0x1        	RRCF	(_OSDuty + 1), W, B
001ed0   6e00     movwf	0, 0               	MOVWF	r0x00
001ed2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001ed4   3201     rrcf	0x1, 0x1, 0         	RRCF	r0x01, F
001ed6   3200     rrcf	0, 0x1, 0           	RRCF	r0x00, F
001ed8   0102     movlb	0x2                	BANKSEL	(_OSDuty + 3)
001eda   51a0     movf	0xa0, 0, 0x1        	MOVF	(_OSDuty + 3), W, B
001edc   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
001ede   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
001ee0   0bc0     andlw	0xc0               	ANDLW	0xc0
001ee2   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
001ee4   0102     movlb	0x2                	BANKSEL	(_OSDuty + 3)
001ee6   41a0     rrncf	0xa0, 0, 0x1       	RRNCF	(_OSDuty + 3), W, B
001ee8   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
001eea   0b3f     andlw	0x3f               	ANDLW	0x3f
001eec   6e02     movwf	0x2, 0             	MOVWF	r0x02
001eee   6a03     clrf	0x3, 0              	CLRF	r0x03
001ef0   5000     movf	0, 0, 0             	MOVF	r0x00, W
001ef2   0102     movlb	0x2                	BANKSEL	_LastOSDuty
001ef4   6fa5     movwf	0xa5, 0x1          	MOVWF	_LastOSDuty, B
001ef6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001ef8   0102     movlb	0x2                	BANKSEL	(_LastOSDuty + 1)
001efa   6fa6     movwf	0xa6, 0x1          	MOVWF	(_LastOSDuty + 1), B
001efc   0102     movlb	0x2                	BANKSEL	_OSDuty
                                           ;	.line	453; brtos/BRTOS.c	OSDuty = 0;
001efe   6b9d     clrf	0x9d, 0x1           	CLRF	_OSDuty, B
001f00   0102     movlb	0x2                	BANKSEL	(_OSDuty + 1)
001f02   6b9e     clrf	0x9e, 0x1           	CLRF	(_OSDuty + 1), B
001f04   0102     movlb	0x2                	BANKSEL	(_OSDuty + 2)
001f06   6b9f     clrf	0x9f, 0x1           	CLRF	(_OSDuty + 2), B
001f08   0102     movlb	0x2                	BANKSEL	(_OSDuty + 3)
001f0a   6ba0     clrf	0xa0, 0x1           	CLRF	(_OSDuty + 3), B
001f0c   d015     bra	0x1f38               	BRA	_00180_DS_
                                           _00179_DS_:
001f0e   0102     movlb	0x2                	BANKSEL	_OSDutyTmp
                                           ;	.line	456; brtos/BRTOS.c	OSDuty = (INT32U)((INT32U)OSDuty + (INT32U)OSDutyTmp);
001f10   51a1     movf	0xa1, 0, 0x1        	MOVF	_OSDutyTmp, W, B
001f12   0102     movlb	0x2                	BANKSEL	_OSDuty
001f14   279d     addwf	0x9d, 0x1, 0x1     	ADDWF	_OSDuty, F, B
001f16   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 1)
001f18   51a2     movf	0xa2, 0, 0x1        	MOVF	(_OSDutyTmp + 1), W, B
001f1a   0102     movlb	0x2                	BANKSEL	(_OSDuty + 1)
001f1c   239e     addwfc	0x9e, 0x1, 0x1    	ADDWFC	(_OSDuty + 1), F, B
001f1e   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 2)
001f20   51a3     movf	0xa3, 0, 0x1        	MOVF	(_OSDutyTmp + 2), W, B
001f22   0102     movlb	0x2                	BANKSEL	(_OSDuty + 2)
001f24   239f     addwfc	0x9f, 0x1, 0x1    	ADDWFC	(_OSDuty + 2), F, B
001f26   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 3)
001f28   51a4     movf	0xa4, 0, 0x1        	MOVF	(_OSDutyTmp + 3), W, B
001f2a   0102     movlb	0x2                	BANKSEL	(_OSDuty + 3)
001f2c   23a0     addwfc	0xa0, 0x1, 0x1    	ADDWFC	(_OSDuty + 3), F, B
001f2e   0102     movlb	0x2                	BANKSEL	_DutyCnt
                                           ;	.line	457; brtos/BRTOS.c	DutyCnt++;
001f30   2ba7     incf	0xa7, 0x1, 0x1      	INCF	_DutyCnt, F, B
001f32   e302     bnc	0x1f38               	BNC	_10470_DS_
001f34   0102     movlb	0x2                	BANKSEL	(_DutyCnt + 1)
001f36   2ba8     incf	0xa8, 0x1, 0x1      	INCF	(_DutyCnt + 1), F, B
                                           _10470_DS_:
                                           _00180_DS_:
                                           ;	.line	459; brtos/BRTOS.c	OSDutyTmp = TIMER_MODULE;
001f38   cfbe     movff	0xfbe, 0x2a1       	MOVFF	_CCPR1, _OSDutyTmp
001f3a   f2a1
001f3c   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 1)
001f3e   6ba2     clrf	0xa2, 0x1           	CLRF	(_OSDutyTmp + 1), B
001f40   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 2)
001f42   6ba3     clrf	0xa3, 0x1           	CLRF	(_OSDutyTmp + 2), B
001f44   0102     movlb	0x2                	BANKSEL	(_OSDutyTmp + 3)
001f46   6ba4     clrf	0xa4, 0x1           	CLRF	(_OSDutyTmp + 3), B
001f48   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001f4a   f00b
001f4c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001f4e   f00a
001f50   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001f52   f009
001f54   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001f56   f008
001f58   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001f5a   f007
001f5c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001f5e   f006
001f60   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001f62   f005
001f64   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001f66   f004
001f68   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001f6a   f003
001f6c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001f6e   f002
001f70   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001f72   f001
001f74   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001f76   f000
001f78   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001f7a   ffd9
001f7c   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
001f7e   ffda
001f80   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__DelayTaskHMSM	code
                                           _DelayTaskHMSM:
                                           ;	.line	348; brtos/BRTOS.c	INT8U DelayTaskHMSM(INT8U hours, INT8U minutes, INT8U seconds, INT16U miliseconds)
003050   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
003052   ffe5
003054   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003056   ffe5
003058   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00305a   ffda
00305c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00305e   ffd9
003060   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003062   ffe5
003064   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003066   ffe5
003068   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00306a   ffe5
00306c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00306e   ffe5
003070   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003072   ffe5
003074   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003076   ffe5
003078   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00307a   ffe5
00307c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00307e   ffe5
003080   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003082   ffe5
003084   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003086   ffe5
003088   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00308a   ffe5
00308c   0e03     movlw	0x3                	MOVLW	0x03
00308e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003090   f000
003092   0e04     movlw	0x4                	MOVLW	0x04
003094   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003096   f001
003098   0e05     movlw	0x5                	MOVLW	0x05
00309a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
00309c   f002
00309e   0e06     movlw	0x6                	MOVLW	0x06
0030a0   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0030a2   f003
0030a4   0e07     movlw	0x7                	MOVLW	0x07
0030a6   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0030a8   f004
                                           ;	.line	353; brtos/BRTOS.c	if (minutes > 59)
0030aa   0e3c     movlw	0x3c               	MOVLW	0x3c
0030ac   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0030ae   e302     bnc	0x30b4               	BNC	_00137_DS_
                                           ;	.line	354; brtos/BRTOS.c	return INVALID_TIME;
0030b0   0e05     movlw	0x5                	MOVLW	0x05
0030b2   d132     bra	0x3318               	BRA	_00148_DS_
                                           _00137_DS_:
                                           ;	.line	356; brtos/BRTOS.c	if (seconds > 59)
0030b4   0e3c     movlw	0x3c               	MOVLW	0x3c
0030b6   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
0030b8   e302     bnc	0x30be               	BNC	_00139_DS_
                                           ;	.line	357; brtos/BRTOS.c	return INVALID_TIME;
0030ba   0e05     movlw	0x5                	MOVLW	0x05
0030bc   d12d     bra	0x3318               	BRA	_00148_DS_
                                           _00139_DS_:
                                           ;	.line	359; brtos/BRTOS.c	if (miliseconds > 999)
0030be   0e03     movlw	0x3                	MOVLW	0x03
0030c0   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
0030c2   e102     bnz	0x30c8               	BNZ	_00159_DS_
0030c4   0ee8     movlw	0xe8               	MOVLW	0xe8
0030c6   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
                                           _00159_DS_:
0030c8   e302     bnc	0x30ce               	BNC	_00141_DS_
                                           ;	.line	360; brtos/BRTOS.c	return INVALID_TIME;  
0030ca   0e05     movlw	0x5                	MOVLW	0x05
0030cc   d125     bra	0x3318               	BRA	_00148_DS_
                                           _00141_DS_:
                                           ;	.line	362; brtos/BRTOS.c	ticks = (INT32U)hours   * 3600L * configTICK_RATE_HZ
0030ce   6a05     clrf	0x5, 0              	CLRF	r0x05
0030d0   6a06     clrf	0x6, 0              	CLRF	r0x06
0030d2   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           ;	.line	363; brtos/BRTOS.c	+ (INT32U)minutes * 60L   * configTICK_RATE_HZ
0030d4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0030d6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030d8   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0030da   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030dc   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0030de   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030e0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0030e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030e4   0e00     movlw	0                  	MOVLW	0x00
0030e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030e8   0e36     movlw	0x36               	MOVLW	0x36
0030ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030ec   0eee     movlw	0xee               	MOVLW	0xee
0030ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030f0   0e80     movlw	0x80               	MOVLW	0x80
0030f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0030f4   ecde     call	0x37bc, 0           	CALL	__mullong
0030f6   f01b
0030f8   6e00     movwf	0, 0               	MOVWF	r0x00
0030fa   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0030fc   f005
0030fe   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
003100   f006
003102   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
003104   f007
003106   0e08     movlw	0x8                	MOVLW	0x08
003108   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00310a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00310c   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
00310e   6a08     clrf	0x8, 0              	CLRF	r0x08
003110   6a09     clrf	0x9, 0              	CLRF	r0x09
003112   6a0a     clrf	0xa, 0              	CLRF	r0x0a
003114   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003116   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003118   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00311a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00311c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00311e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003120   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003122   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003124   0e00     movlw	0                  	MOVLW	0x00
003126   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003128   0e00     movlw	0                  	MOVLW	0x00
00312a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00312c   0eea     movlw	0xea               	MOVLW	0xea
00312e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003130   0e60     movlw	0x60               	MOVLW	0x60
003132   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003134   ecde     call	0x37bc, 0           	CALL	__mullong
003136   f01b
003138   6e01     movwf	0x1, 0             	MOVWF	r0x01
00313a   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
00313c   f008
00313e   cff4     movff	0xff4, 0x9         	MOVFF	PRODH, r0x09
003140   f009
003142   cfe9     movff	0xfe9, 0xa         	MOVFF	FSR0L, r0x0a
003144   f00a
003146   0e08     movlw	0x8                	MOVLW	0x08
003148   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00314a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00314c   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
00314e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003150   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003152   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003154   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
003156   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003158   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
00315a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00315c   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
                                           ;	.line	364; brtos/BRTOS.c	+ (INT32U)seconds *         configTICK_RATE_HZ
00315e   6a01     clrf	0x1, 0              	CLRF	r0x01
003160   6a08     clrf	0x8, 0              	CLRF	r0x08
003162   6a09     clrf	0x9, 0              	CLRF	r0x09
003164   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003166   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003168   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00316a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00316c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00316e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003170   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003172   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003174   0e00     movlw	0                  	MOVLW	0x00
003176   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003178   0e00     movlw	0                  	MOVLW	0x00
00317a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00317c   0e03     movlw	0x3                	MOVLW	0x03
00317e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003180   0ee8     movlw	0xe8               	MOVLW	0xe8
003182   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003184   ecde     call	0x37bc, 0           	CALL	__mullong
003186   f01b
003188   6e01     movwf	0x1, 0             	MOVWF	r0x01
00318a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00318c   f002
00318e   cff4     movff	0xff4, 0x8         	MOVFF	PRODH, r0x08
003190   f008
003192   cfe9     movff	0xfe9, 0x9         	MOVFF	FSR0L, r0x09
003194   f009
003196   0e08     movlw	0x8                	MOVLW	0x08
003198   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00319a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00319c   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
00319e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0031a0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0031a2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031a4   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0031a6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0031a8   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
0031aa   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0031ac   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
                                           ;	.line	365; brtos/BRTOS.c	+ ((INT32U)miliseconds    * configTICK_RATE_HZ)/1000L;
0031ae   6a01     clrf	0x1, 0              	CLRF	r0x01
0031b0   6a02     clrf	0x2, 0              	CLRF	r0x02
0031b2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0031b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031b6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0031b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0031bc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031be   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0031c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031c2   0e00     movlw	0                  	MOVLW	0x00
0031c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031c6   0e00     movlw	0                  	MOVLW	0x00
0031c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ca   0e03     movlw	0x3                	MOVLW	0x03
0031cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031ce   0ee8     movlw	0xe8               	MOVLW	0xe8
0031d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031d2   ecde     call	0x37bc, 0           	CALL	__mullong
0031d4   f01b
0031d6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0031d8   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0031da   f002
0031dc   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0031de   f003
0031e0   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
0031e2   f004
0031e4   0e08     movlw	0x8                	MOVLW	0x08
0031e6   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0031e8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0031ea   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
0031ec   0e00     movlw	0                  	MOVLW	0x00
0031ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f0   0e00     movlw	0                  	MOVLW	0x00
0031f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f4   0e03     movlw	0x3                	MOVLW	0x03
0031f6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031f8   0ee8     movlw	0xe8               	MOVLW	0xe8
0031fa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0031fc   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0031fe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003200   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003202   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003204   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003206   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003208   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00320a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00320c   ec4d     call	0x569a, 0           	CALL	__divulong
00320e   f02b
003210   6e01     movwf	0x1, 0             	MOVWF	r0x01
003212   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
003214   f002
003216   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
003218   f003
00321a   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
00321c   f004
00321e   0e08     movlw	0x8                	MOVLW	0x08
003220   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003222   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003224   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
003226   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003228   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00322a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00322c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00322e   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
003230   6e02     movwf	0x2, 0             	MOVWF	r0x02
003232   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003234   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
003236   6e03     movwf	0x3, 0             	MOVWF	r0x03
003238   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00323a   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
00323c   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ;	.line	368; brtos/BRTOS.c	if (ticks > 0)
00323e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003240   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
003242   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
003244   1000     iorwf	0, 0, 0            	IORWF	r0x00, W
003246   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003248   d066     bra	0x3316               	BRA	_00146_DS_
                                           ;	.line	370; brtos/BRTOS.c	loops = ticks / 60000L;
00324a   0e00     movlw	0                  	MOVLW	0x00
00324c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00324e   0e00     movlw	0                  	MOVLW	0x00
003250   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003252   0eea     movlw	0xea               	MOVLW	0xea
003254   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003256   0e60     movlw	0x60               	MOVLW	0x60
003258   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00325a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00325c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00325e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003262   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003264   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003266   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003268   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00326a   ec4d     call	0x569a, 0           	CALL	__divulong
00326c   f02b
00326e   6e04     movwf	0x4, 0             	MOVWF	r0x04
003270   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
003272   f005
003274   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
003276   f006
003278   cfe9     movff	0xfe9, 0x7         	MOVFF	FSR0L, r0x07
00327a   f007
00327c   0e08     movlw	0x8                	MOVLW	0x08
00327e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003280   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003282   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	371; brtos/BRTOS.c	ticks = ticks % 60000L;
003284   0e00     movlw	0                  	MOVLW	0x00
003286   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003288   0e00     movlw	0                  	MOVLW	0x00
00328a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00328c   0eea     movlw	0xea               	MOVLW	0xea
00328e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003290   0e60     movlw	0x60               	MOVLW	0x60
003292   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003294   5000     movf	0, 0, 0             	MOVF	r0x00, W
003296   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003298   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00329a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00329c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00329e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032a0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0032a2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032a4   ecbb     call	0x5576, 0           	CALL	__modulong
0032a6   f02a
0032a8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0032aa   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
0032ac   f002
0032ae   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0032b0   f003
0032b2   cfe9     movff	0xfe9, 0           	MOVFF	FSR0L, r0x00
0032b4   f000
0032b6   0e08     movlw	0x8                	MOVLW	0x08
0032b8   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0032ba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0032bc   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	373; brtos/BRTOS.c	(void)DelayTask(ticks);
0032be   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0032c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0032c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032c6   eca8     call	0x2d50, 0           	CALL	_DelayTask
0032c8   f016
0032ca   0e02     movlw	0x2                	MOVLW	0x02
0032cc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0032ce   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0032d0   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	375; brtos/BRTOS.c	while(loops > 0)
0032d2   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
0032d4   f000
0032d6   c005     movff	0x5, 0x1           	MOVFF	r0x05, r0x01
0032d8   f001
0032da   c006     movff	0x6, 0x2           	MOVFF	r0x06, r0x02
0032dc   f002
0032de   c007     movff	0x7, 0x3           	MOVFF	r0x07, r0x03
0032e0   f003
                                           _00142_DS_:
0032e2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0032e4   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0032e6   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
0032e8   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
0032ea   e013     bz	0x3312                	BZ	_00144_DS_
                                           ;	.line	377; brtos/BRTOS.c	(void)DelayTask(60000);
0032ec   0eea     movlw	0xea               	MOVLW	0xea
0032ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032f0   0e60     movlw	0x60               	MOVLW	0x60
0032f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0032f4   eca8     call	0x2d50, 0           	CALL	_DelayTask
0032f6   f016
0032f8   0e02     movlw	0x2                	MOVLW	0x02
0032fa   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0032fc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0032fe   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	378; brtos/BRTOS.c	loops--;
003300   0eff     movlw	0xff               	MOVLW	0xff
003302   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003304   0eff     movlw	0xff               	MOVLW	0xff
003306   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003308   0eff     movlw	0xff               	MOVLW	0xff
00330a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00330c   0eff     movlw	0xff               	MOVLW	0xff
00330e   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003310   d7e8     bra	0x32e2               	BRA	_00142_DS_
                                           _00144_DS_:
                                           ;	.line	380; brtos/BRTOS.c	return OK;
003312   6ae8     clrf	0xe8, 0             	CLRF	WREG
003314   d001     bra	0x3318               	BRA	_00148_DS_
                                           _00146_DS_:
                                           ;	.line	384; brtos/BRTOS.c	return NO_TASK_DELAY;
003316   0e09     movlw	0x9                	MOVLW	0x09
                                           _00148_DS_:
003318   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00331a   f00a
00331c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00331e   f009
003320   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003322   f008
003324   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003326   f007
003328   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00332a   f006
00332c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00332e   f005
003330   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003332   f004
003334   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003336   f003
003338   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00333a   f002
00333c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00333e   f001
003340   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003342   f000
003344   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003346   ffd9
003348   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
00334a   ffda
00334c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__DelayTask	code
                                           _DelayTask:
                                           ;	.line	267; brtos/BRTOS.c	INT8U DelayTask(INT16U time_wait)
002d50   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
002d52   ffe5
002d54   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002d56   ffe5
002d58   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
002d5a   ffda
002d5c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002d5e   ffd9
002d60   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002d62   ffe5
002d64   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002d66   ffe5
002d68   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002d6a   ffe5
002d6c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002d6e   ffe5
002d70   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002d72   ffe5
002d74   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002d76   ffe5
002d78   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002d7a   ffe5
002d7c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002d7e   ffe5
002d80   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002d82   ffe5
002d84   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002d86   ffe5
002d88   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002d8a   ffe5
002d8c   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002d8e   ffe5
002d90   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002d92   ffe5
002d94   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002d96   ffe5
002d98   0e03     movlw	0x3                	MOVLW	0x03
002d9a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002d9c   f000
002d9e   0e04     movlw	0x4                	MOVLW	0x04
002da0   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002da2   f001
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002da4   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	271; brtos/BRTOS.c	ContextType *Task = &ContextTask[currentTask];
002da6   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002da8   0d10     mullw	0x10               	MULLW	0x10
002daa   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
002dac   f002
002dae   6a03     clrf	0x3, 0              	CLRF	r0x03
002db0   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
002db2   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
002db4   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
002db6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002db8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002dba   6e03     movwf	0x3, 0             	MOVWF	r0x03
002dbc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002dbe   6e02     movwf	0x2, 0             	MOVWF	r0x02
002dc0   0e80     movlw	0x80               	MOVLW	0x80
002dc2   6e04     movwf	0x4, 0             	MOVWF	r0x04
002dc4   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	273; brtos/BRTOS.c	if (iNesting > 0) {                                // See if caller is an interrupt
002dc6   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
002dc8   e002     bz	0x2dce                	BZ	_00111_DS_
                                           ;	.line	274; brtos/BRTOS.c	return(IRQ_PEND_ERR);                           // Can't be blocked by interrupt
002dca   0e02     movlw	0x2                	MOVLW	0x02
002dcc   d120     bra	0x300e               	BRA	_00124_DS_
                                           _00111_DS_:
002dce   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	277; brtos/BRTOS.c	if (currentTask)
002dd0   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002dd2   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002dd4   d11b     bra	0x300c               	BRA	_00122_DS_
                                           ;	.line	280; brtos/BRTOS.c	if (time_wait > 0)
002dd6   5000     movf	0, 0, 0             	MOVF	r0x00, W
002dd8   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
002dda   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002ddc   d115     bra	0x3008               	BRA	_00119_DS_
                                           ;	.line	282; brtos/BRTOS.c	OSEnterCritical();
002dde   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	293; brtos/BRTOS.c	timeout = (INT32U)((INT32U)counter + (INT32U)time_wait);
002de0   c2fe     movff	0x2fe, 0x5         	MOVFF	_counter, r0x05
002de2   f005
002de4   c2ff     movff	0x2ff, 0x6         	MOVFF	(_counter + 1), r0x06
002de6   f006
002de8   6a07     clrf	0x7, 0              	CLRF	r0x07
002dea   6a08     clrf	0x8, 0              	CLRF	r0x08
002dec   6a09     clrf	0x9, 0              	CLRF	r0x09
002dee   6a0a     clrf	0xa, 0              	CLRF	r0x0a
002df0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002df2   2405     addwf	0x5, 0, 0          	ADDWF	r0x05, W
002df4   6e00     movwf	0, 0               	MOVWF	r0x00
002df6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
002df8   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
002dfa   6e01     movwf	0x1, 0             	MOVWF	r0x01
002dfc   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002dfe   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
002e00   6e05     movwf	0x5, 0             	MOVWF	r0x05
002e02   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002e04   2008     addwfc	0x8, 0, 0         	ADDWFC	r0x08, W
002e06   6e06     movwf	0x6, 0             	MOVWF	r0x06
                                           ;	.line	295; brtos/BRTOS.c	if (timeout >= TickCountOverFlow)
002e08   0e00     movlw	0                  	MOVLW	0x00
002e0a   5c06     subwf	0x6, 0, 0          	SUBWF	r0x06, W
002e0c   e108     bnz	0x2e1e               	BNZ	_00131_DS_
002e0e   0e00     movlw	0                  	MOVLW	0x00
002e10   5c05     subwf	0x5, 0, 0          	SUBWF	r0x05, W
002e12   e105     bnz	0x2e1e               	BNZ	_00131_DS_
002e14   0efa     movlw	0xfa               	MOVLW	0xfa
002e16   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
002e18   e102     bnz	0x2e1e               	BNZ	_00131_DS_
002e1a   0e00     movlw	0                  	MOVLW	0x00
002e1c   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00131_DS_:
002e1e   e320     bnc	0x2e60               	BNC	_00113_DS_
                                           ;	.line	297; brtos/BRTOS.c	Task->TimeToWait = (INT16U)(timeout - TickCountOverFlow);
002e20   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e22   0f07     addlw	0x7                	ADDLW	0x07
002e24   6e07     movwf	0x7, 0             	MOVWF	r0x07
002e26   0e00     movlw	0                  	MOVLW	0x00
002e28   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
002e2a   6e08     movwf	0x8, 0             	MOVWF	r0x08
002e2c   0e00     movlw	0                  	MOVLW	0x00
002e2e   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
002e30   6e09     movwf	0x9, 0             	MOVWF	r0x09
002e32   5000     movf	0, 0, 0             	MOVF	r0x00, W
002e34   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002e36   0e06     movlw	0x6                	MOVLW	0x06
002e38   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
002e3a   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
002e3c   0eff     movlw	0xff               	MOVLW	0xff
002e3e   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
002e40   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
002e42   0eff     movlw	0xff               	MOVLW	0xff
002e44   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
002e46   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002e48   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002e4a   ffe5
002e4c   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
002e4e   fff4
002e50   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
002e52   ffe9
002e54   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
002e56   fff3
002e58   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002e5a   ecb3     call	0x6f66, 0           	CALL	__gptrput2
002e5c   f037
002e5e   d014     bra	0x2e88               	BRA	_00114_DS_
                                           _00113_DS_:
                                           ;	.line	301; brtos/BRTOS.c	Task->TimeToWait = (INT16U)timeout;
002e60   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002e62   0f07     addlw	0x7                	ADDLW	0x07
002e64   6e07     movwf	0x7, 0             	MOVWF	r0x07
002e66   0e00     movlw	0                  	MOVLW	0x00
002e68   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
002e6a   6e08     movwf	0x8, 0             	MOVWF	r0x08
002e6c   0e00     movlw	0                  	MOVLW	0x00
002e6e   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
002e70   6e09     movwf	0x9, 0             	MOVWF	r0x09
002e72   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002e74   ffe5
002e76   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
002e78   fff4
002e7a   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
002e7c   ffe9
002e7e   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
002e80   fff3
002e82   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002e84   ecb3     call	0x6f66, 0           	CALL	__gptrput2
002e86   f037
                                           _00114_DS_:
002e88   0103     movlb	0x3                	BANKSEL	_Tail
                                           ;	.line	305; brtos/BRTOS.c	IncludeTaskIntoDelayList();
002e8a   51ec     movf	0xec, 0, 0x1        	MOVF	_Tail, W, B
002e8c   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
002e8e   11ed     iorwf	0xed, 0, 0x1       	IORWF	(_Tail + 1), W, B
002e90   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
002e92   11ee     iorwf	0xee, 0, 0x1       	IORWF	(_Tail + 2), W, B
002e94   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002e96   d04f     bra	0x2f36               	BRA	_00116_DS_
002e98   c3ec     movff	0x3ec, 0           	MOVFF	_Tail, r0x00
002e9a   f000
002e9c   c3ed     movff	0x3ed, 0x1         	MOVFF	(_Tail + 1), r0x01
002e9e   f001
002ea0   c3ee     movff	0x3ee, 0x5         	MOVFF	(_Tail + 2), r0x05
002ea2   f005
002ea4   0e0a     movlw	0xa                	MOVLW	0x0a
002ea6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002ea8   0e00     movlw	0                  	MOVLW	0x00
002eaa   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002eac   0e00     movlw	0                  	MOVLW	0x00
002eae   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002eb0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002eb2   ffe5
002eb4   c003     movff	0x3, 0xff4         	MOVFF	r0x03, PRODH
002eb6   fff4
002eb8   c004     movff	0x4, 0xff6         	MOVFF	r0x04, TBLPTRL
002eba   fff6
002ebc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002ebe   ffe9
002ec0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002ec2   fff3
002ec4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002ec6   ec99     call	0x6f32, 0           	CALL	__gptrput3
002ec8   f037
002eca   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ecc   0f0d     addlw	0xd                	ADDLW	0x0d
002ece   6e00     movwf	0, 0               	MOVWF	r0x00
002ed0   0e00     movlw	0                  	MOVLW	0x00
002ed2   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
002ed4   6e01     movwf	0x1, 0             	MOVWF	r0x01
002ed6   0e00     movlw	0                  	MOVLW	0x00
002ed8   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
002eda   6e05     movwf	0x5, 0             	MOVWF	r0x05
002edc   c3ec     movff	0x3ec, 0xfe5       	MOVFF	_Tail, POSTDEC1
002ede   ffe5
002ee0   c3ed     movff	0x3ed, 0xff4       	MOVFF	(_Tail + 1), PRODH
002ee2   fff4
002ee4   c3ee     movff	0x3ee, 0xff6       	MOVFF	(_Tail + 2), TBLPTRL
002ee6   fff6
002ee8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002eea   ffe9
002eec   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002eee   fff3
002ef0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002ef2   ec99     call	0x6f32, 0           	CALL	__gptrput3
002ef4   f037
002ef6   c002     movff	0x2, 0x3ec         	MOVFF	r0x02, _Tail
002ef8   f3ec
002efa   c003     movff	0x3, 0x3ed         	MOVFF	r0x03, (_Tail + 1)
002efc   f3ed
002efe   c004     movff	0x4, 0x3ee         	MOVFF	r0x04, (_Tail + 2)
002f00   f3ee
002f02   c3ec     movff	0x3ec, 0           	MOVFF	_Tail, r0x00
002f04   f000
002f06   c3ed     movff	0x3ed, 0x1         	MOVFF	(_Tail + 1), r0x01
002f08   f001
002f0a   c3ee     movff	0x3ee, 0x5         	MOVFF	(_Tail + 2), r0x05
002f0c   f005
002f0e   0e0a     movlw	0xa                	MOVLW	0x0a
002f10   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002f12   0e00     movlw	0                  	MOVLW	0x00
002f14   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002f16   0e00     movlw	0                  	MOVLW	0x00
002f18   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002f1a   0e00     movlw	0                  	MOVLW	0x00
002f1c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f1e   0e00     movlw	0                  	MOVLW	0x00
002f20   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002f22   0e00     movlw	0                  	MOVLW	0x00
002f24   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
002f26   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002f28   ffe9
002f2a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002f2c   fff3
002f2e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002f30   ec99     call	0x6f32, 0           	CALL	__gptrput3
002f32   f037
002f34   d038     bra	0x2fa6               	BRA	_00117_DS_
                                           _00116_DS_:
002f36   c002     movff	0x2, 0x3ec         	MOVFF	r0x02, _Tail
002f38   f3ec
002f3a   c003     movff	0x3, 0x3ed         	MOVFF	r0x03, (_Tail + 1)
002f3c   f3ed
002f3e   c004     movff	0x4, 0x3ee         	MOVFF	r0x04, (_Tail + 2)
002f40   f3ee
002f42   c002     movff	0x2, 0x3ef         	MOVFF	r0x02, _Head
002f44   f3ef
002f46   c003     movff	0x3, 0x3f0         	MOVFF	r0x03, (_Head + 1)
002f48   f3f0
002f4a   c004     movff	0x4, 0x3f1         	MOVFF	r0x04, (_Head + 2)
002f4c   f3f1
002f4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f50   0f0a     addlw	0xa                	ADDLW	0x0a
002f52   6e00     movwf	0, 0               	MOVWF	r0x00
002f54   0e00     movlw	0                  	MOVLW	0x00
002f56   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
002f58   6e01     movwf	0x1, 0             	MOVWF	r0x01
002f5a   0e00     movlw	0                  	MOVLW	0x00
002f5c   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
002f5e   6e05     movwf	0x5, 0             	MOVWF	r0x05
002f60   0e00     movlw	0                  	MOVLW	0x00
002f62   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f64   0e00     movlw	0                  	MOVLW	0x00
002f66   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002f68   0e00     movlw	0                  	MOVLW	0x00
002f6a   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
002f6c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002f6e   ffe9
002f70   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002f72   fff3
002f74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002f76   ec99     call	0x6f32, 0           	CALL	__gptrput3
002f78   f037
002f7a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002f7c   0f0d     addlw	0xd                	ADDLW	0x0d
002f7e   6e00     movwf	0, 0               	MOVWF	r0x00
002f80   0e00     movlw	0                  	MOVLW	0x00
002f82   2003     addwfc	0x3, 0, 0         	ADDWFC	r0x03, W
002f84   6e01     movwf	0x1, 0             	MOVWF	r0x01
002f86   0e00     movlw	0                  	MOVLW	0x00
002f88   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
002f8a   6e05     movwf	0x5, 0             	MOVWF	r0x05
002f8c   0e00     movlw	0                  	MOVLW	0x00
002f8e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002f90   0e00     movlw	0                  	MOVLW	0x00
002f92   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002f94   0e00     movlw	0                  	MOVLW	0x00
002f96   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
002f98   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002f9a   ffe9
002f9c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002f9e   fff3
002fa0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002fa2   ec99     call	0x6f32, 0           	CALL	__gptrput3
002fa4   f037
                                           _00117_DS_:
                                           ;	.line	312; brtos/BRTOS.c	OSReadyList = OSReadyList & ~(PriorityMask[Task->Priority]);
002fa6   0e09     movlw	0x9                	MOVLW	0x09
002fa8   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
002faa   0e00     movlw	0                  	MOVLW	0x00
002fac   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
002fae   0e00     movlw	0                  	MOVLW	0x00
002fb0   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002fb2   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
002fb4   ffe9
002fb6   c003     movff	0x3, 0xff3         	MOVFF	r0x03, PRODL
002fb8   fff3
002fba   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002fbc   ec78     call	0x6ef0, 0           	CALL	__gptrget1
002fbe   f037
002fc0   6e02     movwf	0x2, 0             	MOVWF	r0x02
                                           ; ;multiply lit val:0x02 by variable r0x02 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002fc2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
002fc4   3602     rlcf	0x2, 0x1, 0         	RLCF	r0x02, F
002fc6   6a00     clrf	0, 0                	CLRF	r0x00
002fc8   6a01     clrf	0x1, 0              	CLRF	r0x01
002fca   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
002fcc   2602     addwf	0x2, 0x1, 0        	ADDWF	r0x02, F
002fce   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
002fd0   2200     addwfc	0, 0x1, 0         	ADDWFC	r0x00, F
002fd2   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
002fd4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002fd6   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
002fd8   fff6
002fda   c000     movff	0, 0xff7           	MOVFF	r0x00, TBLPTRH
002fdc   fff7
002fde   c001     movff	0x1, 0xff8         	MOVFF	r0x01, TBLPTRU
002fe0   fff8
002fe2   0009     tblrd	*+                 	TBLRD*+	
002fe4   cff5     movff	0xff5, 0x2         	MOVFF	TABLAT, r0x02
002fe6   f002
002fe8   0009     tblrd	*+                 	TBLRD*+	
002fea   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
002fec   f000
002fee   1e02     comf	0x2, 0x1, 0         	COMF	r0x02, F
002ff0   1e00     comf	0, 0x1, 0           	COMF	r0x00, F
002ff2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002ff4   0102     movlb	0x2                	BANKSEL	_OSReadyList
002ff6   1799     andwf	0x99, 0x1, 0x1     	ANDWF	_OSReadyList, F, B
002ff8   5000     movf	0, 0, 0             	MOVF	r0x00, W
002ffa   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
002ffc   179a     andwf	0x9a, 0x1, 0x1     	ANDWF	(_OSReadyList + 1), F, B
                                           ;	.line	316; brtos/BRTOS.c	ChangeContext();
002ffe   ec82     call	0x4b04, 0           	CALL	_SwitchContext
003000   f025
                                           ;	.line	318; brtos/BRTOS.c	OSExitCritical();
003002   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	320; brtos/BRTOS.c	return OK;
003004   6ae8     clrf	0xe8, 0             	CLRF	WREG
003006   d003     bra	0x300e               	BRA	_00124_DS_
                                           _00119_DS_:
                                           ;	.line	324; brtos/BRTOS.c	return NO_TASK_DELAY;
003008   0e09     movlw	0x9                	MOVLW	0x09
00300a   d001     bra	0x300e               	BRA	_00124_DS_
                                           _00122_DS_:
                                           ;	.line	329; brtos/BRTOS.c	return NOT_VALID_TASK;
00300c   0e08     movlw	0x8                	MOVLW	0x08
                                           _00124_DS_:
00300e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
003010   f00d
003012   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003014   f00c
003016   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003018   f00b
00301a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00301c   f00a
00301e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003020   f009
003022   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003024   f008
003026   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003028   f007
00302a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00302c   f006
00302e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003030   f005
003032   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003034   f004
003036   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003038   f003
00303a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00303c   f002
00303e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003040   f001
003042   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003044   f000
003046   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003048   ffd9
00304a   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
00304c   ffda
00304e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_BRTOS__OSSchedule	code
                                           _OSSchedule:
                                           ;	.line	241; brtos/BRTOS.c	INT8U OSSchedule(void)
006a58   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006a5a   ffe5
006a5c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006a5e   ffe5
006a60   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006a62   ffda
006a64   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006a66   ffd9
006a68   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006a6a   ffe5
006a6c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006a6e   ffe5
006a70   0102     movlb	0x2                	BANKSEL	_OSBlockedList
                                           ;	.line	246; brtos/BRTOS.c	Priority = SAScheduler(OSReadyList & OSBlockedList);
006a72   519b     movf	0x9b, 0, 0x1        	MOVF	_OSBlockedList, W, B
006a74   0102     movlb	0x2                	BANKSEL	_OSReadyList
006a76   1599     andwf	0x99, 0, 0x1       	ANDWF	_OSReadyList, W, B
006a78   6e00     movwf	0, 0               	MOVWF	r0x00
006a7a   0102     movlb	0x2                	BANKSEL	(_OSBlockedList + 1)
006a7c   519c     movf	0x9c, 0, 0x1        	MOVF	(_OSBlockedList + 1), W, B
006a7e   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
006a80   159a     andwf	0x9a, 0, 0x1       	ANDWF	(_OSReadyList + 1), W, B
006a82   6e01     movwf	0x1, 0             	MOVWF	r0x01
006a84   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006a86   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a88   5000     movf	0, 0, 0             	MOVF	r0x00, W
006a8a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006a8c   ecef     call	0x4dde, 0           	CALL	_SAScheduler
006a8e   f026
006a90   6e00     movwf	0, 0               	MOVWF	r0x00
006a92   0e02     movlw	0x2                	MOVLW	0x02
006a94   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006a96   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006a98   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	247; brtos/BRTOS.c	TaskSelect = PriorityVector[Priority];
006a9a   6a01     clrf	0x1, 0              	CLRF	r0x01
006a9c   0ea4     movlw	0xa4               	MOVLW	LOW(_PriorityVector)
006a9e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
006aa0   0e03     movlw	0x3                	MOVLW	HIGH(_PriorityVector)
006aa2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
006aa4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
006aa6   ffe9
006aa8   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
006aaa   ffea
006aac   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
006aae   f000
                                           ;	.line	249; brtos/BRTOS.c	return TaskSelect;
006ab0   5000     movf	0, 0, 0             	MOVF	r0x00, W
006ab2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006ab4   f001
006ab6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006ab8   f000
006aba   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006abc   ffd9
006abe   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006ac0   ffda
006ac2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _PriorityMask:
006de6   0001     dw	0x1  ;unknown opcode  	DB	0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00
006de8   0002     dw	0x2  ;unknown opcode  
006dea   0004     clrwdt                   
006dec   0008     tblrd	*                  
006dee   0010     retfie	0                 
006df0   0020     dw	0x20  ;unknown opcode 
006df2   0040     dw	0x40  ;unknown opcode 	DB	0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08
006df4   0080     dw	0x80  ;unknown opcode 
006df6   0100     movlb	0                  
006df8   0200     mulwf	0, 0               
006dfa   0400     decf	0, 0, 0             
006dfc   0800     sublw	0                  
006dfe   1000     iorwf	0, 0, 0            	DB	0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80
006e00   2000     addwfc	0, 0, 0           
006e02   4000     rrncf	0, 0, 0            
006e04   8000     bsf	0, 0, 0              
                                           ; ; Starting pCode block
                                           __str_0:
006e06   5242     movf	0x42, 0x1, 0        	DB	0x42, 0x52, 0x54, 0x4f, 0x53, 0x20, 0x56, 0x65, 0x72, 0x2e, 0x20, 0x31
006e08   4f54     dcfsnz	0x54, 0x1, 0x1    
006e0a   2053     addwfc	0x53, 0, 0        
006e0c   6556     cpfsgt	0x56, 0x1         
006e0e   2e72     decfsz	0x72, 0x1, 0      
006e10   3120     rrcf	0x20, 0, 0x1        
006e12   362e     rlcf	0x2e, 0x1, 0        	DB	0x2e, 0x36, 0x34, 0x00
006e14   0034     dw	0x34  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 6216 (0x1848) bytes ( 4.74%)
                                           ;           	 3108 (0x0c24) words
                                           ; udata size:	  509 (0x01fd) bytes (39.77%)
                                           ; access size:	   22 (0x0016) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:13 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _TickTimerSetup
                                           	global _SwitchContext
                                           	global _CreateVirtualStack
                                           	global _TickTimerHandler
                                           	global _SPvalue
                                           	global _HighInterrupt
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _OS_TICK_HANDLER
                                           	extern _OSSchedule
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _SPvalue	db	0x00, 0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_HAL__TickTimerHandler	code
                                           _TickTimerHandler:
                                           ;	.line	228; hal/HAL.c	void TickTimerHandler(void)
004330   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
004332   ffe5
004334   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004336   ffe5
004338   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00433a   ffda
00433c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00433e   ffd9
004340   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004342   ffe5
004344   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004346   ffe5
004348   cfd8     movff	0xfd8, 0xfe4       	MOVFF _STATUS, PREINC1 
00434a   ffe4
00434c   cfe8     movff	0xfe8, 0xfe4       	MOVFF _WREG, PREINC1 
00434e   ffe4
004350   cfe0     movff	0xfe0, 0xfe4       	MOVFF _BSR, PREINC1 
004352   ffe4
004354   cfda     movff	0xfda, 0xfe4       	MOVFF _FSR2H, PREINC1 
004356   ffe4
004358   cfe2     movff	0xfe2, 0xfda       	MOVFF _FSR1H, _FSR2H 
00435a   ffda
00435c   cfd9     movff	0xfd9, 0xfe4       	MOVFF _FSR2L, PREINC1 
00435e   ffe4
004360   cfe9     movff	0xfe9, 0xfe4       	MOVFF _FSR0L, PREINC1 
004362   ffe4
004364   cfea     movff	0xfea, 0xfe4       	MOVFF _FSR0H, PREINC1 
004366   ffe4
004368   cff5     movff	0xff5, 0xfe4       	MOVFF _TABLAT, PREINC1 
00436a   ffe4
00436c   cff6     movff	0xff6, 0xfe4       	MOVFF _TBLPTRL, PREINC1 
00436e   ffe4
004370   cff7     movff	0xff7, 0xfe4       	MOVFF _TBLPTRH, PREINC1 
004372   ffe4
004374   cff8     movff	0xff8, 0xfe4       	MOVFF _TBLPTRU, PREINC1 
004376   ffe4
004378   cff3     movff	0xff3, 0xfe4       	MOVFF _PRODL, PREINC1 
00437a   ffe4
00437c   cff4     movff	0xff4, 0xfe4       	MOVFF _PRODH, PREINC1 
00437e   ffe4
004380   cffa     movff	0xffa, 0xfe4       	MOVFF _PCLATH, PREINC1 
004382   ffe4
004384   cffb     movff	0xffb, 0xfe4       	MOVFF _PCLATU, PREINC1 
004386   ffe4
004388   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	235; hal/HAL.c	OS_INT_ENTER();
00438a   2bad     incf	0xad, 0x1, 0x1      	INCF	_iNesting, F, B
                                           ;	.line	238; hal/HAL.c	TICKTIMER_INT_HANDLER;
00438c   949e     bcf	0x9e, 0x2, 0         	BCF	_PIR1bits, 2
00438e   0102     movlb	0x2                	BANKSEL	_counter
                                           ;	.line	240; hal/HAL.c	counter++;
004390   2bfe     incf	0xfe, 0x1, 0x1      	INCF	_counter, F, B
004392   e302     bnc	0x4398               	BNC	_10147_DS_
004394   0102     movlb	0x2                	BANKSEL	(_counter + 1)
004396   2bff     incf	0xff, 0x1, 0x1      	INCF	(_counter + 1), F, B
                                           _10147_DS_:
004398   0102     movlb	0x2                	BANKSEL	_counter
                                           ;	.line	241; hal/HAL.c	if (counter == TickCountOverFlow) counter = 0;
00439a   51fe     movf	0xfe, 0, 0x1        	MOVF	_counter, W, B
00439c   e104     bnz	0x43a6               	BNZ	_00168_DS_
00439e   0102     movlb	0x2                	BANKSEL	(_counter + 1)
0043a0   51ff     movf	0xff, 0, 0x1        	MOVF	(_counter + 1), W, B
0043a2   0afa     xorlw	0xfa               	XORLW	0xfa
0043a4   e001     bz	0x43a8                	BZ	_00169_DS_
                                           _00168_DS_:
0043a6   d004     bra	0x43b0               	BRA	_00148_DS_
                                           _00169_DS_:
0043a8   0102     movlb	0x2                	BANKSEL	_counter
0043aa   6bfe     clrf	0xfe, 0x1           	CLRF	_counter, B
0043ac   0102     movlb	0x2                	BANKSEL	(_counter + 1)
0043ae   6bff     clrf	0xff, 0x1           	CLRF	(_counter + 1), B
                                           _00148_DS_:
                                           ;	.line	261; hal/HAL.c	OS_TICK_HANDLER();
0043b0   ecc9     call	0x1b92, 0           	CALL	_OS_TICK_HANDLER
0043b2   f00d
0043b4   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	266; hal/HAL.c	OS_INT_EXIT();  
0043b6   07ad     decf	0xad, 0x1, 0x1      	DECF	_iNesting, F, B
0043b8   0102     movlb	0x2                	BANKSEL	_iNesting
0043ba   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0043bc   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0043be   d05f     bra	0x447e               	BRA	_00158_DS_
0043c0   ec2c     call	0x6a58, 0           	CALL	_OSSchedule
0043c2   f035
0043c4   0104     movlb	0x4                	BANKSEL	_SelectedTask
0043c6   6f03     movwf	0x3, 0x1           	MOVWF	_SelectedTask, B
0043c8   0104     movlb	0x4                	BANKSEL	_currentTask
0043ca   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0043cc   0104     movlb	0x4                	BANKSEL	_SelectedTask
0043ce   1903     xorwf	0x3, 0, 0x1        	XORWF	_SelectedTask, W, B
0043d0   e101     bnz	0x43d4               	BNZ	_00171_DS_
0043d2   d055     bra	0x447e               	BRA	_00158_DS_
                                           _00170_DS_:
                                           _00171_DS_:
0043d4   cffc     movff	0xffc, 0xfe9       	MOVFF _STKPTR, _FSR0L 
0043d6   ffe9
                                           _00149_DS_:
0043d8   50fc     movf	0xfc, 0, 0          	MOVF	_STKPTR, W
0043da   e008     bz	0x43ec                	BZ	_00151_DS_
0043dc   cffd     movff	0xffd, 0xfe4       	MOVFF _TOSL, _PREINC1 
0043de   ffe4
0043e0   cffe     movff	0xffe, 0xfe4       	MOVFF _TOSH, _PREINC1 
0043e2   ffe4
0043e4   cfff     movff	0xfff, 0xfe4       	MOVFF _TOSU, _PREINC1 
0043e6   ffe4
0043e8   0006     pop                      	POP 
0043ea   d7f6     bra	0x43d8               	BRA	_00149_DS_
                                           _00151_DS_:
0043ec   cfe9     movff	0xfe9, 0xfe4       	MOVFF _FSR0L, _PREINC1 
0043ee   ffe4
0043f0   52e4     movf	0xe4, 0x1, 0        	MOVF _PREINC1, 1, 0 
0043f2   cfe1     movff	0xfe1, 0x2ae       	MOVFF _FSR1L, _SPvalue 
0043f4   f2ae
0043f6   cfe2     movff	0xfe2, 0x2af       	MOVFF _FSR1H, _SPvalue+1 
0043f8   f2af
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0043fa   0104     movlb	0x4                	BANKSEL	_currentTask
0043fc   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0043fe   0d10     mullw	0x10               	MULLW	0x10
004400   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
004402   f000
004404   6a01     clrf	0x1, 0              	CLRF	r0x01
004406   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
004408   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00440a   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
00440c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00440e   0e03     movlw	0x3                	MOVLW	0x03
004410   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004412   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004414   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004416   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004418   ffe9
00441a   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00441c   ffea
00441e   c2ae     movff	0x2ae, 0xfee       	MOVFF	_SPvalue, POSTINC0
004420   ffee
004422   c2af     movff	0x2af, 0xfef       	MOVFF	(_SPvalue + 1), INDF0
004424   ffef
004426   c403     movff	0x403, 0x404       	MOVFF	_SelectedTask, _currentTask
004428   f404
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00442a   0104     movlb	0x4                	BANKSEL	_currentTask
00442c   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
00442e   0d10     mullw	0x10               	MULLW	0x10
004430   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
004432   f000
004434   6a01     clrf	0x1, 0              	CLRF	r0x01
004436   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
004438   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00443a   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
00443c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00443e   0e03     movlw	0x3                	MOVLW	0x03
004440   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004442   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004444   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004446   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004448   ffe9
00444a   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00444c   ffea
00444e   cfee     movff	0xfee, 0x2ae       	MOVFF	POSTINC0, _SPvalue
004450   f2ae
004452   cfef     movff	0xfef, 0x2af       	MOVFF	INDF0, (_SPvalue + 1)
004454   f2af
004456   c2ae     movff	0x2ae, 0xfe1       	MOVFF _SPvalue, _FSR1L 
004458   ffe1
00445a   c2af     movff	0x2af, 0xfe2       	MOVFF _SPvalue+1, _FSR1H 
00445c   ffe2
00445e   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
004460   ffe9
004462   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
004464   ffe9
004466   6afc     clrf	0xfc, 0             	CLRF	_STKPTR
                                           _00152_DS_:
004468   50e9     movf	0xe9, 0, 0          	MOVF	_FSR0L, W
00446a   5cfc     subwf	0xfc, 0, 0         	SUBWF	_STKPTR, W
00446c   e208     bc	0x447e                	BC	_00158_DS_
00446e   0005     push                     	PUSH 
004470   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004472   6eff     movwf	0xff, 0            	MOVWF _TOSU, 0 
004474   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004476   6efe     movwf	0xfe, 0            	MOVWF _TOSH, 0 
004478   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
00447a   6efd     movwf	0xfd, 0            	MOVWF _TOSL, 0 
00447c   d7f5     bra	0x4468               	BRA	_00152_DS_
                                           _00158_DS_:
00447e   cfe5     movff	0xfe5, 0xffb       	MOVFF POSTDEC1, _PCLATU 
004480   fffb
004482   cfe5     movff	0xfe5, 0xffa       	MOVFF POSTDEC1, _PCLATH 
004484   fffa
004486   cfe5     movff	0xfe5, 0xff4       	MOVFF POSTDEC1, _PRODH 
004488   fff4
00448a   cfe5     movff	0xfe5, 0xff3       	MOVFF POSTDEC1, _PRODL 
00448c   fff3
00448e   cfe5     movff	0xfe5, 0xff8       	MOVFF POSTDEC1, _TBLPTRU 
004490   fff8
004492   cfe5     movff	0xfe5, 0xff7       	MOVFF POSTDEC1, _TBLPTRH 
004494   fff7
004496   cfe5     movff	0xfe5, 0xff6       	MOVFF POSTDEC1, _TBLPTRL 
004498   fff6
00449a   cfe5     movff	0xfe5, 0xff5       	MOVFF POSTDEC1, _TABLAT 
00449c   fff5
00449e   cfe5     movff	0xfe5, 0xfea       	MOVFF POSTDEC1, _FSR0H 
0044a0   ffea
0044a2   cfe5     movff	0xfe5, 0xfe9       	MOVFF POSTDEC1, _FSR0L 
0044a4   ffe9
0044a6   cfe5     movff	0xfe5, 0xfd9       	MOVFF POSTDEC1, _FSR2L 
0044a8   ffd9
0044aa   cfe5     movff	0xfe5, 0xfda       	MOVFF POSTDEC1, _FSR2H 
0044ac   ffda
0044ae   cfda     movff	0xfda, 0xfe2       	MOVFF _FSR2H, _FSR1H 
0044b0   ffe2
0044b2   cfe5     movff	0xfe5, 0xfe0       	MOVFF POSTDEC1, _BSR 
0044b4   ffe0
0044b6   cfe5     movff	0xfe5, 0xfe8       	MOVFF POSTDEC1, _WREG 
0044b8   ffe8
0044ba   cfe5     movff	0xfe5, 0xfd8       	MOVFF POSTDEC1, _STATUS 
0044bc   ffd8
0044be   0010     retfie	0                 	RETFIE 0 
0044c0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0044c2   f001
0044c4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0044c6   f000
0044c8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0044ca   ffd9
0044cc   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0044ce   ffda
0044d0   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_HAL__HighInterrupt	code
                                           _HighInterrupt:
                                           ;	.line	204; hal/HAL.c	void HighInterrupt( void )
006e16   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006e18   ffe5
006e1a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006e1c   ffe5
006e1e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006e20   ffda
006e22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006e24   ffd9
                                           ;	.line	207; hal/HAL.c	if( PIR1bits.CCP1IF )
006e26   a49e     btfss	0x9e, 0x2, 0       	BTFSS	_PIR1bits, 2
006e28   d002     bra	0x6e2e               	BRA	_00141_DS_
006e2a   ef98     goto	0x4330              	goto _TickTimerHandler 
006e2c   f021
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           _00141_DS_:
                                           ;	.line	213; hal/HAL.c	if( PIR1bits.RCIF )
006e2e   6ae8     clrf	0xe8, 0             	CLRF	WREG
006e30   ba9e     btfsc	0x9e, 0x5, 0       	BTFSC	_PIR1bits, 5
006e32   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
                                           ; ;;!!! pic16_aopOp:1071 called for a spillLocation -- assigning WREG instead --- CHECK
                                           ;	.line	219; hal/HAL.c	if( PIR1bits.TXIF )
006e34   6ae8     clrf	0xe8, 0             	CLRF	WREG
006e36   b89e     btfsc	0x9e, 0x4, 0       	BTFSC	_PIR1bits, 4
006e38   2ae8     incf	0xe8, 0x1, 0        	INCF	WREG, F
006e3a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006e3c   ffd9
006e3e   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006e40   ffda
006e42   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_HAL__CreateVirtualStack	code
                                           _CreateVirtualStack:
                                           ;	.line	119; hal/HAL.c	void CreateVirtualStack(FctPtr function, INT16U NUMBER_OF_STACKED_BYTES)
0010c6   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0010c8   ffe5
0010ca   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0010cc   ffe5
0010ce   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0010d0   ffda
0010d2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0010d4   ffd9
0010d6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0010d8   ffe5
0010da   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0010dc   ffe5
0010de   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0010e0   ffe5
0010e2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0010e4   ffe5
0010e6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0010e8   ffe5
0010ea   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0010ec   ffe5
0010ee   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0010f0   ffe5
0010f2   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0010f4   ffe5
0010f6   0e03     movlw	0x3                	MOVLW	0x03
0010f8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0010fa   f000
0010fc   0e04     movlw	0x4                	MOVLW	0x04
0010fe   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001100   f001
001102   0e05     movlw	0x5                	MOVLW	0x05
001104   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
001106   f002
                                           ;	.line	122; hal/HAL.c	INT8U *stk = &STACK[iStackAddress];
001108   0e00     movlw	0                  	MOVLW	LOW(_STACK)
00110a   0102     movlb	0x2                	BANKSEL	_iStackAddress
00110c   2593     addwf	0x93, 0, 0x1       	ADDWF	_iStackAddress, W, B
00110e   6e03     movwf	0x3, 0             	MOVWF	r0x03
001110   0e03     movlw	0x3                	MOVLW	HIGH(_STACK)
001112   0102     movlb	0x2                	BANKSEL	(_iStackAddress + 1)
001114   2194     addwfc	0x94, 0, 0x1      	ADDWFC	(_iStackAddress + 1), W, B
001116   6e04     movwf	0x4, 0             	MOVWF	r0x04
001118   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00111a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00111c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00111e   6e05     movwf	0x5, 0             	MOVWF	r0x05
001120   0e80     movlw	0x80               	MOVLW	0x80
001122   6e07     movwf	0x7, 0             	MOVWF	r0x07
                                           ;	.line	125; hal/HAL.c	address = address >> 8;
001124   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001126   6e03     movwf	0x3, 0             	MOVWF	r0x03
001128   6a04     clrf	0x4, 0              	CLRF	r0x04
                                           ;	.line	126; hal/HAL.c	*stk++  = 0xF1;                     // <-- FSR1 Pointer position on function call.
00112a   0ef1     movlw	0xf1               	MOVLW	0xf1
00112c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00112e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001130   ffe9
001132   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001134   fff3
001136   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001138   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00113a   f037
00113c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00113e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001140   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001142   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001144   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	127; hal/HAL.c	*stk++  = 0xA5;                     // STATUS register
001146   0ea5     movlw	0xa5               	MOVLW	0xa5
001148   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00114a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00114c   ffe9
00114e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001150   fff3
001152   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001154   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001156   f037
001158   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00115a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00115c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00115e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001160   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	128; hal/HAL.c	*stk++  = 0x00;                     // W register 
001162   0e00     movlw	0                  	MOVLW	0x00
001164   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001166   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001168   ffe9
00116a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00116c   fff3
00116e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001170   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001172   f037
001174   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001176   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001178   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00117a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00117c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	129; hal/HAL.c	*stk++  = 0xB0;                     // BSR register
00117e   0eb0     movlw	0xb0               	MOVLW	0xb0
001180   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001182   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001184   ffe9
001186   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001188   fff3
00118a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00118c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00118e   f037
001190   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001192   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001194   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001196   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001198   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	130; hal/HAL.c	*stk++  = (INT8U)address;           // FSR2H register
00119a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00119c   ffe5
00119e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0011a0   ffe9
0011a2   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0011a4   fff3
0011a6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0011a8   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0011aa   f037
0011ac   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0011ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011b0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0011b2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011b4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	131; hal/HAL.c	*stk++  = 0xF2;                     // FSR2L register
0011b6   0ef2     movlw	0xf2               	MOVLW	0xf2
0011b8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011ba   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0011bc   ffe9
0011be   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0011c0   fff3
0011c2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0011c4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0011c6   f037
0011c8   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0011ca   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011cc   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0011ce   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011d0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	132; hal/HAL.c	*stk++  = 0xF0;                     // FSR0L register
0011d2   0ef0     movlw	0xf0               	MOVLW	0xf0
0011d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011d6   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0011d8   ffe9
0011da   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0011dc   fff3
0011de   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0011e0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0011e2   f037
0011e4   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0011e6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011e8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0011ea   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0011ec   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	133; hal/HAL.c	*stk++  = 0xF0;                     // FSR0H register
0011ee   0ef0     movlw	0xf0               	MOVLW	0xf0
0011f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0011f2   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0011f4   ffe9
0011f6   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0011f8   fff3
0011fa   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0011fc   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0011fe   f037
001200   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001202   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001204   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001206   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001208   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	134; hal/HAL.c	*stk++  = 0xB2;                     // TABLAT
00120a   0eb2     movlw	0xb2               	MOVLW	0xb2
00120c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00120e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001210   ffe9
001212   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001214   fff3
001216   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001218   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00121a   f037
00121c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00121e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001220   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001222   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001224   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	135; hal/HAL.c	*stk++  = 0xB3;                     // TBLPTRL Prog Mem Table Pointer Low
001226   0eb3     movlw	0xb3               	MOVLW	0xb3
001228   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00122a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00122c   ffe9
00122e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001230   fff3
001232   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001234   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001236   f037
001238   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00123a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00123c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00123e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001240   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	136; hal/HAL.c	*stk++  = 0xB4;                     // TBLPTRH Prog Mem Table Pointer High
001242   0eb4     movlw	0xb4               	MOVLW	0xb4
001244   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001246   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001248   ffe9
00124a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00124c   fff3
00124e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001250   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001252   f037
001254   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001256   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001258   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00125a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00125c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	137; hal/HAL.c	*stk++  = 0xB5;                     // TBLPTRU Prog Mem Table Pointer Upper
00125e   0eb5     movlw	0xb5               	MOVLW	0xb5
001260   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001262   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001264   ffe9
001266   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001268   fff3
00126a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00126c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00126e   f037
001270   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001272   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001274   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001276   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001278   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	138; hal/HAL.c	*stk++  = 0xD0;                     // PRODL Product Reg low
00127a   0ed0     movlw	0xd0               	MOVLW	0xd0
00127c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00127e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001280   ffe9
001282   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001284   fff3
001286   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001288   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00128a   f037
00128c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00128e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001290   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001292   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001294   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	139; hal/HAL.c	*stk++  = 0xD1;                     // PRODH Product Reg high
001296   0ed1     movlw	0xd1               	MOVLW	0xd1
001298   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00129a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00129c   ffe9
00129e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0012a0   fff3
0012a2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012a4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0012a6   f037
0012a8   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0012aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012ac   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0012ae   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012b0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	140; hal/HAL.c	*stk++  = 0xA3;                        // AARGB3
0012b2   0ea3     movlw	0xa3               	MOVLW	0xa3
0012b4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012b6   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0012b8   ffe9
0012ba   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0012bc   fff3
0012be   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012c0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0012c2   f037
0012c4   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0012c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012c8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0012ca   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012cc   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	141; hal/HAL.c	*stk++  = 0xA2;                        // AARGB2
0012ce   0ea2     movlw	0xa2               	MOVLW	0xa2
0012d0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012d2   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0012d4   ffe9
0012d6   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0012d8   fff3
0012da   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012dc   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0012de   f037
0012e0   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0012e2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012e4   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0012e6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0012e8   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	142; hal/HAL.c	*stk++  = 0xA1;                        // AARGB1
0012ea   0ea1     movlw	0xa1               	MOVLW	0xa1
0012ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0012ee   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0012f0   ffe9
0012f2   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0012f4   fff3
0012f6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0012f8   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0012fa   f037
0012fc   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0012fe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001300   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001302   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001304   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	143; hal/HAL.c	*stk++  = 0xA0;                        // AARGB0
001306   0ea0     movlw	0xa0               	MOVLW	0xa0
001308   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00130a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00130c   ffe9
00130e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001310   fff3
001312   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001314   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001316   f037
001318   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00131a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00131c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00131e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001320   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	144; hal/HAL.c	*stk++  = 0xB3;                        // BARGB3
001322   0eb3     movlw	0xb3               	MOVLW	0xb3
001324   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001326   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001328   ffe9
00132a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00132c   fff3
00132e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001330   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001332   f037
001334   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001336   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001338   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00133a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00133c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	145; hal/HAL.c	*stk++  = 0xB2;                        // BARGB2 
00133e   0eb2     movlw	0xb2               	MOVLW	0xb2
001340   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001342   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001344   ffe9
001346   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001348   fff3
00134a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00134c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00134e   f037
001350   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001352   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001354   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001356   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001358   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	146; hal/HAL.c	*stk++  = 0xB1;                        // BARGB1
00135a   0eb1     movlw	0xb1               	MOVLW	0xb1
00135c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00135e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001360   ffe9
001362   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001364   fff3
001366   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001368   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00136a   f037
00136c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00136e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001370   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001372   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001374   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	147; hal/HAL.c	*stk++  = 0xB0;                        // BARGB0
001376   0eb0     movlw	0xb0               	MOVLW	0xb0
001378   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00137a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00137c   ffe9
00137e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001380   fff3
001382   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001384   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001386   f037
001388   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00138a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00138c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00138e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001390   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	148; hal/HAL.c	*stk++  = 0xE3;                        // REMB3
001392   0ee3     movlw	0xe3               	MOVLW	0xe3
001394   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001396   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001398   ffe9
00139a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00139c   fff3
00139e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013a0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0013a2   f037
0013a4   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0013a6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0013a8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0013aa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0013ac   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	149; hal/HAL.c	*stk++  = 0xE2;                        // REMB2 
0013ae   0ee2     movlw	0xe2               	MOVLW	0xe2
0013b0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013b2   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0013b4   ffe9
0013b6   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0013b8   fff3
0013ba   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013bc   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0013be   f037
0013c0   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0013c2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0013c4   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0013c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0013c8   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	150; hal/HAL.c	*stk++  = 0xE1;                        // REMB1
0013ca   0ee1     movlw	0xe1               	MOVLW	0xe1
0013cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013ce   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0013d0   ffe9
0013d2   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0013d4   fff3
0013d6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013d8   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0013da   f037
0013dc   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0013de   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0013e0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0013e2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0013e4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	151; hal/HAL.c	*stk++  = 0xE0;                        // REMB0 
0013e6   0ee0     movlw	0xe0               	MOVLW	0xe0
0013e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0013ea   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0013ec   ffe9
0013ee   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0013f0   fff3
0013f2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0013f4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0013f6   f037
0013f8   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0013fa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0013fc   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0013fe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001400   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	152; hal/HAL.c	*stk++  = 0xFB;                        // __FPFLAGS
001402   0efb     movlw	0xfb               	MOVLW	0xfb
001404   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001406   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001408   ffe9
00140a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00140c   fff3
00140e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001410   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001412   f037
001414   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001416   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001418   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00141a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00141c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	153; hal/HAL.c	*stk++  = 0xFF;                        // SIGN
00141e   0eff     movlw	0xff               	MOVLW	0xff
001420   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001422   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001424   ffe9
001426   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001428   fff3
00142a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00142c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00142e   f037
001430   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001432   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001434   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001436   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001438   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	154; hal/HAL.c	*stk++  = 0xAE;                        // __AEXP
00143a   0eae     movlw	0xae               	MOVLW	0xae
00143c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00143e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001440   ffe9
001442   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001444   fff3
001446   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001448   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00144a   f037
00144c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00144e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001450   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001452   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001454   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	155; hal/HAL.c	*stk++  = 0xBE;                        // __BEXP
001456   0ebe     movlw	0xbe               	MOVLW	0xbe
001458   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00145a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00145c   ffe9
00145e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001460   fff3
001462   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001464   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001466   f037
001468   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00146a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00146c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00146e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001470   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	156; hal/HAL.c	*stk++  = 0xD3;                        // __TEMPB3
001472   0ed3     movlw	0xd3               	MOVLW	0xd3
001474   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001476   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001478   ffe9
00147a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00147c   fff3
00147e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001480   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001482   f037
001484   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001486   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001488   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00148a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00148c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	157; hal/HAL.c	*stk++  = 0xD2;                        // __TEMPB2
00148e   0ed2     movlw	0xd2               	MOVLW	0xd2
001490   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001492   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001494   ffe9
001496   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001498   fff3
00149a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00149c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00149e   f037
0014a0   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0014a2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014a4   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0014a6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014a8   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	158; hal/HAL.c	*stk++  = 0xD1;                        // __TEMPB1
0014aa   0ed1     movlw	0xd1               	MOVLW	0xd1
0014ac   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ae   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0014b0   ffe9
0014b2   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0014b4   fff3
0014b6   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0014b8   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0014ba   f037
0014bc   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0014be   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014c0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0014c2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014c4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	159; hal/HAL.c	*stk++  = 0xD0;                        // __TEMPB0
0014c6   0ed0     movlw	0xd0               	MOVLW	0xd0
0014c8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014ca   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0014cc   ffe9
0014ce   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0014d0   fff3
0014d2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0014d4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0014d6   f037
0014d8   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0014da   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014dc   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0014de   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014e0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	160; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
0014e2   0e10     movlw	0x10               	MOVLW	0x10
0014e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0014e6   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0014e8   ffe9
0014ea   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0014ec   fff3
0014ee   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0014f0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0014f2   f037
0014f4   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0014f6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014f8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0014fa   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0014fc   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	161; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
0014fe   0e10     movlw	0x10               	MOVLW	0x10
001500   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001502   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001504   ffe9
001506   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001508   fff3
00150a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00150c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00150e   f037
001510   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001512   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001514   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001516   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001518   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	162; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
00151a   0e10     movlw	0x10               	MOVLW	0x10
00151c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00151e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001520   ffe9
001522   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001524   fff3
001526   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001528   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00152a   f037
00152c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00152e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001530   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001532   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001534   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	163; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
001536   0e10     movlw	0x10               	MOVLW	0x10
001538   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00153a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00153c   ffe9
00153e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001540   fff3
001542   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001544   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001546   f037
001548   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00154a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00154c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00154e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001550   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	164; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
001552   0e10     movlw	0x10               	MOVLW	0x10
001554   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001556   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001558   ffe9
00155a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00155c   fff3
00155e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001560   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001562   f037
001564   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001566   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001568   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00156a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00156c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	165; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
00156e   0e10     movlw	0x10               	MOVLW	0x10
001570   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001572   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001574   ffe9
001576   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001578   fff3
00157a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00157c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00157e   f037
001580   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001582   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001584   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001586   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001588   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	166; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
00158a   0e10     movlw	0x10               	MOVLW	0x10
00158c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00158e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001590   ffe9
001592   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001594   fff3
001596   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001598   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00159a   f037
00159c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00159e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015a0   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0015a2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015a4   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	167; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
0015a6   0e10     movlw	0x10               	MOVLW	0x10
0015a8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015aa   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0015ac   ffe9
0015ae   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0015b0   fff3
0015b2   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0015b4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0015b6   f037
0015b8   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0015ba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015bc   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0015be   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015c0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	168; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
0015c2   0e10     movlw	0x10               	MOVLW	0x10
0015c4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015c6   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0015c8   ffe9
0015ca   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0015cc   fff3
0015ce   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0015d0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0015d2   f037
0015d4   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0015d6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015d8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0015da   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015dc   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	169; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
0015de   0e10     movlw	0x10               	MOVLW	0x10
0015e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015e2   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0015e4   ffe9
0015e6   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0015e8   fff3
0015ea   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0015ec   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0015ee   f037
0015f0   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0015f2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015f4   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0015f6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0015f8   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	170; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
0015fa   0e10     movlw	0x10               	MOVLW	0x10
0015fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0015fe   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001600   ffe9
001602   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001604   fff3
001606   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001608   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00160a   f037
00160c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00160e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001610   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001612   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001614   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	171; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
001616   0e10     movlw	0x10               	MOVLW	0x10
001618   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00161a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00161c   ffe9
00161e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001620   fff3
001622   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001624   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001626   f037
001628   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00162a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00162c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00162e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001630   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	172; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
001632   0e10     movlw	0x10               	MOVLW	0x10
001634   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001636   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001638   ffe9
00163a   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00163c   fff3
00163e   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001640   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001642   f037
001644   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001646   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001648   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00164a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00164c   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	173; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
00164e   0e10     movlw	0x10               	MOVLW	0x10
001650   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001652   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001654   ffe9
001656   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001658   fff3
00165a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00165c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00165e   f037
001660   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001662   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001664   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001666   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001668   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	174; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
00166a   0e10     movlw	0x10               	MOVLW	0x10
00166c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00166e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001670   ffe9
001672   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001674   fff3
001676   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001678   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00167a   f037
00167c   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00167e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001680   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001682   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001684   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	175; hal/HAL.c	*stk++  = 0x10;                        // __tmp_0
001686   0e10     movlw	0x10               	MOVLW	0x10
001688   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00168a   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00168c   ffe9
00168e   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001690   fff3
001692   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001694   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001696   f037
001698   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
00169a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00169c   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
00169e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016a0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	176; hal/HAL.c	*stk++  = 0xC1;                        // PCLATH
0016a2   0ec1     movlw	0xc1               	MOVLW	0xc1
0016a4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016a6   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0016a8   ffe9
0016aa   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0016ac   fff3
0016ae   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0016b0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0016b2   f037
0016b4   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0016b6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016b8   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0016ba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016bc   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	177; hal/HAL.c	*stk++  = 0xC2;                        // PCLATU
0016be   0ec2     movlw	0xc2               	MOVLW	0xc2
0016c0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0016c2   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0016c4   ffe9
0016c6   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0016c8   fff3
0016ca   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0016cc   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0016ce   f037
0016d0   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0016d2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016d4   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0016d6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016d8   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	180; hal/HAL.c	*stk++  = (INT8U)((INT16U)(function)) & 0x00FF;     // TOSL
0016da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016dc   6e02     movwf	0x2, 0             	MOVWF	r0x02
0016de   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0016e0   ffe5
0016e2   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
0016e4   ffe9
0016e6   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
0016e8   fff3
0016ea   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0016ec   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0016ee   f037
0016f0   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0016f2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016f4   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0016f6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0016f8   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	181; hal/HAL.c	*stk++  = (INT8U)((INT16U)(function) >> 8);         // TOSH
0016fa   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0016fc   6e00     movwf	0, 0               	MOVWF	r0x00
0016fe   6a01     clrf	0x1, 0              	CLRF	r0x01
001700   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001702   ffe5
001704   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001706   ffe9
001708   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
00170a   fff3
00170c   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00170e   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001710   f037
001712   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001714   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001716   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001718   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00171a   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	182; hal/HAL.c	*stk++  = (INT8U)0;                                // TOSU
00171c   0e00     movlw	0                  	MOVLW	0x00
00171e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001720   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
001722   ffe9
001724   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001726   fff3
001728   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00172a   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00172c   f037
00172e   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
001730   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001732   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
001734   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001736   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
                                           ;	.line	184; hal/HAL.c	*stk++  = 0x01;                     // size of return stack - one level deep only
001738   0e01     movlw	0x1                	MOVLW	0x01
00173a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00173c   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
00173e   ffe9
001740   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
001742   fff3
001744   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
001746   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001748   f037
00174a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
00174c   f007
00174e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001750   f006
001752   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001754   f005
001756   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001758   f004
00175a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00175c   f003
00175e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001760   f002
001762   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001764   f001
001766   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001768   f000
00176a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00176c   ffd9
00176e   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
001770   ffda
001772   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_HAL__SwitchContext	code
                                           _SwitchContext:
                                           ;	.line	82; hal/HAL.c	void SwitchContext(void)
004b04   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
004b06   ffe5
004b08   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004b0a   ffe5
004b0c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
004b0e   ffda
004b10   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004b12   ffd9
004b14   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004b16   ffe5
004b18   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004b1a   ffe5
004b1c   cfd8     movff	0xfd8, 0xfe4       	MOVFF _STATUS, PREINC1 
004b1e   ffe4
004b20   cfe8     movff	0xfe8, 0xfe4       	MOVFF _WREG, PREINC1 
004b22   ffe4
004b24   cfe0     movff	0xfe0, 0xfe4       	MOVFF _BSR, PREINC1 
004b26   ffe4
004b28   cfda     movff	0xfda, 0xfe4       	MOVFF _FSR2H, PREINC1 
004b2a   ffe4
004b2c   cfe2     movff	0xfe2, 0xfda       	MOVFF _FSR1H, _FSR2H 
004b2e   ffda
004b30   cfd9     movff	0xfd9, 0xfe4       	MOVFF _FSR2L, PREINC1 
004b32   ffe4
004b34   cfe9     movff	0xfe9, 0xfe4       	MOVFF _FSR0L, PREINC1 
004b36   ffe4
004b38   cfea     movff	0xfea, 0xfe4       	MOVFF _FSR0H, PREINC1 
004b3a   ffe4
004b3c   cff5     movff	0xff5, 0xfe4       	MOVFF _TABLAT, PREINC1 
004b3e   ffe4
004b40   cff6     movff	0xff6, 0xfe4       	MOVFF _TBLPTRL, PREINC1 
004b42   ffe4
004b44   cff7     movff	0xff7, 0xfe4       	MOVFF _TBLPTRH, PREINC1 
004b46   ffe4
004b48   cff8     movff	0xff8, 0xfe4       	MOVFF _TBLPTRU, PREINC1 
004b4a   ffe4
004b4c   cff3     movff	0xff3, 0xfe4       	MOVFF _PRODL, PREINC1 
004b4e   ffe4
004b50   cff4     movff	0xff4, 0xfe4       	MOVFF _PRODH, PREINC1 
004b52   ffe4
004b54   cffa     movff	0xffa, 0xfe4       	MOVFF _PCLATH, PREINC1 
004b56   ffe4
004b58   cffb     movff	0xffb, 0xfe4       	MOVFF _PCLATU, PREINC1 
004b5a   ffe4
004b5c   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	88; hal/HAL.c	OS_INT_ENTER();
004b5e   2bad     incf	0xad, 0x1, 0x1      	INCF	_iNesting, F, B
004b60   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	95; hal/HAL.c	OS_INT_EXIT();
004b62   07ad     decf	0xad, 0x1, 0x1      	DECF	_iNesting, F, B
004b64   0102     movlb	0x2                	BANKSEL	_iNesting
004b66   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
004b68   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004b6a   d05f     bra	0x4c2a               	BRA	_00119_DS_
004b6c   ec2c     call	0x6a58, 0           	CALL	_OSSchedule
004b6e   f035
004b70   0104     movlb	0x4                	BANKSEL	_SelectedTask
004b72   6f03     movwf	0x3, 0x1           	MOVWF	_SelectedTask, B
004b74   0104     movlb	0x4                	BANKSEL	_currentTask
004b76   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
004b78   0104     movlb	0x4                	BANKSEL	_SelectedTask
004b7a   1903     xorwf	0x3, 0, 0x1        	XORWF	_SelectedTask, W, B
004b7c   e101     bnz	0x4b80               	BNZ	_00129_DS_
004b7e   d055     bra	0x4c2a               	BRA	_00119_DS_
                                           _00128_DS_:
                                           _00129_DS_:
004b80   cffc     movff	0xffc, 0xfe9       	MOVFF _STKPTR, _FSR0L 
004b82   ffe9
                                           _00110_DS_:
004b84   50fc     movf	0xfc, 0, 0          	MOVF	_STKPTR, W
004b86   e008     bz	0x4b98                	BZ	_00112_DS_
004b88   cffd     movff	0xffd, 0xfe4       	MOVFF _TOSL, _PREINC1 
004b8a   ffe4
004b8c   cffe     movff	0xffe, 0xfe4       	MOVFF _TOSH, _PREINC1 
004b8e   ffe4
004b90   cfff     movff	0xfff, 0xfe4       	MOVFF _TOSU, _PREINC1 
004b92   ffe4
004b94   0006     pop                      	POP 
004b96   d7f6     bra	0x4b84               	BRA	_00110_DS_
                                           _00112_DS_:
004b98   cfe9     movff	0xfe9, 0xfe4       	MOVFF _FSR0L, _PREINC1 
004b9a   ffe4
004b9c   52e4     movf	0xe4, 0x1, 0        	MOVF _PREINC1, 1, 0 
004b9e   cfe1     movff	0xfe1, 0x2ae       	MOVFF _FSR1L, _SPvalue 
004ba0   f2ae
004ba2   cfe2     movff	0xfe2, 0x2af       	MOVFF _FSR1H, _SPvalue+1 
004ba4   f2af
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004ba6   0104     movlb	0x4                	BANKSEL	_currentTask
004ba8   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
004baa   0d10     mullw	0x10               	MULLW	0x10
004bac   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
004bae   f000
004bb0   6a01     clrf	0x1, 0              	CLRF	r0x01
004bb2   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
004bb4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004bb6   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
004bb8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004bba   0e03     movlw	0x3                	MOVLW	0x03
004bbc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004bbe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004bc0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004bc2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004bc4   ffe9
004bc6   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
004bc8   ffea
004bca   c2ae     movff	0x2ae, 0xfee       	MOVFF	_SPvalue, POSTINC0
004bcc   ffee
004bce   c2af     movff	0x2af, 0xfef       	MOVFF	(_SPvalue + 1), INDF0
004bd0   ffef
004bd2   c403     movff	0x403, 0x404       	MOVFF	_SelectedTask, _currentTask
004bd4   f404
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004bd6   0104     movlb	0x4                	BANKSEL	_currentTask
004bd8   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
004bda   0d10     mullw	0x10               	MULLW	0x10
004bdc   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
004bde   f000
004be0   6a01     clrf	0x1, 0              	CLRF	r0x01
004be2   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
004be4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004be6   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
004be8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004bea   0e03     movlw	0x3                	MOVLW	0x03
004bec   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004bee   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004bf0   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004bf2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004bf4   ffe9
004bf6   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
004bf8   ffea
004bfa   cfee     movff	0xfee, 0x2ae       	MOVFF	POSTINC0, _SPvalue
004bfc   f2ae
004bfe   cfef     movff	0xfef, 0x2af       	MOVFF	INDF0, (_SPvalue + 1)
004c00   f2af
004c02   c2ae     movff	0x2ae, 0xfe1       	MOVFF _SPvalue, _FSR1L 
004c04   ffe1
004c06   c2af     movff	0x2af, 0xfe2       	MOVFF _SPvalue+1, _FSR1H 
004c08   ffe2
004c0a   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
004c0c   ffe9
004c0e   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
004c10   ffe9
004c12   6afc     clrf	0xfc, 0             	CLRF	_STKPTR
                                           _00113_DS_:
004c14   50e9     movf	0xe9, 0, 0          	MOVF	_FSR0L, W
004c16   5cfc     subwf	0xfc, 0, 0         	SUBWF	_STKPTR, W
004c18   e208     bc	0x4c2a                	BC	_00119_DS_
004c1a   0005     push                     	PUSH 
004c1c   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004c1e   6eff     movwf	0xff, 0            	MOVWF _TOSU, 0 
004c20   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004c22   6efe     movwf	0xfe, 0            	MOVWF _TOSH, 0 
004c24   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004c26   6efd     movwf	0xfd, 0            	MOVWF _TOSL, 0 
004c28   d7f5     bra	0x4c14               	BRA	_00113_DS_
                                           _00119_DS_:
004c2a   cfe5     movff	0xfe5, 0xffb       	MOVFF POSTDEC1, _PCLATU 
004c2c   fffb
004c2e   cfe5     movff	0xfe5, 0xffa       	MOVFF POSTDEC1, _PCLATH 
004c30   fffa
004c32   cfe5     movff	0xfe5, 0xff4       	MOVFF POSTDEC1, _PRODH 
004c34   fff4
004c36   cfe5     movff	0xfe5, 0xff3       	MOVFF POSTDEC1, _PRODL 
004c38   fff3
004c3a   cfe5     movff	0xfe5, 0xff8       	MOVFF POSTDEC1, _TBLPTRU 
004c3c   fff8
004c3e   cfe5     movff	0xfe5, 0xff7       	MOVFF POSTDEC1, _TBLPTRH 
004c40   fff7
004c42   cfe5     movff	0xfe5, 0xff6       	MOVFF POSTDEC1, _TBLPTRL 
004c44   fff6
004c46   cfe5     movff	0xfe5, 0xff5       	MOVFF POSTDEC1, _TABLAT 
004c48   fff5
004c4a   cfe5     movff	0xfe5, 0xfea       	MOVFF POSTDEC1, _FSR0H 
004c4c   ffea
004c4e   cfe5     movff	0xfe5, 0xfe9       	MOVFF POSTDEC1, _FSR0L 
004c50   ffe9
004c52   cfe5     movff	0xfe5, 0xfd9       	MOVFF POSTDEC1, _FSR2L 
004c54   ffd9
004c56   cfe5     movff	0xfe5, 0xfda       	MOVFF POSTDEC1, _FSR2H 
004c58   ffda
004c5a   cfda     movff	0xfda, 0xfe2       	MOVFF _FSR2H, _FSR1H 
004c5c   ffe2
004c5e   cfe5     movff	0xfe5, 0xfe0       	MOVFF POSTDEC1, _BSR 
004c60   ffe0
004c62   cfe5     movff	0xfe5, 0xfe8       	MOVFF POSTDEC1, _WREG 
004c64   ffe8
004c66   cfe5     movff	0xfe5, 0xfd8       	MOVFF POSTDEC1, _STATUS 
004c68   ffd8
004c6a   0010     retfie	0                 	RETFIE 0 
004c6c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004c6e   f001
004c70   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004c72   f000
004c74   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004c76   ffd9
004c78   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
004c7a   ffda
004c7c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_HAL__TickTimerSetup	code
                                           _TickTimerSetup:
                                           ;	.line	20; hal/HAL.c	void TickTimerSetup(void)
006e44   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006e46   ffe5
006e48   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006e4a   ffe5
006e4c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006e4e   ffda
006e50   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006e52   ffd9
                                           ;	.line	23; hal/HAL.c	CCPR1 = ( configCPU_INT_CLOCK_HZ / configTICK_RATE_HZ );
006e54   0e40     movlw	0x40               	MOVLW	0x40
006e56   6ebe     movwf	0xbe, 0            	MOVWF	_CCPR1
                                           ;	.line	25; hal/HAL.c	TMR1H = ( unsigned char ) 0x00;
006e58   6acf     clrf	0xcf, 0             	CLRF	_TMR1H
                                           ;	.line	26; hal/HAL.c	TMR1L = ( unsigned char ) 0x00;    
006e5a   6ace     clrf	0xce, 0             	CLRF	_TMR1L
                                           ;	.line	29; hal/HAL.c	CCP1CONbits.CCP1M0 = 1;        /*< Compare match mode. */
006e5c   80bd     bsf	0xbd, 0, 0           	BSF	_CCP1CONbits, 0
                                           ;	.line	30; hal/HAL.c	CCP1CONbits.CCP1M1 = 1;        /*< Compare match mode. */
006e5e   82bd     bsf	0xbd, 0x1, 0         	BSF	_CCP1CONbits, 1
                                           ;	.line	31; hal/HAL.c	CCP1CONbits.CCP1M2 = 0;        /*< Compare match mode. */
006e60   94bd     bcf	0xbd, 0x2, 0         	BCF	_CCP1CONbits, 2
                                           ;	.line	32; hal/HAL.c	CCP1CONbits.CCP1M3 = 1;        /*< Compare match mode. */
006e62   86bd     bsf	0xbd, 0x3, 0         	BSF	_CCP1CONbits, 3
                                           ;	.line	33; hal/HAL.c	PIE1bits.CCP1IE = 1;        /*< Interrupt enable. */
006e64   849d     bsf	0x9d, 0x2, 0         	BSF	_PIE1bits, 2
                                           ;	.line	34; hal/HAL.c	INTCONbits.PEIE = 1;        /*< Enable interrupts */
006e66   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
006e68   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006e6a   ffd9
006e6c   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006e6e   ffda
006e70   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2424 (0x0978) bytes ( 1.85%)
                                           ;           	 1212 (0x04bc) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    8 (0x0008) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:14 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _OSQueueCreate
                                           	global _OSWQueue
                                           	global _OSRQueue
                                           	global _OSCleanQueue
                                           	global _OSQueuePend
                                           	global _OSQueuePost
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput3
                                           	extern __gptrput2
                                           	extern __gptrput1
                                           	extern __gptrget2
                                           	extern __gptrget3
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _SwitchContext
                                           	extern _SAScheduler
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           r0x0f	res	1
                                           r0x10	res	1
                                           r0x11	res	1
                                           r0x12	res	1
                                           r0x13	res	1
                                           r0x14	res	1
                                           r0x15	res	1
                                           r0x16	res	1
                                           r0x17	res	1
                                           r0x18	res	1
                                           r0x19	res	1
                                           r0x1a	res	1
                                           r0x1b	res	1
                                           r0x1c	res	1
                                           r0x1d	res	1
                                           r0x1e	res	1
                                           r0x1f	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_queue__OSQueuePost	code
                                           _OSQueuePost:
                                           ;	.line	499; brtos/queue.c	INT8U OSQueuePost(BRTOS_Queue *pont_event, INT8U newdata)
0026d8   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0026da   ffe5
0026dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0026de   ffe5
0026e0   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0026e2   ffda
0026e4   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0026e6   ffd9
0026e8   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0026ea   ffe5
0026ec   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0026ee   ffe5
0026f0   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0026f2   ffe5
0026f4   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0026f6   ffe5
0026f8   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0026fa   ffe5
0026fc   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0026fe   ffe5
002700   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002702   ffe5
002704   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002706   ffe5
002708   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00270a   ffe5
00270c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00270e   ffe5
002710   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002712   ffe5
002714   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002716   ffe5
002718   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00271a   ffe5
00271c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00271e   ffe5
002720   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002722   ffe5
002724   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
002726   ffe5
002728   0e03     movlw	0x3                	MOVLW	0x03
00272a   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00272c   f000
00272e   0e04     movlw	0x4                	MOVLW	0x04
002730   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002732   f001
002734   0e05     movlw	0x5                	MOVLW	0x05
002736   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002738   f002
00273a   0e06     movlw	0x6                	MOVLW	0x06
00273c   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
00273e   f003
                                           ;	.line	506; brtos/queue.c	OS_QUEUE *cqueue = pont_event->OSEventPointer;
002740   5000     movf	0, 0, 0             	MOVF	r0x00, W
002742   0f03     addlw	0x3                	ADDLW	0x03
002744   6e04     movwf	0x4, 0             	MOVWF	r0x04
002746   0e00     movlw	0                  	MOVLW	0x00
002748   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00274a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00274c   0e00     movlw	0                  	MOVLW	0x00
00274e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002750   6e06     movwf	0x6, 0             	MOVWF	r0x06
002752   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
002754   ffe9
002756   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
002758   fff3
00275a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00275c   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
00275e   f036
002760   6e04     movwf	0x4, 0             	MOVWF	r0x04
002762   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
002764   f005
002766   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
002768   f006
00276a   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	518; brtos/queue.c	if (!iNesting)
00276c   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00276e   e101     bnz	0x2772               	BNZ	_00271_DS_
                                           ;	.line	520; brtos/queue.c	OSEnterCritical();
002770   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00271_DS_:
                                           ;	.line	549; brtos/queue.c	if (cqueue->OSQEntries < cqueue->OSQSize)
002772   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002774   0f11     addlw	0x11               	ADDLW	0x11
002776   6e07     movwf	0x7, 0             	MOVWF	r0x07
002778   0e00     movlw	0                  	MOVLW	0x00
00277a   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00277c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00277e   0e00     movlw	0                  	MOVLW	0x00
002780   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
002782   6e09     movwf	0x9, 0             	MOVWF	r0x09
002784   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
002786   ffe9
002788   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
00278a   fff3
00278c   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00278e   ec50     call	0x6ea0, 0           	CALL	__gptrget2
002790   f037
002792   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002794   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002796   f00b
002798   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00279a   0f0f     addlw	0xf                	ADDLW	0x0f
00279c   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
00279e   0e00     movlw	0                  	MOVLW	0x00
0027a0   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0027a2   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0027a4   0e00     movlw	0                  	MOVLW	0x00
0027a6   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
0027a8   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0027aa   c00c     movff	0xc, 0xfe9         	MOVFF	r0x0c, FSR0L
0027ac   ffe9
0027ae   c00d     movff	0xd, 0xff3         	MOVFF	r0x0d, PRODL
0027b0   fff3
0027b2   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0027b4   ec50     call	0x6ea0, 0           	CALL	__gptrget2
0027b6   f037
0027b8   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0027ba   cff3     movff	0xff3, 0xd         	MOVFF	PRODL, r0x0d
0027bc   f00d
0027be   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0027c0   5c0b     subwf	0xb, 0, 0          	SUBWF	r0x0b, W
0027c2   e102     bnz	0x27c8               	BNZ	_00298_DS_
0027c4   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0027c6   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00298_DS_:
0027c8   e20f     bc	0x27e8                	BC	_00275_DS_
                                           ;	.line	552; brtos/queue.c	cqueue->OSQEntries++;
0027ca   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
0027cc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0027ce   2a0b     incf	0xb, 0x1, 0         	INCF	r0x0b, F
0027d0   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0027d2   ffe5
0027d4   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
0027d6   fff4
0027d8   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
0027da   ffe9
0027dc   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
0027de   fff3
0027e0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0027e2   ecb3     call	0x6f66, 0           	CALL	__gptrput2
0027e4   f037
0027e6   d006     bra	0x27f4               	BRA	_00276_DS_
                                           _00275_DS_:
0027e8   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	558; brtos/queue.c	if (!iNesting)
0027ea   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0027ec   e101     bnz	0x27f0               	BNZ	_00273_DS_
                                           ;	.line	560; brtos/queue.c	OSExitCritical();
0027ee   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00273_DS_:
                                           ;	.line	563; brtos/queue.c	return BUFFER_UNDERRUN;
0027f0   0e01     movlw	0x1                	MOVLW	0x01
0027f2   d104     bra	0x29fc               	BRA	_00288_DS_
                                           _00276_DS_:
                                           ;	.line	567; brtos/queue.c	if (cqueue->OSQIn == cqueue->OSQEnd)
0027f4   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0027f6   0f09     addlw	0x9                	ADDLW	0x09
0027f8   6e07     movwf	0x7, 0             	MOVWF	r0x07
0027fa   0e00     movlw	0                  	MOVLW	0x00
0027fc   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0027fe   6e08     movwf	0x8, 0             	MOVWF	r0x08
002800   0e00     movlw	0                  	MOVLW	0x00
002802   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
002804   6e09     movwf	0x9, 0             	MOVWF	r0x09
002806   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
002808   ffe9
00280a   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
00280c   fff3
00280e   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002810   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
002812   f036
002814   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002816   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002818   f00b
00281a   cff4     movff	0xff4, 0xc         	MOVFF	PRODH, r0x0c
00281c   f00c
00281e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
002820   0f06     addlw	0x6                	ADDLW	0x06
002822   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002824   0e00     movlw	0                  	MOVLW	0x00
002826   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
002828   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00282a   0e00     movlw	0                  	MOVLW	0x00
00282c   2006     addwfc	0x6, 0, 0         	ADDWFC	r0x06, W
00282e   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
002830   c00d     movff	0xd, 0xfe9         	MOVFF	r0x0d, FSR0L
002832   ffe9
002834   c00e     movff	0xe, 0xff3         	MOVFF	r0x0e, PRODL
002836   fff3
002838   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
00283a   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
00283c   f036
00283e   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002840   cff3     movff	0xff3, 0xe         	MOVFF	PRODL, r0x0e
002842   f00e
002844   cff4     movff	0xff4, 0xf         	MOVFF	PRODH, r0x0f
002846   f00f
002848   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00284a   180d     xorwf	0xd, 0, 0          	XORWF	r0x0d, W
00284c   e106     bnz	0x285a               	BNZ	_00299_DS_
00284e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002850   180e     xorwf	0xe, 0, 0          	XORWF	r0x0e, W
002852   e103     bnz	0x285a               	BNZ	_00299_DS_
002854   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002856   180f     xorwf	0xf, 0, 0          	XORWF	r0x0f, W
002858   e001     bz	0x285c                	BZ	_00300_DS_
                                           _00299_DS_:
00285a   d01f     bra	0x289a               	BRA	_00278_DS_
                                           _00300_DS_:
                                           ;	.line	568; brtos/queue.c	cqueue->OSQIn = cqueue->OSQStart;
00285c   0e03     movlw	0x3                	MOVLW	0x03
00285e   2604     addwf	0x4, 0x1, 0        	ADDWF	r0x04, F
002860   0e00     movlw	0                  	MOVLW	0x00
002862   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
002864   0e00     movlw	0                  	MOVLW	0x00
002866   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
002868   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00286a   ffe9
00286c   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00286e   fff3
002870   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002872   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
002874   f036
002876   6e04     movwf	0x4, 0             	MOVWF	r0x04
002878   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
00287a   f005
00287c   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
00287e   f006
002880   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002882   ffe5
002884   c005     movff	0x5, 0xff4         	MOVFF	r0x05, PRODH
002886   fff4
002888   c006     movff	0x6, 0xff6         	MOVFF	r0x06, TBLPTRL
00288a   fff6
00288c   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
00288e   ffe9
002890   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
002892   fff3
002894   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002896   ec99     call	0x6f32, 0           	CALL	__gptrput3
002898   f037
                                           _00278_DS_:
                                           ;	.line	571; brtos/queue.c	*(cqueue->OSQIn) = newdata;
00289a   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
00289c   ffe9
00289e   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
0028a0   fff3
0028a2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0028a4   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0028a6   f036
0028a8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0028aa   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
0028ac   f005
0028ae   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
0028b0   f006
0028b2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0028b4   ffe5
0028b6   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0028b8   ffe9
0028ba   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
0028bc   fff3
0028be   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0028c0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0028c2   f037
                                           ;	.line	574; brtos/queue.c	cqueue->OSQIn++;
0028c4   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
0028c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0028c8   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
0028ca   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0028cc   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0028ce   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0028d0   ffe5
0028d2   c005     movff	0x5, 0xff4         	MOVFF	r0x05, PRODH
0028d4   fff4
0028d6   c006     movff	0x6, 0xff6         	MOVFF	r0x06, TBLPTRL
0028d8   fff6
0028da   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
0028dc   ffe9
0028de   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
0028e0   fff3
0028e2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0028e4   ec99     call	0x6f32, 0           	CALL	__gptrput3
0028e6   f037
                                           ;	.line	577; brtos/queue.c	if (pont_event->OSEventWait != 0)
0028e8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0028ea   0f02     addlw	0x2                	ADDLW	0x02
0028ec   6e03     movwf	0x3, 0             	MOVWF	r0x03
0028ee   0e00     movlw	0                  	MOVLW	0x00
0028f0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0028f2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0028f4   0e00     movlw	0                  	MOVLW	0x00
0028f6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0028f8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0028fa   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0028fc   ffe9
0028fe   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002900   fff3
002902   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002904   ec78     call	0x6ef0, 0           	CALL	__gptrget1
002906   f037
002908   6e06     movwf	0x6, 0             	MOVWF	r0x06
00290a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00290c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00290e   d071     bra	0x29f2               	BRA	_00286_DS_
                                           ;	.line	580; brtos/queue.c	iPriority = SAScheduler(pont_event->OSEventWaitList);    
002910   0e06     movlw	0x6                	MOVLW	0x06
002912   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002914   0e00     movlw	0                  	MOVLW	0x00
002916   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002918   0e00     movlw	0                  	MOVLW	0x00
00291a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00291c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00291e   ffe9
002920   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002922   fff3
002924   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002926   ec50     call	0x6ea0, 0           	CALL	__gptrget2
002928   f037
00292a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00292c   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
00292e   f007
002930   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002934   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002936   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002938   ecef     call	0x4dde, 0           	CALL	_SAScheduler
00293a   f026
00293c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00293e   0e02     movlw	0x2                	MOVLW	0x02
002940   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002942   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002944   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	583; brtos/queue.c	pont_event->OSEventWaitList = pont_event->OSEventWaitList & ~(PriorityMask[iPriority]);
002946   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002948   ffe9
00294a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00294c   fff3
00294e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002950   ec50     call	0x6ea0, 0           	CALL	__gptrget2
002952   f037
002954   6e07     movwf	0x7, 0             	MOVWF	r0x07
002956   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
002958   f008
                                           ; ;multiply lit val:0x02 by variable r0x06 and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00295a   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
00295c   3606     rlcf	0x6, 0x1, 0         	RLCF	r0x06, F
00295e   6a09     clrf	0x9, 0              	CLRF	r0x09
002960   6a0a     clrf	0xa, 0              	CLRF	r0x0a
002962   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
002964   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
002966   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
002968   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
00296a   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
00296c   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
00296e   c006     movff	0x6, 0xff6         	MOVFF	r0x06, TBLPTRL
002970   fff6
002972   c009     movff	0x9, 0xff7         	MOVFF	r0x09, TBLPTRH
002974   fff7
002976   c00a     movff	0xa, 0xff8         	MOVFF	r0x0a, TBLPTRU
002978   fff8
00297a   0009     tblrd	*+                 	TBLRD*+	
00297c   cff5     movff	0xff5, 0x6         	MOVFF	TABLAT, r0x06
00297e   f006
002980   0009     tblrd	*+                 	TBLRD*+	
002982   cff5     movff	0xff5, 0x9         	MOVFF	TABLAT, r0x09
002984   f009
002986   1c06     comf	0x6, 0, 0           	COMF	r0x06, W
002988   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
00298a   1c09     comf	0x9, 0, 0           	COMF	r0x09, W
00298c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00298e   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002990   1607     andwf	0x7, 0x1, 0        	ANDWF	r0x07, F
002992   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002994   1608     andwf	0x8, 0x1, 0        	ANDWF	r0x08, F
002996   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002998   ffe5
00299a   c008     movff	0x8, 0xff4         	MOVFF	r0x08, PRODH
00299c   fff4
00299e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0029a0   ffe9
0029a2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0029a4   fff3
0029a6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0029a8   ecb3     call	0x6f66, 0           	CALL	__gptrput2
0029aa   f037
                                           ;	.line	586; brtos/queue.c	pont_event->OSEventWait--;
0029ac   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0029ae   ffe9
0029b0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0029b2   fff3
0029b4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029b6   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0029b8   f037
0029ba   6e00     movwf	0, 0               	MOVWF	r0x00
0029bc   0600     decf	0, 0x1, 0           	DECF	r0x00, F
0029be   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0029c0   ffe5
0029c2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0029c4   ffe9
0029c6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0029c8   fff3
0029ca   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0029cc   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0029ce   f037
                                           ;	.line	594; brtos/queue.c	OSReadyList = OSReadyList | (PriorityMask[iPriority]);
0029d0   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0029d2   0102     movlb	0x2                	BANKSEL	_OSReadyList
0029d4   1399     iorwf	0x99, 0x1, 0x1     	IORWF	_OSReadyList, F, B
0029d6   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0029d8   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
0029da   139a     iorwf	0x9a, 0x1, 0x1     	IORWF	(_OSReadyList + 1), F, B
0029dc   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	598; brtos/queue.c	if (!iNesting)
0029de   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0029e0   e102     bnz	0x29e6               	BNZ	_00280_DS_
                                           ;	.line	601; brtos/queue.c	ChangeContext();      
0029e2   ec82     call	0x4b04, 0           	CALL	_SwitchContext
0029e4   f025
                                           _00280_DS_:
0029e6   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	606; brtos/queue.c	if (!iNesting)
0029e8   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0029ea   e101     bnz	0x29ee               	BNZ	_00282_DS_
                                           ;	.line	608; brtos/queue.c	OSExitCritical();
0029ec   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00282_DS_:
                                           ;	.line	610; brtos/queue.c	return WRITE_BUFFER_OK;
0029ee   6ae8     clrf	0xe8, 0             	CLRF	WREG
0029f0   d005     bra	0x29fc               	BRA	_00288_DS_
                                           _00286_DS_:
0029f2   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	616; brtos/queue.c	if (!iNesting)
0029f4   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0029f6   e101     bnz	0x29fa               	BNZ	_00284_DS_
                                           ;	.line	618; brtos/queue.c	OSExitCritical();
0029f8   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00284_DS_:
                                           ;	.line	620; brtos/queue.c	return WRITE_BUFFER_OK;
0029fa   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00288_DS_:
0029fc   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
0029fe   f00f
002a00   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002a02   f00e
002a04   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002a06   f00d
002a08   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002a0a   f00c
002a0c   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002a0e   f00b
002a10   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002a12   f00a
002a14   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002a16   f009
002a18   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002a1a   f008
002a1c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002a1e   f007
002a20   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002a22   f006
002a24   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002a26   f005
002a28   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002a2a   f004
002a2c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002a2e   f003
002a30   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002a32   f002
002a34   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002a36   f001
002a38   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002a3a   f000
002a3c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002a3e   ffd9
002a40   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
002a42   ffda
002a44   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_queue__OSQueuePend	code
                                           _OSQueuePend:
                                           ;	.line	318; brtos/queue.c	INT8U OSQueuePend (BRTOS_Queue *pont_event, INT8U* pdata, INT16U time_wait)
000004   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
000006   ffe5
000008   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00000a   ffe5
00000c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00000e   ffda
000010   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000012   ffd9
000014   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000016   ffe5
000018   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00001a   ffe5
00001c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00001e   ffe5
000020   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000022   ffe5
000024   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000026   ffe5
000028   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00002a   ffe5
00002c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00002e   ffe5
000030   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000032   ffe5
000034   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000036   ffe5
000038   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00003a   ffe5
00003c   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
00003e   ffe5
000040   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000042   ffe5
000044   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000046   ffe5
000048   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00004a   ffe5
00004c   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00004e   ffe5
000050   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
000052   ffe5
000054   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
000056   ffe5
000058   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
00005a   ffe5
00005c   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
00005e   ffe5
000060   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000062   ffe5
000064   c014     movff	0x14, 0xfe5        	MOVFF	r0x14, POSTDEC1
000066   ffe5
000068   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00006a   ffe5
00006c   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
00006e   ffe5
000070   c017     movff	0x17, 0xfe5        	MOVFF	r0x17, POSTDEC1
000072   ffe5
000074   c018     movff	0x18, 0xfe5        	MOVFF	r0x18, POSTDEC1
000076   ffe5
000078   c019     movff	0x19, 0xfe5        	MOVFF	r0x19, POSTDEC1
00007a   ffe5
00007c   c01a     movff	0x1a, 0xfe5        	MOVFF	r0x1a, POSTDEC1
00007e   ffe5
000080   c01b     movff	0x1b, 0xfe5        	MOVFF	r0x1b, POSTDEC1
000082   ffe5
000084   c01c     movff	0x1c, 0xfe5        	MOVFF	r0x1c, POSTDEC1
000086   ffe5
000088   c01d     movff	0x1d, 0xfe5        	MOVFF	r0x1d, POSTDEC1
00008a   ffe5
00008c   c01e     movff	0x1e, 0xfe5        	MOVFF	r0x1e, POSTDEC1
00008e   ffe5
000090   c01f     movff	0x1f, 0xfe5        	MOVFF	r0x1f, POSTDEC1
000092   ffe5
000094   0e03     movlw	0x3                	MOVLW	0x03
000096   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000098   f000
00009a   0e04     movlw	0x4                	MOVLW	0x04
00009c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
00009e   f001
0000a0   0e05     movlw	0x5                	MOVLW	0x05
0000a2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0000a4   f002
0000a6   0e06     movlw	0x6                	MOVLW	0x06
0000a8   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0000aa   f003
0000ac   0e07     movlw	0x7                	MOVLW	0x07
0000ae   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0000b0   f004
0000b2   0e08     movlw	0x8                	MOVLW	0x08
0000b4   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0000b6   f005
0000b8   0e09     movlw	0x9                	MOVLW	0x09
0000ba   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0000bc   f006
0000be   0e0a     movlw	0xa                	MOVLW	0x0a
0000c0   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0000c2   f007
                                           ;	.line	324; brtos/queue.c	OS_QUEUE *cqueue = pont_event->OSEventPointer;
0000c4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000c6   0f03     addlw	0x3                	ADDLW	0x03
0000c8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0000ca   0e00     movlw	0                  	MOVLW	0x00
0000cc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0000ce   6e09     movwf	0x9, 0             	MOVWF	r0x09
0000d0   0e00     movlw	0                  	MOVLW	0x00
0000d2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0000d4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0000d6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0000d8   ffe9
0000da   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0000dc   fff3
0000de   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0000e0   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0000e2   f036
0000e4   6e08     movwf	0x8, 0             	MOVWF	r0x08
0000e6   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
0000e8   f009
0000ea   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
0000ec   f00a
                                           ;	.line	341; brtos/queue.c	OSEnterCritical();
0000ee   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	363; brtos/queue.c	if(cqueue->OSQEntries > 0)
0000f0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0000f2   0f11     addlw	0x11               	ADDLW	0x11
0000f4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0000f6   0e00     movlw	0                  	MOVLW	0x00
0000f8   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
0000fa   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0000fc   0e00     movlw	0                  	MOVLW	0x00
0000fe   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
000100   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000102   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
000104   ffe9
000106   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
000108   fff3
00010a   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00010c   ec50     call	0x6ea0, 0           	CALL	__gptrget2
00010e   f037
000110   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
000112   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
000114   f00f
000116   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000118   100f     iorwf	0xf, 0, 0          	IORWF	r0x0f, W
00011a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
00011c   d098     bra	0x24e                	BRA	_00234_DS_
                                           ;	.line	366; brtos/queue.c	if (cqueue->OSQOut == cqueue->OSQEnd)
00011e   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000120   0f0c     addlw	0xc                	ADDLW	0x0c
000122   6e10     movwf	0x10, 0            	MOVWF	r0x10
000124   0e00     movlw	0                  	MOVLW	0x00
000126   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
000128   6e11     movwf	0x11, 0            	MOVWF	r0x11
00012a   0e00     movlw	0                  	MOVLW	0x00
00012c   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
00012e   6e12     movwf	0x12, 0            	MOVWF	r0x12
000130   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
000132   ffe9
000134   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
000136   fff3
000138   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
00013a   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
00013c   f036
00013e   6e13     movwf	0x13, 0            	MOVWF	r0x13
000140   cff3     movff	0xff3, 0x14        	MOVFF	PRODL, r0x14
000142   f014
000144   cff4     movff	0xff4, 0x15        	MOVFF	PRODH, r0x15
000146   f015
000148   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00014a   0f06     addlw	0x6                	ADDLW	0x06
00014c   6e16     movwf	0x16, 0            	MOVWF	r0x16
00014e   0e00     movlw	0                  	MOVLW	0x00
000150   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
000152   6e17     movwf	0x17, 0            	MOVWF	r0x17
000154   0e00     movlw	0                  	MOVLW	0x00
000156   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
000158   6e18     movwf	0x18, 0            	MOVWF	r0x18
00015a   c016     movff	0x16, 0xfe9        	MOVFF	r0x16, FSR0L
00015c   ffe9
00015e   c017     movff	0x17, 0xff3        	MOVFF	r0x17, PRODL
000160   fff3
000162   5018     movf	0x18, 0, 0          	MOVF	r0x18, W
000164   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
000166   f036
000168   6e16     movwf	0x16, 0            	MOVWF	r0x16
00016a   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
00016c   f017
00016e   cff4     movff	0xff4, 0x18        	MOVFF	PRODH, r0x18
000170   f018
000172   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
000174   1816     xorwf	0x16, 0, 0         	XORWF	r0x16, W
000176   e106     bnz	0x184                	BNZ	_00250_DS_
000178   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00017a   1817     xorwf	0x17, 0, 0         	XORWF	r0x17, W
00017c   e103     bnz	0x184                	BNZ	_00250_DS_
00017e   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
000180   1818     xorwf	0x18, 0, 0         	XORWF	r0x18, W
000182   e001     bz	0x186                 	BZ	_00251_DS_
                                           _00250_DS_:
000184   d022     bra	0x1ca                	BRA	_00205_DS_
                                           _00251_DS_:
                                           ;	.line	367; brtos/queue.c	cqueue->OSQOut = cqueue->OSQStart;
000186   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000188   0f03     addlw	0x3                	ADDLW	0x03
00018a   6e13     movwf	0x13, 0            	MOVWF	r0x13
00018c   0e00     movlw	0                  	MOVLW	0x00
00018e   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
000190   6e14     movwf	0x14, 0            	MOVWF	r0x14
000192   0e00     movlw	0                  	MOVLW	0x00
000194   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
000196   6e15     movwf	0x15, 0            	MOVWF	r0x15
000198   c013     movff	0x13, 0xfe9        	MOVFF	r0x13, FSR0L
00019a   ffe9
00019c   c014     movff	0x14, 0xff3        	MOVFF	r0x14, PRODL
00019e   fff3
0001a0   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0001a2   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0001a4   f036
0001a6   6e13     movwf	0x13, 0            	MOVWF	r0x13
0001a8   cff3     movff	0xff3, 0x14        	MOVFF	PRODL, r0x14
0001aa   f014
0001ac   cff4     movff	0xff4, 0x15        	MOVFF	PRODH, r0x15
0001ae   f015
0001b0   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0001b2   ffe5
0001b4   c014     movff	0x14, 0xff4        	MOVFF	r0x14, PRODH
0001b6   fff4
0001b8   c015     movff	0x15, 0xff6        	MOVFF	r0x15, TBLPTRL
0001ba   fff6
0001bc   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
0001be   ffe9
0001c0   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
0001c2   fff3
0001c4   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0001c6   ec99     call	0x6f32, 0           	CALL	__gptrput3
0001c8   f037
                                           _00205_DS_:
                                           ;	.line	370; brtos/queue.c	*pdata = *cqueue->OSQOut;
0001ca   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
0001cc   ffe9
0001ce   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
0001d0   fff3
0001d2   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
0001d4   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0001d6   f036
0001d8   6e13     movwf	0x13, 0            	MOVWF	r0x13
0001da   cff3     movff	0xff3, 0x14        	MOVFF	PRODL, r0x14
0001dc   f014
0001de   cff4     movff	0xff4, 0x15        	MOVFF	PRODH, r0x15
0001e0   f015
0001e2   c013     movff	0x13, 0xfe9        	MOVFF	r0x13, FSR0L
0001e4   ffe9
0001e6   c014     movff	0x14, 0xff3        	MOVFF	r0x14, PRODL
0001e8   fff3
0001ea   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
0001ec   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0001ee   f037
0001f0   6e16     movwf	0x16, 0            	MOVWF	r0x16
0001f2   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
0001f4   ffe5
0001f6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0001f8   ffe9
0001fa   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0001fc   fff3
0001fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000200   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
000202   f037
                                           ;	.line	373; brtos/queue.c	cqueue->OSQOut++;
000204   2a13     incf	0x13, 0x1, 0        	INCF	r0x13, F
000206   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000208   2a14     incf	0x14, 0x1, 0        	INCF	r0x14, F
00020a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00020c   2a15     incf	0x15, 0x1, 0        	INCF	r0x15, F
00020e   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
000210   ffe5
000212   c014     movff	0x14, 0xff4        	MOVFF	r0x14, PRODH
000214   fff4
000216   c015     movff	0x15, 0xff6        	MOVFF	r0x15, TBLPTRL
000218   fff6
00021a   c010     movff	0x10, 0xfe9        	MOVFF	r0x10, FSR0L
00021c   ffe9
00021e   c011     movff	0x11, 0xff3        	MOVFF	r0x11, PRODL
000220   fff3
000222   5012     movf	0x12, 0, 0          	MOVF	r0x12, W
000224   ec99     call	0x6f32, 0           	CALL	__gptrput3
000226   f037
                                           ;	.line	376; brtos/queue.c	cqueue->OSQEntries--;
000228   0eff     movlw	0xff               	MOVLW	0xff
00022a   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
00022c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00022e   060f     decf	0xf, 0x1, 0         	DECF	r0x0f, F
000230   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
000232   ffe5
000234   c00f     movff	0xf, 0xff4         	MOVFF	r0x0f, PRODH
000236   fff4
000238   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
00023a   ffe9
00023c   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
00023e   fff3
000240   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
000242   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000244   f037
                                           ;	.line	379; brtos/queue.c	OSExitCritical();
000246   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	380; brtos/queue.c	return READ_BUFFER_OK;
000248   6ae8     clrf	0xe8, 0             	CLRF	WREG
00024a   efa3     goto	0x946               	GOTO	_00236_DS_
00024c   f004
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x0e
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00234_DS_:
00024e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	384; brtos/queue.c	Task = &ContextTask[currentTask];
000250   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
000252   0d10     mullw	0x10               	MULLW	0x10
000254   cff3     movff	0xff3, 0xe         	MOVFF	PRODL, r0x0e
000256   f00e
000258   6a0f     clrf	0xf, 0              	CLRF	r0x0f
00025a   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
00025c   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
00025e   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
000260   220f     addwfc	0xf, 0x1, 0       	ADDWFC	r0x0f, F
000262   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000264   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
000266   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000268   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00026a   0e80     movlw	0x80               	MOVLW	0x80
00026c   6e10     movwf	0x10, 0            	MOVWF	r0x10
                                           ;	.line	387; brtos/queue.c	iPriority = Task->Priority;
00026e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000270   0f09     addlw	0x9                	ADDLW	0x09
000272   6e11     movwf	0x11, 0            	MOVWF	r0x11
000274   0e00     movlw	0                  	MOVLW	0x00
000276   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
000278   6e12     movwf	0x12, 0            	MOVWF	r0x12
00027a   0e00     movlw	0                  	MOVLW	0x00
00027c   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
00027e   6e13     movwf	0x13, 0            	MOVWF	r0x13
000280   c011     movff	0x11, 0xfe9        	MOVFF	r0x11, FSR0L
000282   ffe9
000284   c012     movff	0x12, 0xff3        	MOVFF	r0x12, PRODL
000286   fff3
000288   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
00028a   ec78     call	0x6ef0, 0           	CALL	__gptrget1
00028c   f037
00028e   6e11     movwf	0x11, 0            	MOVWF	r0x11
                                           ;	.line	390; brtos/queue.c	pont_event->OSEventWait++;
000290   5000     movf	0, 0, 0             	MOVF	r0x00, W
000292   0f02     addlw	0x2                	ADDLW	0x02
000294   6e12     movwf	0x12, 0            	MOVWF	r0x12
000296   0e00     movlw	0                  	MOVLW	0x00
000298   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00029a   6e13     movwf	0x13, 0            	MOVWF	r0x13
00029c   0e00     movlw	0                  	MOVLW	0x00
00029e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0002a0   6e14     movwf	0x14, 0            	MOVWF	r0x14
0002a2   c012     movff	0x12, 0xfe9        	MOVFF	r0x12, FSR0L
0002a4   ffe9
0002a6   c013     movff	0x13, 0xff3        	MOVFF	r0x13, PRODL
0002a8   fff3
0002aa   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0002ac   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0002ae   f037
0002b0   6e15     movwf	0x15, 0            	MOVWF	r0x15
0002b2   2a15     incf	0x15, 0x1, 0        	INCF	r0x15, F
0002b4   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0002b6   ffe5
0002b8   c012     movff	0x12, 0xfe9        	MOVFF	r0x12, FSR0L
0002ba   ffe9
0002bc   c013     movff	0x13, 0xff3        	MOVFF	r0x13, PRODL
0002be   fff3
0002c0   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
0002c2   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0002c4   f037
                                           ;	.line	393; brtos/queue.c	pont_event->OSEventWaitList = pont_event->OSEventWaitList | (PriorityMask[iPriority]);
0002c6   0e06     movlw	0x6                	MOVLW	0x06
0002c8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0002ca   0e00     movlw	0                  	MOVLW	0x00
0002cc   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0002ce   0e00     movlw	0                  	MOVLW	0x00
0002d0   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0002d2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0002d4   ffe9
0002d6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0002d8   fff3
0002da   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0002dc   ec50     call	0x6ea0, 0           	CALL	__gptrget2
0002de   f037
0002e0   6e15     movwf	0x15, 0            	MOVWF	r0x15
0002e2   cff3     movff	0xff3, 0x16        	MOVFF	PRODL, r0x16
0002e4   f016
                                           ; ;multiply lit val:0x02 by variable r0x11 and store in r0x17
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0002e6   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0002e8   3411     rlcf	0x11, 0, 0          	RLCF	r0x11, W
0002ea   6e17     movwf	0x17, 0            	MOVWF	r0x17
0002ec   6a18     clrf	0x18, 0             	CLRF	r0x18
0002ee   6a19     clrf	0x19, 0             	CLRF	r0x19
0002f0   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
0002f2   2617     addwf	0x17, 0x1, 0       	ADDWF	r0x17, F
0002f4   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
0002f6   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x18, F
0002f8   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
0002fa   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x19, F
0002fc   c017     movff	0x17, 0xff6        	MOVFF	r0x17, TBLPTRL
0002fe   fff6
000300   c018     movff	0x18, 0xff7        	MOVFF	r0x18, TBLPTRH
000302   fff7
000304   c019     movff	0x19, 0xff8        	MOVFF	r0x19, TBLPTRU
000306   fff8
000308   0009     tblrd	*+                 	TBLRD*+	
00030a   cff5     movff	0xff5, 0x17        	MOVFF	TABLAT, r0x17
00030c   f017
00030e   0009     tblrd	*+                 	TBLRD*+	
000310   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x18
000312   f018
000314   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
000316   1215     iorwf	0x15, 0x1, 0       	IORWF	r0x15, F
000318   5018     movf	0x18, 0, 0          	MOVF	r0x18, W
00031a   1216     iorwf	0x16, 0x1, 0       	IORWF	r0x16, F
00031c   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
00031e   ffe5
000320   c016     movff	0x16, 0xff4        	MOVFF	r0x16, PRODH
000322   fff4
000324   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000326   ffe9
000328   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00032a   fff3
00032c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00032e   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000330   f037
                                           ;	.line	402; brtos/queue.c	OSReadyList = OSReadyList & ~(PriorityMask[iPriority]);
000332   1e17     comf	0x17, 0x1, 0        	COMF	r0x17, F
000334   1e18     comf	0x18, 0x1, 0        	COMF	r0x18, F
000336   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
000338   0102     movlb	0x2                	BANKSEL	_OSReadyList
00033a   1799     andwf	0x99, 0x1, 0x1     	ANDWF	_OSReadyList, F, B
00033c   5018     movf	0x18, 0, 0          	MOVF	r0x18, W
00033e   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
000340   179a     andwf	0x9a, 0x1, 0x1     	ANDWF	(_OSReadyList + 1), F, B
                                           ;	.line	405; brtos/queue.c	if (time_wait)
000342   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000344   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000346   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000348   d0e4     bra	0x512                	BRA	_00213_DS_
                                           ;	.line	407; brtos/queue.c	timeout = (INT32U)((INT32U)counter + (INT32U)time_wait);
00034a   c2fe     movff	0x2fe, 0x15        	MOVFF	_counter, r0x15
00034c   f015
00034e   c2ff     movff	0x2ff, 0x16        	MOVFF	(_counter + 1), r0x16
000350   f016
000352   6a17     clrf	0x17, 0             	CLRF	r0x17
000354   6a18     clrf	0x18, 0             	CLRF	r0x18
000356   c006     movff	0x6, 0x19          	MOVFF	r0x06, r0x19
000358   f019
00035a   c007     movff	0x7, 0x1a          	MOVFF	r0x07, r0x1a
00035c   f01a
00035e   6a1b     clrf	0x1b, 0             	CLRF	r0x1b
000360   6a1c     clrf	0x1c, 0             	CLRF	r0x1c
000362   5019     movf	0x19, 0, 0          	MOVF	r0x19, W
000364   2615     addwf	0x15, 0x1, 0       	ADDWF	r0x15, F
000366   501a     movf	0x1a, 0, 0          	MOVF	r0x1a, W
000368   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x16, F
00036a   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
00036c   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x17, F
00036e   501c     movf	0x1c, 0, 0          	MOVF	r0x1c, W
000370   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x18, F
                                           ;	.line	409; brtos/queue.c	if (timeout >= TickCountOverFlow)
000372   0e00     movlw	0                  	MOVLW	0x00
000374   5c18     subwf	0x18, 0, 0         	SUBWF	r0x18, W
000376   e108     bnz	0x388                	BNZ	_00254_DS_
000378   0e00     movlw	0                  	MOVLW	0x00
00037a   5c17     subwf	0x17, 0, 0         	SUBWF	r0x17, W
00037c   e105     bnz	0x388                	BNZ	_00254_DS_
00037e   0efa     movlw	0xfa               	MOVLW	0xfa
000380   5c16     subwf	0x16, 0, 0         	SUBWF	r0x16, W
000382   e102     bnz	0x388                	BNZ	_00254_DS_
000384   0e00     movlw	0                  	MOVLW	0x00
000386   5c15     subwf	0x15, 0, 0         	SUBWF	r0x15, W
                                           _00254_DS_:
000388   e320     bnc	0x3ca                	BNC	_00207_DS_
                                           ;	.line	411; brtos/queue.c	Task->TimeToWait = (INT16U)(timeout - TickCountOverFlow);
00038a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00038c   0f07     addlw	0x7                	ADDLW	0x07
00038e   6e19     movwf	0x19, 0            	MOVWF	r0x19
000390   0e00     movlw	0                  	MOVLW	0x00
000392   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
000394   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
000396   0e00     movlw	0                  	MOVLW	0x00
000398   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
00039a   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
00039c   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
00039e   6e1c     movwf	0x1c, 0            	MOVWF	r0x1c
0003a0   0e06     movlw	0x6                	MOVLW	0x06
0003a2   2416     addwf	0x16, 0, 0         	ADDWF	r0x16, W
0003a4   6e1d     movwf	0x1d, 0            	MOVWF	r0x1d
0003a6   0eff     movlw	0xff               	MOVLW	0xff
0003a8   2017     addwfc	0x17, 0, 0        	ADDWFC	r0x17, W
0003aa   6e1e     movwf	0x1e, 0            	MOVWF	r0x1e
0003ac   0eff     movlw	0xff               	MOVLW	0xff
0003ae   2018     addwfc	0x18, 0, 0        	ADDWFC	r0x18, W
0003b0   6e1f     movwf	0x1f, 0            	MOVWF	r0x1f
0003b2   c01c     movff	0x1c, 0xfe5        	MOVFF	r0x1c, POSTDEC1
0003b4   ffe5
0003b6   c01d     movff	0x1d, 0xff4        	MOVFF	r0x1d, PRODH
0003b8   fff4
0003ba   c019     movff	0x19, 0xfe9        	MOVFF	r0x19, FSR0L
0003bc   ffe9
0003be   c01a     movff	0x1a, 0xff3        	MOVFF	r0x1a, PRODL
0003c0   fff3
0003c2   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
0003c4   ecb3     call	0x6f66, 0           	CALL	__gptrput2
0003c6   f037
0003c8   d014     bra	0x3f2                	BRA	_00208_DS_
                                           _00207_DS_:
                                           ;	.line	415; brtos/queue.c	Task->TimeToWait = (INT16U)timeout;
0003ca   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0003cc   0f07     addlw	0x7                	ADDLW	0x07
0003ce   6e19     movwf	0x19, 0            	MOVWF	r0x19
0003d0   0e00     movlw	0                  	MOVLW	0x00
0003d2   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
0003d4   6e1a     movwf	0x1a, 0            	MOVWF	r0x1a
0003d6   0e00     movlw	0                  	MOVLW	0x00
0003d8   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
0003da   6e1b     movwf	0x1b, 0            	MOVWF	r0x1b
0003dc   c015     movff	0x15, 0xfe5        	MOVFF	r0x15, POSTDEC1
0003de   ffe5
0003e0   c016     movff	0x16, 0xff4        	MOVFF	r0x16, PRODH
0003e2   fff4
0003e4   c019     movff	0x19, 0xfe9        	MOVFF	r0x19, FSR0L
0003e6   ffe9
0003e8   c01a     movff	0x1a, 0xff3        	MOVFF	r0x1a, PRODL
0003ea   fff3
0003ec   501b     movf	0x1b, 0, 0          	MOVF	r0x1b, W
0003ee   ecb3     call	0x6f66, 0           	CALL	__gptrput2
0003f0   f037
                                           _00208_DS_:
0003f2   0103     movlb	0x3                	BANKSEL	_Tail
                                           ;	.line	419; brtos/queue.c	IncludeTaskIntoDelayList();
0003f4   51ec     movf	0xec, 0, 0x1        	MOVF	_Tail, W, B
0003f6   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
0003f8   11ed     iorwf	0xed, 0, 0x1       	IORWF	(_Tail + 1), W, B
0003fa   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
0003fc   11ee     iorwf	0xee, 0, 0x1       	IORWF	(_Tail + 2), W, B
0003fe   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000400   d04f     bra	0x4a0                	BRA	_00210_DS_
000402   c3ec     movff	0x3ec, 0x15        	MOVFF	_Tail, r0x15
000404   f015
000406   c3ed     movff	0x3ed, 0x16        	MOVFF	(_Tail + 1), r0x16
000408   f016
00040a   c3ee     movff	0x3ee, 0x17        	MOVFF	(_Tail + 2), r0x17
00040c   f017
00040e   0e0a     movlw	0xa                	MOVLW	0x0a
000410   2615     addwf	0x15, 0x1, 0       	ADDWF	r0x15, F
000412   0e00     movlw	0                  	MOVLW	0x00
000414   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x16, F
000416   0e00     movlw	0                  	MOVLW	0x00
000418   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x17, F
00041a   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
00041c   ffe5
00041e   c00f     movff	0xf, 0xff4         	MOVFF	r0x0f, PRODH
000420   fff4
000422   c010     movff	0x10, 0xff6        	MOVFF	r0x10, TBLPTRL
000424   fff6
000426   c015     movff	0x15, 0xfe9        	MOVFF	r0x15, FSR0L
000428   ffe9
00042a   c016     movff	0x16, 0xff3        	MOVFF	r0x16, PRODL
00042c   fff3
00042e   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
000430   ec99     call	0x6f32, 0           	CALL	__gptrput3
000432   f037
000434   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000436   0f0d     addlw	0xd                	ADDLW	0x0d
000438   6e15     movwf	0x15, 0            	MOVWF	r0x15
00043a   0e00     movlw	0                  	MOVLW	0x00
00043c   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
00043e   6e16     movwf	0x16, 0            	MOVWF	r0x16
000440   0e00     movlw	0                  	MOVLW	0x00
000442   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
000444   6e17     movwf	0x17, 0            	MOVWF	r0x17
000446   c3ec     movff	0x3ec, 0xfe5       	MOVFF	_Tail, POSTDEC1
000448   ffe5
00044a   c3ed     movff	0x3ed, 0xff4       	MOVFF	(_Tail + 1), PRODH
00044c   fff4
00044e   c3ee     movff	0x3ee, 0xff6       	MOVFF	(_Tail + 2), TBLPTRL
000450   fff6
000452   c015     movff	0x15, 0xfe9        	MOVFF	r0x15, FSR0L
000454   ffe9
000456   c016     movff	0x16, 0xff3        	MOVFF	r0x16, PRODL
000458   fff3
00045a   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
00045c   ec99     call	0x6f32, 0           	CALL	__gptrput3
00045e   f037
000460   c00e     movff	0xe, 0x3ec         	MOVFF	r0x0e, _Tail
000462   f3ec
000464   c00f     movff	0xf, 0x3ed         	MOVFF	r0x0f, (_Tail + 1)
000466   f3ed
000468   c010     movff	0x10, 0x3ee        	MOVFF	r0x10, (_Tail + 2)
00046a   f3ee
00046c   c3ec     movff	0x3ec, 0x15        	MOVFF	_Tail, r0x15
00046e   f015
000470   c3ed     movff	0x3ed, 0x16        	MOVFF	(_Tail + 1), r0x16
000472   f016
000474   c3ee     movff	0x3ee, 0x17        	MOVFF	(_Tail + 2), r0x17
000476   f017
000478   0e0a     movlw	0xa                	MOVLW	0x0a
00047a   2615     addwf	0x15, 0x1, 0       	ADDWF	r0x15, F
00047c   0e00     movlw	0                  	MOVLW	0x00
00047e   2216     addwfc	0x16, 0x1, 0      	ADDWFC	r0x16, F
000480   0e00     movlw	0                  	MOVLW	0x00
000482   2217     addwfc	0x17, 0x1, 0      	ADDWFC	r0x17, F
000484   0e00     movlw	0                  	MOVLW	0x00
000486   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000488   0e00     movlw	0                  	MOVLW	0x00
00048a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00048c   0e00     movlw	0                  	MOVLW	0x00
00048e   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000490   c015     movff	0x15, 0xfe9        	MOVFF	r0x15, FSR0L
000492   ffe9
000494   c016     movff	0x16, 0xff3        	MOVFF	r0x16, PRODL
000496   fff3
000498   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
00049a   ec99     call	0x6f32, 0           	CALL	__gptrput3
00049c   f037
00049e   d04d     bra	0x53a                	BRA	_00214_DS_
                                           _00210_DS_:
0004a0   c00e     movff	0xe, 0x3ec         	MOVFF	r0x0e, _Tail
0004a2   f3ec
0004a4   c00f     movff	0xf, 0x3ed         	MOVFF	r0x0f, (_Tail + 1)
0004a6   f3ed
0004a8   c010     movff	0x10, 0x3ee        	MOVFF	r0x10, (_Tail + 2)
0004aa   f3ee
0004ac   c00e     movff	0xe, 0x3ef         	MOVFF	r0x0e, _Head
0004ae   f3ef
0004b0   c00f     movff	0xf, 0x3f0         	MOVFF	r0x0f, (_Head + 1)
0004b2   f3f0
0004b4   c010     movff	0x10, 0x3f1        	MOVFF	r0x10, (_Head + 2)
0004b6   f3f1
0004b8   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0004ba   0f0a     addlw	0xa                	ADDLW	0x0a
0004bc   6e15     movwf	0x15, 0            	MOVWF	r0x15
0004be   0e00     movlw	0                  	MOVLW	0x00
0004c0   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
0004c2   6e16     movwf	0x16, 0            	MOVWF	r0x16
0004c4   0e00     movlw	0                  	MOVLW	0x00
0004c6   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
0004c8   6e17     movwf	0x17, 0            	MOVWF	r0x17
0004ca   0e00     movlw	0                  	MOVLW	0x00
0004cc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004ce   0e00     movlw	0                  	MOVLW	0x00
0004d0   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0004d2   0e00     movlw	0                  	MOVLW	0x00
0004d4   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0004d6   c015     movff	0x15, 0xfe9        	MOVFF	r0x15, FSR0L
0004d8   ffe9
0004da   c016     movff	0x16, 0xff3        	MOVFF	r0x16, PRODL
0004dc   fff3
0004de   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
0004e0   ec99     call	0x6f32, 0           	CALL	__gptrput3
0004e2   f037
0004e4   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0004e6   0f0d     addlw	0xd                	ADDLW	0x0d
0004e8   6e15     movwf	0x15, 0            	MOVWF	r0x15
0004ea   0e00     movlw	0                  	MOVLW	0x00
0004ec   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
0004ee   6e16     movwf	0x16, 0            	MOVWF	r0x16
0004f0   0e00     movlw	0                  	MOVLW	0x00
0004f2   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
0004f4   6e17     movwf	0x17, 0            	MOVWF	r0x17
0004f6   0e00     movlw	0                  	MOVLW	0x00
0004f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0004fa   0e00     movlw	0                  	MOVLW	0x00
0004fc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0004fe   0e00     movlw	0                  	MOVLW	0x00
000500   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000502   c015     movff	0x15, 0xfe9        	MOVFF	r0x15, FSR0L
000504   ffe9
000506   c016     movff	0x16, 0xff3        	MOVFF	r0x16, PRODL
000508   fff3
00050a   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
00050c   ec99     call	0x6f32, 0           	CALL	__gptrput3
00050e   f037
000510   d014     bra	0x53a                	BRA	_00214_DS_
                                           _00213_DS_:
                                           ;	.line	422; brtos/queue.c	Task->TimeToWait = NO_TIMEOUT;
000512   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000514   0f07     addlw	0x7                	ADDLW	0x07
000516   6e15     movwf	0x15, 0            	MOVWF	r0x15
000518   0e00     movlw	0                  	MOVLW	0x00
00051a   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
00051c   6e16     movwf	0x16, 0            	MOVWF	r0x16
00051e   0e00     movlw	0                  	MOVLW	0x00
000520   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
000522   6e17     movwf	0x17, 0            	MOVWF	r0x17
000524   0ee8     movlw	0xe8               	MOVLW	0xe8
000526   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000528   0efd     movlw	0xfd               	MOVLW	0xfd
00052a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00052c   c015     movff	0x15, 0xfe9        	MOVFF	r0x15, FSR0L
00052e   ffe9
000530   c016     movff	0x16, 0xff3        	MOVFF	r0x16, PRODL
000532   fff3
000534   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
000536   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000538   f037
                                           _00214_DS_:
                                           ;	.line	426; brtos/queue.c	ChangeContext();
00053a   ec82     call	0x4b04, 0           	CALL	_SwitchContext
00053c   f025
                                           ;	.line	429; brtos/queue.c	OSExitCritical();
00053e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	431; brtos/queue.c	OSEnterCritical();  
000540   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	433; brtos/queue.c	if (time_wait)
000542   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000544   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000546   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000548   d161     bra	0x80c                	BRA	_00230_DS_
                                           ;	.line	436; brtos/queue.c	if(Task->TimeToWait == EXIT_BY_TIMEOUT)
00054a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00054c   0f07     addlw	0x7                	ADDLW	0x07
00054e   6e06     movwf	0x6, 0             	MOVWF	r0x06
000550   0e00     movlw	0                  	MOVLW	0x00
000552   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
000554   6e07     movwf	0x7, 0             	MOVWF	r0x07
000556   0e00     movlw	0                  	MOVLW	0x00
000558   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
00055a   6e15     movwf	0x15, 0            	MOVWF	r0x15
00055c   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00055e   ffe9
000560   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
000562   fff3
000564   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
000566   ec50     call	0x6ea0, 0           	CALL	__gptrget2
000568   f037
00056a   6e16     movwf	0x16, 0            	MOVWF	r0x16
00056c   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
00056e   f017
000570   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
000572   0ae9     xorlw	0xe9               	XORLW	0xe9
000574   e103     bnz	0x57c                	BNZ	_00255_DS_
000576   5017     movf	0x17, 0, 0          	MOVF	r0x17, W
000578   0afd     xorlw	0xfd               	XORLW	0xfd
00057a   e001     bz	0x57e                 	BZ	_00256_DS_
                                           _00255_DS_:
00057c   d058     bra	0x62e                	BRA	_00227_DS_
                                           _00256_DS_:
                                           ;	.line	439; brtos/queue.c	if ((pont_event->OSEventWaitList & PriorityMask[iPriority]))
00057e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000580   ffe9
000582   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000584   fff3
000586   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000588   ec50     call	0x6ea0, 0           	CALL	__gptrget2
00058a   f037
00058c   6e16     movwf	0x16, 0            	MOVWF	r0x16
00058e   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
000590   f017
                                           ; ;multiply lit val:0x02 by variable r0x11 and store in r0x11
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000592   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
000594   3611     rlcf	0x11, 0x1, 0        	RLCF	r0x11, F
000596   6a18     clrf	0x18, 0             	CLRF	r0x18
000598   6a19     clrf	0x19, 0             	CLRF	r0x19
00059a   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
00059c   2611     addwf	0x11, 0x1, 0       	ADDWF	r0x11, F
00059e   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
0005a0   2218     addwfc	0x18, 0x1, 0      	ADDWFC	r0x18, F
0005a2   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
0005a4   2219     addwfc	0x19, 0x1, 0      	ADDWFC	r0x19, F
0005a6   c011     movff	0x11, 0xff6        	MOVFF	r0x11, TBLPTRL
0005a8   fff6
0005aa   c018     movff	0x18, 0xff7        	MOVFF	r0x18, TBLPTRH
0005ac   fff7
0005ae   c019     movff	0x19, 0xff8        	MOVFF	r0x19, TBLPTRU
0005b0   fff8
0005b2   0009     tblrd	*+                 	TBLRD*+	
0005b4   cff5     movff	0xff5, 0x11        	MOVFF	TABLAT, r0x11
0005b6   f011
0005b8   0009     tblrd	*+                 	TBLRD*+	
0005ba   cff5     movff	0xff5, 0x18        	MOVFF	TABLAT, r0x18
0005bc   f018
0005be   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0005c0   1616     andwf	0x16, 0x1, 0       	ANDWF	r0x16, F
0005c2   5018     movf	0x18, 0, 0          	MOVF	r0x18, W
0005c4   1617     andwf	0x17, 0x1, 0       	ANDWF	r0x17, F
0005c6   5016     movf	0x16, 0, 0          	MOVF	r0x16, W
0005c8   1017     iorwf	0x17, 0, 0         	IORWF	r0x17, W
0005ca   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0005cc   d11f     bra	0x80c                	BRA	_00230_DS_
                                           ;	.line	442; brtos/queue.c	pont_event->OSEventWaitList = pont_event->OSEventWaitList & ~(PriorityMask[iPriority]);
0005ce   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0005d0   ffe9
0005d2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0005d4   fff3
0005d6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005d8   ec50     call	0x6ea0, 0           	CALL	__gptrget2
0005da   f037
0005dc   6e16     movwf	0x16, 0            	MOVWF	r0x16
0005de   cff3     movff	0xff3, 0x17        	MOVFF	PRODL, r0x17
0005e0   f017
0005e2   1e11     comf	0x11, 0x1, 0        	COMF	r0x11, F
0005e4   1e18     comf	0x18, 0x1, 0        	COMF	r0x18, F
0005e6   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0005e8   1616     andwf	0x16, 0x1, 0       	ANDWF	r0x16, F
0005ea   5018     movf	0x18, 0, 0          	MOVF	r0x18, W
0005ec   1617     andwf	0x17, 0x1, 0       	ANDWF	r0x17, F
0005ee   c016     movff	0x16, 0xfe5        	MOVFF	r0x16, POSTDEC1
0005f0   ffe5
0005f2   c017     movff	0x17, 0xff4        	MOVFF	r0x17, PRODH
0005f4   fff4
0005f6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0005f8   ffe9
0005fa   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0005fc   fff3
0005fe   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000600   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000602   f037
                                           ;	.line	445; brtos/queue.c	pont_event->OSEventWait--;
000604   c012     movff	0x12, 0xfe9        	MOVFF	r0x12, FSR0L
000606   ffe9
000608   c013     movff	0x13, 0xff3        	MOVFF	r0x13, PRODL
00060a   fff3
00060c   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
00060e   ec78     call	0x6ef0, 0           	CALL	__gptrget1
000610   f037
000612   6e00     movwf	0, 0               	MOVWF	r0x00
000614   0600     decf	0, 0x1, 0           	DECF	r0x00, F
000616   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000618   ffe5
00061a   c012     movff	0x12, 0xfe9        	MOVFF	r0x12, FSR0L
00061c   ffe9
00061e   c013     movff	0x13, 0xff3        	MOVFF	r0x13, PRODL
000620   fff3
000622   5014     movf	0x14, 0, 0          	MOVF	r0x14, W
000624   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
000626   f037
                                           ;	.line	448; brtos/queue.c	OSExitCritical();
000628   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	451; brtos/queue.c	return TIMEOUT;
00062a   0e06     movlw	0x6                	MOVLW	0x06
00062c   d18c     bra	0x946                	BRA	_00236_DS_
                                           _00227_DS_:
                                           ;	.line	457; brtos/queue.c	Task->TimeToWait = NO_TIMEOUT;
00062e   0ee8     movlw	0xe8               	MOVLW	0xe8
000630   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000632   0efd     movlw	0xfd               	MOVLW	0xfd
000634   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000636   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
000638   ffe9
00063a   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00063c   fff3
00063e   5015     movf	0x15, 0, 0          	MOVF	r0x15, W
000640   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000642   f037
                                           ;	.line	460; brtos/queue.c	RemoveFromDelayList();
000644   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000646   0103     movlb	0x3                	BANKSEL	_Head
000648   19ef     xorwf	0xef, 0, 0x1       	XORWF	_Head, W, B
00064a   e108     bnz	0x65c                	BNZ	_00258_DS_
00064c   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
00064e   0103     movlb	0x3                	BANKSEL	(_Head + 1)
000650   19f0     xorwf	0xf0, 0, 0x1       	XORWF	(_Head + 1), W, B
000652   e104     bnz	0x65c                	BNZ	_00258_DS_
000654   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
000656   0103     movlb	0x3                	BANKSEL	(_Head + 2)
000658   19f1     xorwf	0xf1, 0, 0x1       	XORWF	(_Head + 2), W, B
00065a   e001     bz	0x65e                 	BZ	_00259_DS_
                                           _00258_DS_:
00065c   d04a     bra	0x6f2                	BRA	_00224_DS_
                                           _00259_DS_:
00065e   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000660   0103     movlb	0x3                	BANKSEL	_Tail
000662   19ec     xorwf	0xec, 0, 0x1       	XORWF	_Tail, W, B
000664   e108     bnz	0x676                	BNZ	_00260_DS_
000666   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
000668   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
00066a   19ed     xorwf	0xed, 0, 0x1       	XORWF	(_Tail + 1), W, B
00066c   e104     bnz	0x676                	BNZ	_00260_DS_
00066e   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
000670   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
000672   19ee     xorwf	0xee, 0, 0x1       	XORWF	(_Tail + 2), W, B
000674   e001     bz	0x678                 	BZ	_00261_DS_
                                           _00260_DS_:
000676   d00d     bra	0x692                	BRA	_00218_DS_
                                           _00261_DS_:
000678   0103     movlb	0x3                	BANKSEL	_Tail
00067a   6bec     clrf	0xec, 0x1           	CLRF	_Tail, B
00067c   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
00067e   6bed     clrf	0xed, 0x1           	CLRF	(_Tail + 1), B
000680   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
000682   6bee     clrf	0xee, 0x1           	CLRF	(_Tail + 2), B
000684   0103     movlb	0x3                	BANKSEL	_Head
000686   6bef     clrf	0xef, 0x1           	CLRF	_Head, B
000688   0103     movlb	0x3                	BANKSEL	(_Head + 1)
00068a   6bf0     clrf	0xf0, 0x1           	CLRF	(_Head + 1), B
00068c   0103     movlb	0x3                	BANKSEL	(_Head + 2)
00068e   6bf1     clrf	0xf1, 0x1           	CLRF	(_Head + 2), B
000690   d0bd     bra	0x80c                	BRA	_00230_DS_
                                           _00218_DS_:
000692   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
000694   0f0a     addlw	0xa                	ADDLW	0x0a
000696   6e00     movwf	0, 0               	MOVWF	r0x00
000698   0e00     movlw	0                  	MOVLW	0x00
00069a   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
00069c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00069e   0e00     movlw	0                  	MOVLW	0x00
0006a0   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
0006a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0006a4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0006a6   ffe9
0006a8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0006aa   fff3
0006ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0006ae   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0006b0   f036
0006b2   0103     movlb	0x3                	BANKSEL	_Head
0006b4   6fef     movwf	0xef, 0x1          	MOVWF	_Head, B
0006b6   cff3     movff	0xff3, 0x3f0       	MOVFF	PRODL, (_Head + 1)
0006b8   f3f0
0006ba   cff4     movff	0xff4, 0x3f1       	MOVFF	PRODH, (_Head + 2)
0006bc   f3f1
0006be   c3ef     movff	0x3ef, 0           	MOVFF	_Head, r0x00
0006c0   f000
0006c2   c3f0     movff	0x3f0, 0x1         	MOVFF	(_Head + 1), r0x01
0006c4   f001
0006c6   c3f1     movff	0x3f1, 0x2         	MOVFF	(_Head + 2), r0x02
0006c8   f002
0006ca   0e0d     movlw	0xd                	MOVLW	0x0d
0006cc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0006ce   0e00     movlw	0                  	MOVLW	0x00
0006d0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0006d2   0e00     movlw	0                  	MOVLW	0x00
0006d4   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0006d6   0e00     movlw	0                  	MOVLW	0x00
0006d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006da   0e00     movlw	0                  	MOVLW	0x00
0006dc   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
0006de   0e00     movlw	0                  	MOVLW	0x00
0006e0   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
0006e2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0006e4   ffe9
0006e6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0006e8   fff3
0006ea   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0006ec   ec99     call	0x6f32, 0           	CALL	__gptrput3
0006ee   f037
0006f0   d08d     bra	0x80c                	BRA	_00230_DS_
                                           _00224_DS_:
0006f2   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0006f4   0103     movlb	0x3                	BANKSEL	_Tail
0006f6   19ec     xorwf	0xec, 0, 0x1       	XORWF	_Tail, W, B
0006f8   e108     bnz	0x70a                	BNZ	_00262_DS_
0006fa   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
0006fc   0103     movlb	0x3                	BANKSEL	(_Tail + 1)
0006fe   19ed     xorwf	0xed, 0, 0x1       	XORWF	(_Tail + 1), W, B
000700   e104     bnz	0x70a                	BNZ	_00262_DS_
000702   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
000704   0103     movlb	0x3                	BANKSEL	(_Tail + 2)
000706   19ee     xorwf	0xee, 0, 0x1       	XORWF	(_Tail + 2), W, B
000708   e001     bz	0x70c                 	BZ	_00263_DS_
                                           _00262_DS_:
00070a   d030     bra	0x76c                	BRA	_00221_DS_
                                           _00263_DS_:
00070c   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00070e   0f0d     addlw	0xd                	ADDLW	0x0d
000710   6e00     movwf	0, 0               	MOVWF	r0x00
000712   0e00     movlw	0                  	MOVLW	0x00
000714   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
000716   6e01     movwf	0x1, 0             	MOVWF	r0x01
000718   0e00     movlw	0                  	MOVLW	0x00
00071a   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
00071c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00071e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000720   ffe9
000722   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000724   fff3
000726   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000728   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
00072a   f036
00072c   0103     movlb	0x3                	BANKSEL	_Tail
00072e   6fec     movwf	0xec, 0x1          	MOVWF	_Tail, B
000730   cff3     movff	0xff3, 0x3ed       	MOVFF	PRODL, (_Tail + 1)
000732   f3ed
000734   cff4     movff	0xff4, 0x3ee       	MOVFF	PRODH, (_Tail + 2)
000736   f3ee
000738   c3ec     movff	0x3ec, 0           	MOVFF	_Tail, r0x00
00073a   f000
00073c   c3ed     movff	0x3ed, 0x1         	MOVFF	(_Tail + 1), r0x01
00073e   f001
000740   c3ee     movff	0x3ee, 0x2         	MOVFF	(_Tail + 2), r0x02
000742   f002
000744   0e0a     movlw	0xa                	MOVLW	0x0a
000746   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000748   0e00     movlw	0                  	MOVLW	0x00
00074a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00074c   0e00     movlw	0                  	MOVLW	0x00
00074e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000750   0e00     movlw	0                  	MOVLW	0x00
000752   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000754   0e00     movlw	0                  	MOVLW	0x00
000756   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
000758   0e00     movlw	0                  	MOVLW	0x00
00075a   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
00075c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00075e   ffe9
000760   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000762   fff3
000764   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000766   ec99     call	0x6f32, 0           	CALL	__gptrput3
000768   f037
00076a   d050     bra	0x80c                	BRA	_00230_DS_
                                           _00221_DS_:
00076c   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00076e   0f0a     addlw	0xa                	ADDLW	0x0a
000770   6e00     movwf	0, 0               	MOVWF	r0x00
000772   0e00     movlw	0                  	MOVLW	0x00
000774   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
000776   6e01     movwf	0x1, 0             	MOVWF	r0x01
000778   0e00     movlw	0                  	MOVLW	0x00
00077a   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
00077c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00077e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000780   ffe9
000782   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000784   fff3
000786   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000788   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
00078a   f036
00078c   6e00     movwf	0, 0               	MOVWF	r0x00
00078e   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000790   f001
000792   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000794   f002
000796   5000     movf	0, 0, 0             	MOVF	r0x00, W
000798   0f0d     addlw	0xd                	ADDLW	0x0d
00079a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00079c   0e00     movlw	0                  	MOVLW	0x00
00079e   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0007a0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0007a2   0e00     movlw	0                  	MOVLW	0x00
0007a4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0007a6   6e11     movwf	0x11, 0            	MOVWF	r0x11
0007a8   0e0d     movlw	0xd                	MOVLW	0x0d
0007aa   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
0007ac   0e00     movlw	0                  	MOVLW	0x00
0007ae   220f     addwfc	0xf, 0x1, 0       	ADDWFC	r0x0f, F
0007b0   0e00     movlw	0                  	MOVLW	0x00
0007b2   2210     addwfc	0x10, 0x1, 0      	ADDWFC	r0x10, F
0007b4   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
0007b6   ffe9
0007b8   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
0007ba   fff3
0007bc   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
0007be   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0007c0   f036
0007c2   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0007c4   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
0007c6   f00f
0007c8   cff4     movff	0xff4, 0x10        	MOVFF	PRODH, r0x10
0007ca   f010
0007cc   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0007ce   ffe5
0007d0   c00f     movff	0xf, 0xff4         	MOVFF	r0x0f, PRODH
0007d2   fff4
0007d4   c010     movff	0x10, 0xff6        	MOVFF	r0x10, TBLPTRL
0007d6   fff6
0007d8   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0007da   ffe9
0007dc   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0007de   fff3
0007e0   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
0007e2   ec99     call	0x6f32, 0           	CALL	__gptrput3
0007e4   f037
0007e6   0e0a     movlw	0xa                	MOVLW	0x0a
0007e8   260e     addwf	0xe, 0x1, 0        	ADDWF	r0x0e, F
0007ea   0e00     movlw	0                  	MOVLW	0x00
0007ec   220f     addwfc	0xf, 0x1, 0       	ADDWFC	r0x0f, F
0007ee   0e00     movlw	0                  	MOVLW	0x00
0007f0   2210     addwfc	0x10, 0x1, 0      	ADDWFC	r0x10, F
0007f2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0007f4   ffe5
0007f6   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
0007f8   fff4
0007fa   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
0007fc   fff6
0007fe   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
000800   ffe9
000802   c00f     movff	0xf, 0xff3         	MOVFF	r0x0f, PRODL
000804   fff3
000806   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
000808   ec99     call	0x6f32, 0           	CALL	__gptrput3
00080a   f037
                                           _00230_DS_:
                                           ;	.line	466; brtos/queue.c	if (cqueue->OSQOut == cqueue->OSQEnd)
00080c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00080e   0f0c     addlw	0xc                	ADDLW	0x0c
000810   6e00     movwf	0, 0               	MOVWF	r0x00
000812   0e00     movlw	0                  	MOVLW	0x00
000814   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
000816   6e01     movwf	0x1, 0             	MOVWF	r0x01
000818   0e00     movlw	0                  	MOVLW	0x00
00081a   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
00081c   6e02     movwf	0x2, 0             	MOVWF	r0x02
00081e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000820   ffe9
000822   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000824   fff3
000826   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000828   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
00082a   f036
00082c   6e06     movwf	0x6, 0             	MOVWF	r0x06
00082e   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
000830   f007
000832   cff4     movff	0xff4, 0xe         	MOVFF	PRODH, r0x0e
000834   f00e
000836   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000838   0f06     addlw	0x6                	ADDLW	0x06
00083a   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
00083c   0e00     movlw	0                  	MOVLW	0x00
00083e   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
000840   6e10     movwf	0x10, 0            	MOVWF	r0x10
000842   0e00     movlw	0                  	MOVLW	0x00
000844   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
000846   6e11     movwf	0x11, 0            	MOVWF	r0x11
000848   c00f     movff	0xf, 0xfe9         	MOVFF	r0x0f, FSR0L
00084a   ffe9
00084c   c010     movff	0x10, 0xff3        	MOVFF	r0x10, PRODL
00084e   fff3
000850   5011     movf	0x11, 0, 0          	MOVF	r0x11, W
000852   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
000854   f036
000856   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
000858   cff3     movff	0xff3, 0x10        	MOVFF	PRODL, r0x10
00085a   f010
00085c   cff4     movff	0xff4, 0x11        	MOVFF	PRODH, r0x11
00085e   f011
000860   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000862   180f     xorwf	0xf, 0, 0          	XORWF	r0x0f, W
000864   e106     bnz	0x872                	BNZ	_00264_DS_
000866   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
000868   1810     xorwf	0x10, 0, 0         	XORWF	r0x10, W
00086a   e103     bnz	0x872                	BNZ	_00264_DS_
00086c   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00086e   1811     xorwf	0x11, 0, 0         	XORWF	r0x11, W
000870   e001     bz	0x874                 	BZ	_00265_DS_
                                           _00264_DS_:
000872   d01f     bra	0x8b2                	BRA	_00232_DS_
                                           _00265_DS_:
                                           ;	.line	467; brtos/queue.c	cqueue->OSQOut = cqueue->OSQStart;
000874   0e03     movlw	0x3                	MOVLW	0x03
000876   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
000878   0e00     movlw	0                  	MOVLW	0x00
00087a   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
00087c   0e00     movlw	0                  	MOVLW	0x00
00087e   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
000880   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
000882   ffe9
000884   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
000886   fff3
000888   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00088a   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
00088c   f036
00088e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000890   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000892   f009
000894   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
000896   f00a
000898   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00089a   ffe5
00089c   c009     movff	0x9, 0xff4         	MOVFF	r0x09, PRODH
00089e   fff4
0008a0   c00a     movff	0xa, 0xff6         	MOVFF	r0x0a, TBLPTRL
0008a2   fff6
0008a4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0008a6   ffe9
0008a8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0008aa   fff3
0008ac   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008ae   ec99     call	0x6f32, 0           	CALL	__gptrput3
0008b0   f037
                                           _00232_DS_:
                                           ;	.line	470; brtos/queue.c	*pdata = *cqueue->OSQOut;
0008b2   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0008b4   ffe9
0008b6   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0008b8   fff3
0008ba   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0008bc   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0008be   f036
0008c0   6e06     movwf	0x6, 0             	MOVWF	r0x06
0008c2   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
0008c4   f007
0008c6   cff4     movff	0xff4, 0x8         	MOVFF	PRODH, r0x08
0008c8   f008
0008ca   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0008cc   ffe9
0008ce   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0008d0   fff3
0008d2   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0008d4   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0008d6   f037
0008d8   6e09     movwf	0x9, 0             	MOVWF	r0x09
0008da   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0008dc   ffe5
0008de   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0008e0   ffe9
0008e2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0008e4   fff3
0008e6   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0008e8   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0008ea   f037
                                           ;	.line	473; brtos/queue.c	cqueue->OSQOut++;
0008ec   2a06     incf	0x6, 0x1, 0         	INCF	r0x06, F
0008ee   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008f0   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
0008f2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0008f4   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
0008f6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0008f8   ffe5
0008fa   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
0008fc   fff4
0008fe   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
000900   fff6
000902   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000904   ffe9
000906   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000908   fff3
00090a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00090c   ec99     call	0x6f32, 0           	CALL	__gptrput3
00090e   f037
                                           ;	.line	476; brtos/queue.c	cqueue->OSQEntries--;
000910   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
000912   ffe9
000914   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
000916   fff3
000918   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00091a   ec50     call	0x6ea0, 0           	CALL	__gptrget2
00091c   f037
00091e   6e00     movwf	0, 0               	MOVWF	r0x00
000920   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000922   f001
000924   0eff     movlw	0xff               	MOVLW	0xff
000926   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000928   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00092a   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
00092c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00092e   ffe5
000930   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
000932   fff4
000934   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
000936   ffe9
000938   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
00093a   fff3
00093c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00093e   ecb3     call	0x6f66, 0           	CALL	__gptrput2
000940   f037
                                           ;	.line	479; brtos/queue.c	OSExitCritical();
000942   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	480; brtos/queue.c	return READ_BUFFER_OK;
000944   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00236_DS_:
000946   cfe4     movff	0xfe4, 0x1f        	MOVFF	PREINC1, r0x1f
000948   f01f
00094a   cfe4     movff	0xfe4, 0x1e        	MOVFF	PREINC1, r0x1e
00094c   f01e
00094e   cfe4     movff	0xfe4, 0x1d        	MOVFF	PREINC1, r0x1d
000950   f01d
000952   cfe4     movff	0xfe4, 0x1c        	MOVFF	PREINC1, r0x1c
000954   f01c
000956   cfe4     movff	0xfe4, 0x1b        	MOVFF	PREINC1, r0x1b
000958   f01b
00095a   cfe4     movff	0xfe4, 0x1a        	MOVFF	PREINC1, r0x1a
00095c   f01a
00095e   cfe4     movff	0xfe4, 0x19        	MOVFF	PREINC1, r0x19
000960   f019
000962   cfe4     movff	0xfe4, 0x18        	MOVFF	PREINC1, r0x18
000964   f018
000966   cfe4     movff	0xfe4, 0x17        	MOVFF	PREINC1, r0x17
000968   f017
00096a   cfe4     movff	0xfe4, 0x16        	MOVFF	PREINC1, r0x16
00096c   f016
00096e   cfe4     movff	0xfe4, 0x15        	MOVFF	PREINC1, r0x15
000970   f015
000972   cfe4     movff	0xfe4, 0x14        	MOVFF	PREINC1, r0x14
000974   f014
000976   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
000978   f013
00097a   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
00097c   f012
00097e   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
000980   f011
000982   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
000984   f010
000986   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
000988   f00f
00098a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
00098c   f00e
00098e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000990   f00d
000992   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000994   f00c
000996   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000998   f00b
00099a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
00099c   f00a
00099e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0009a0   f009
0009a2   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0009a4   f008
0009a6   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0009a8   f007
0009aa   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0009ac   f006
0009ae   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0009b0   f005
0009b2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0009b4   f004
0009b6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0009b8   f003
0009ba   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0009bc   f002
0009be   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0009c0   f001
0009c2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0009c4   f000
0009c6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0009c8   ffd9
0009ca   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0009cc   ffda
0009ce   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_queue__OSCleanQueue	code
                                           _OSCleanQueue:
                                           ;	.line	278; brtos/queue.c	INT8U OSCleanQueue(BRTOS_Queue *pont_event)
004f30   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
004f32   ffe5
004f34   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
004f36   ffe5
004f38   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
004f3a   ffda
004f3c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004f3e   ffd9
004f40   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004f42   ffe5
004f44   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
004f46   ffe5
004f48   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
004f4a   ffe5
004f4c   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
004f4e   ffe5
004f50   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
004f52   ffe5
004f54   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
004f56   ffe5
004f58   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
004f5a   ffe5
004f5c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004f5e   ffe5
004f60   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004f62   ffe5
004f64   0e03     movlw	0x3                	MOVLW	0x03
004f66   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
004f68   f000
004f6a   0e04     movlw	0x4                	MOVLW	0x04
004f6c   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004f6e   f001
004f70   0e05     movlw	0x5                	MOVLW	0x05
004f72   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004f74   f002
                                           ;	.line	281; brtos/queue.c	OS_QUEUE *cqueue = pont_event->OSEventPointer;
004f76   0e03     movlw	0x3                	MOVLW	0x03
004f78   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004f7a   0e00     movlw	0                  	MOVLW	0x00
004f7c   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004f7e   0e00     movlw	0                  	MOVLW	0x00
004f80   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
004f82   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004f84   ffe9
004f86   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004f88   fff3
004f8a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
004f8c   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
004f8e   f036
004f90   6e00     movwf	0, 0               	MOVWF	r0x00
004f92   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
004f94   f001
004f96   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
004f98   f002
004f9a   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	285; brtos/queue.c	if (!iNesting)
004f9c   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
004f9e   e101     bnz	0x4fa2               	BNZ	_00196_DS_
                                           ;	.line	287; brtos/queue.c	OSEnterCritical();
004fa0   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00196_DS_:
                                           ;	.line	289; brtos/queue.c	cqueue->OSQEntries = 0;
004fa2   5000     movf	0, 0, 0             	MOVF	r0x00, W
004fa4   0f11     addlw	0x11               	ADDLW	0x11
004fa6   6e03     movwf	0x3, 0             	MOVWF	r0x03
004fa8   0e00     movlw	0                  	MOVLW	0x00
004faa   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004fac   6e04     movwf	0x4, 0             	MOVWF	r0x04
004fae   0e00     movlw	0                  	MOVLW	0x00
004fb0   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004fb2   6e05     movwf	0x5, 0             	MOVWF	r0x05
004fb4   0e00     movlw	0                  	MOVLW	0x00
004fb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004fb8   0e00     movlw	0                  	MOVLW	0x00
004fba   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
004fbc   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004fbe   ffe9
004fc0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004fc2   fff3
004fc4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004fc6   ecb3     call	0x6f66, 0           	CALL	__gptrput2
004fc8   f037
                                           ;	.line	291; brtos/queue.c	cqueue->OSQIn = cqueue->OSQStart;
004fca   5000     movf	0, 0, 0             	MOVF	r0x00, W
004fcc   0f09     addlw	0x9                	ADDLW	0x09
004fce   6e03     movwf	0x3, 0             	MOVWF	r0x03
004fd0   0e00     movlw	0                  	MOVLW	0x00
004fd2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004fd4   6e04     movwf	0x4, 0             	MOVWF	r0x04
004fd6   0e00     movlw	0                  	MOVLW	0x00
004fd8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004fda   6e05     movwf	0x5, 0             	MOVWF	r0x05
004fdc   5000     movf	0, 0, 0             	MOVF	r0x00, W
004fde   0f03     addlw	0x3                	ADDLW	0x03
004fe0   6e06     movwf	0x6, 0             	MOVWF	r0x06
004fe2   0e00     movlw	0                  	MOVLW	0x00
004fe4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
004fe6   6e07     movwf	0x7, 0             	MOVWF	r0x07
004fe8   0e00     movlw	0                  	MOVLW	0x00
004fea   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
004fec   6e08     movwf	0x8, 0             	MOVWF	r0x08
004fee   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
004ff0   ffe9
004ff2   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
004ff4   fff3
004ff6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004ff8   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
004ffa   f036
004ffc   6e06     movwf	0x6, 0             	MOVWF	r0x06
004ffe   cff3     movff	0xff3, 0x7         	MOVFF	PRODL, r0x07
005000   f007
005002   cff4     movff	0xff4, 0x8         	MOVFF	PRODH, r0x08
005004   f008
005006   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
005008   ffe5
00500a   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
00500c   fff4
00500e   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
005010   fff6
005012   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
005014   ffe9
005016   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
005018   fff3
00501a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00501c   ec99     call	0x6f32, 0           	CALL	__gptrput3
00501e   f037
                                           ;	.line	292; brtos/queue.c	cqueue->OSQOut = cqueue->OSQStart;
005020   0e0c     movlw	0xc                	MOVLW	0x0c
005022   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
005024   0e00     movlw	0                  	MOVLW	0x00
005026   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
005028   0e00     movlw	0                  	MOVLW	0x00
00502a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00502c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00502e   ffe5
005030   c007     movff	0x7, 0xff4         	MOVFF	r0x07, PRODH
005032   fff4
005034   c008     movff	0x8, 0xff6         	MOVFF	r0x08, TBLPTRL
005036   fff6
005038   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00503a   ffe9
00503c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00503e   fff3
005040   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005042   ec99     call	0x6f32, 0           	CALL	__gptrput3
005044   f037
005046   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	296; brtos/queue.c	if (!iNesting)
005048   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00504a   e101     bnz	0x504e               	BNZ	_00198_DS_
                                           ;	.line	298; brtos/queue.c	OSExitCritical();  
00504c   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00198_DS_:
                                           ;	.line	300; brtos/queue.c	return CLEAN_BUFFER_OK;
00504e   0e02     movlw	0x2                	MOVLW	0x02
005050   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
005052   f008
005054   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
005056   f007
005058   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00505a   f006
00505c   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00505e   f005
005060   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
005062   f004
005064   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005066   f003
005068   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00506a   f002
00506c   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00506e   f001
005070   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005072   f000
005074   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005076   ffd9
005078   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
00507a   ffda
00507c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_queue__OSRQueue	code
                                           _OSRQueue:
                                           ;	.line	222; brtos/queue.c	INT8U OSRQueue(OS_QUEUE *cqueue, INT8U* pdata)
00334e   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
003350   ffe5
003352   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003354   ffe5
003356   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
003358   ffda
00335a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00335c   ffd9
00335e   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003360   ffe5
003362   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003364   ffe5
003366   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003368   ffe5
00336a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00336c   ffe5
00336e   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003370   ffe5
003372   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003374   ffe5
003376   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
003378   ffe5
00337a   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00337c   ffe5
00337e   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003380   ffe5
003382   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003384   ffe5
003386   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003388   ffe5
00338a   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
00338c   ffe5
00338e   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
003390   ffe5
003392   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
003394   ffe5
003396   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
003398   ffe5
00339a   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
00339c   ffe5
00339e   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0033a0   ffe5
0033a2   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0033a4   ffe5
0033a6   c012     movff	0x12, 0xfe5        	MOVFF	r0x12, POSTDEC1
0033a8   ffe5
0033aa   c013     movff	0x13, 0xfe5        	MOVFF	r0x13, POSTDEC1
0033ac   ffe5
0033ae   0e03     movlw	0x3                	MOVLW	0x03
0033b0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0033b2   f000
0033b4   0e04     movlw	0x4                	MOVLW	0x04
0033b6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0033b8   f001
0033ba   0e05     movlw	0x5                	MOVLW	0x05
0033bc   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0033be   f002
0033c0   0e06     movlw	0x6                	MOVLW	0x06
0033c2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0033c4   f003
0033c6   0e07     movlw	0x7                	MOVLW	0x07
0033c8   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0033ca   f004
0033cc   0e08     movlw	0x8                	MOVLW	0x08
0033ce   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0033d0   f005
0033d2   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	228; brtos/queue.c	if (!iNesting)
0033d4   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0033d6   e101     bnz	0x33da               	BNZ	_00172_DS_
                                           ;	.line	230; brtos/queue.c	OSEnterCritical();
0033d8   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00172_DS_:
                                           ;	.line	232; brtos/queue.c	if(cqueue->OSQEntries > 0)
0033da   5000     movf	0, 0, 0             	MOVF	r0x00, W
0033dc   0f11     addlw	0x11               	ADDLW	0x11
0033de   6e06     movwf	0x6, 0             	MOVWF	r0x06
0033e0   0e00     movlw	0                  	MOVLW	0x00
0033e2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0033e4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0033e6   0e00     movlw	0                  	MOVLW	0x00
0033e8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0033ea   6e08     movwf	0x8, 0             	MOVWF	r0x08
0033ec   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0033ee   ffe9
0033f0   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0033f2   fff3
0033f4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0033f6   ec50     call	0x6ea0, 0           	CALL	__gptrget2
0033f8   f037
0033fa   6e09     movwf	0x9, 0             	MOVWF	r0x09
0033fc   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
0033fe   f00a
003400   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003402   100a     iorwf	0xa, 0, 0          	IORWF	r0x0a, W
003404   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
003406   d097     bra	0x3536               	BRA	_00180_DS_
                                           ;	.line	235; brtos/queue.c	if (cqueue->OSQOut == cqueue->OSQEnd)
003408   5000     movf	0, 0, 0             	MOVF	r0x00, W
00340a   0f0c     addlw	0xc                	ADDLW	0x0c
00340c   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
00340e   0e00     movlw	0                  	MOVLW	0x00
003410   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003412   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
003414   0e00     movlw	0                  	MOVLW	0x00
003416   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003418   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00341a   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
00341c   ffe9
00341e   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
003420   fff3
003422   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003424   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
003426   f036
003428   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00342a   cff3     movff	0xff3, 0xf         	MOVFF	PRODL, r0x0f
00342c   f00f
00342e   cff4     movff	0xff4, 0x10        	MOVFF	PRODH, r0x10
003430   f010
003432   5000     movf	0, 0, 0             	MOVF	r0x00, W
003434   0f06     addlw	0x6                	ADDLW	0x06
003436   6e11     movwf	0x11, 0            	MOVWF	r0x11
003438   0e00     movlw	0                  	MOVLW	0x00
00343a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00343c   6e12     movwf	0x12, 0            	MOVWF	r0x12
00343e   0e00     movlw	0                  	MOVLW	0x00
003440   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003442   6e13     movwf	0x13, 0            	MOVWF	r0x13
003444   c011     movff	0x11, 0xfe9        	MOVFF	r0x11, FSR0L
003446   ffe9
003448   c012     movff	0x12, 0xff3        	MOVFF	r0x12, PRODL
00344a   fff3
00344c   5013     movf	0x13, 0, 0          	MOVF	r0x13, W
00344e   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
003450   f036
003452   6e11     movwf	0x11, 0            	MOVWF	r0x11
003454   cff3     movff	0xff3, 0x12        	MOVFF	PRODL, r0x12
003456   f012
003458   cff4     movff	0xff4, 0x13        	MOVFF	PRODH, r0x13
00345a   f013
00345c   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00345e   1811     xorwf	0x11, 0, 0         	XORWF	r0x11, W
003460   e106     bnz	0x346e               	BNZ	_00189_DS_
003462   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
003464   1812     xorwf	0x12, 0, 0         	XORWF	r0x12, W
003466   e103     bnz	0x346e               	BNZ	_00189_DS_
003468   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
00346a   1813     xorwf	0x13, 0, 0         	XORWF	r0x13, W
00346c   e001     bz	0x3470                	BZ	_00190_DS_
                                           _00189_DS_:
00346e   d01f     bra	0x34ae               	BRA	_00174_DS_
                                           _00190_DS_:
                                           ;	.line	236; brtos/queue.c	cqueue->OSQOut = cqueue->OSQStart;
003470   0e03     movlw	0x3                	MOVLW	0x03
003472   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003474   0e00     movlw	0                  	MOVLW	0x00
003476   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003478   0e00     movlw	0                  	MOVLW	0x00
00347a   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00347c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00347e   ffe9
003480   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003482   fff3
003484   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003486   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
003488   f036
00348a   6e00     movwf	0, 0               	MOVWF	r0x00
00348c   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00348e   f001
003490   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
003492   f002
003494   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003496   ffe5
003498   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
00349a   fff4
00349c   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
00349e   fff6
0034a0   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
0034a2   ffe9
0034a4   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
0034a6   fff3
0034a8   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0034aa   ec99     call	0x6f32, 0           	CALL	__gptrput3
0034ac   f037
                                           _00174_DS_:
                                           ;	.line	238; brtos/queue.c	*pdata = *(cqueue->OSQOut);
0034ae   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
0034b0   ffe9
0034b2   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
0034b4   fff3
0034b6   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
0034b8   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0034ba   f036
0034bc   6e00     movwf	0, 0               	MOVWF	r0x00
0034be   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0034c0   f001
0034c2   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0034c4   f002
0034c6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0034c8   ffe9
0034ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0034cc   fff3
0034ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0034d0   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0034d2   f037
0034d4   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
0034d6   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0034d8   ffe5
0034da   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0034dc   ffe9
0034de   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0034e0   fff3
0034e2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0034e4   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0034e6   f037
                                           ;	.line	240; brtos/queue.c	cqueue->OSQOut++;
0034e8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0034ea   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0034ec   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0034ee   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0034f0   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0034f2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0034f4   ffe5
0034f6   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
0034f8   fff4
0034fa   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
0034fc   fff6
0034fe   c00b     movff	0xb, 0xfe9         	MOVFF	r0x0b, FSR0L
003500   ffe9
003502   c00c     movff	0xc, 0xff3         	MOVFF	r0x0c, PRODL
003504   fff3
003506   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
003508   ec99     call	0x6f32, 0           	CALL	__gptrput3
00350a   f037
                                           ;	.line	241; brtos/queue.c	cqueue->OSQEntries--;
00350c   0eff     movlw	0xff               	MOVLW	0xff
00350e   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
003510   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
003512   060a     decf	0xa, 0x1, 0         	DECF	r0x0a, F
003514   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003516   ffe5
003518   c00a     movff	0xa, 0xff4         	MOVFF	r0x0a, PRODH
00351a   fff4
00351c   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00351e   ffe9
003520   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
003522   fff3
003524   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003526   ecb3     call	0x6f66, 0           	CALL	__gptrput2
003528   f037
00352a   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	245; brtos/queue.c	if (!iNesting)
00352c   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00352e   e101     bnz	0x3532               	BNZ	_00176_DS_
                                           ;	.line	247; brtos/queue.c	OSExitCritical();
003530   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00176_DS_:
                                           ;	.line	249; brtos/queue.c	return READ_BUFFER_OK;
003532   6ae8     clrf	0xe8, 0             	CLRF	WREG
003534   d005     bra	0x3540               	BRA	_00182_DS_
                                           _00180_DS_:
003536   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	255; brtos/queue.c	if (!iNesting)
003538   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00353a   e101     bnz	0x353e               	BNZ	_00178_DS_
                                           ;	.line	257; brtos/queue.c	OSExitCritical();
00353c   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00178_DS_:
                                           ;	.line	259; brtos/queue.c	return NO_ENTRY_AVAILABLE;
00353e   0e03     movlw	0x3                	MOVLW	0x03
                                           _00182_DS_:
003540   cfe4     movff	0xfe4, 0x13        	MOVFF	PREINC1, r0x13
003542   f013
003544   cfe4     movff	0xfe4, 0x12        	MOVFF	PREINC1, r0x12
003546   f012
003548   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
00354a   f011
00354c   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00354e   f010
003550   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
003552   f00f
003554   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
003556   f00e
003558   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
00355a   f00d
00355c   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00355e   f00c
003560   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003562   f00b
003564   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003566   f00a
003568   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00356a   f009
00356c   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00356e   f008
003570   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003572   f007
003574   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003576   f006
003578   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00357a   f005
00357c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00357e   f004
003580   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003582   f003
003584   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003586   f002
003588   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00358a   f001
00358c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00358e   f000
003590   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003592   ffd9
003594   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
003596   ffda
003598   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_queue__OSWQueue	code
                                           _OSWQueue:
                                           ;	.line	166; brtos/queue.c	INT8U OSWQueue(OS_QUEUE *cqueue, INT8U newdata)
00359a   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00359c   ffe5
00359e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0035a0   ffe5
0035a2   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0035a4   ffda
0035a6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0035a8   ffd9
0035aa   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0035ac   ffe5
0035ae   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0035b0   ffe5
0035b2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0035b4   ffe5
0035b6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0035b8   ffe5
0035ba   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0035bc   ffe5
0035be   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0035c0   ffe5
0035c2   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0035c4   ffe5
0035c6   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0035c8   ffe5
0035ca   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0035cc   ffe5
0035ce   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0035d0   ffe5
0035d2   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0035d4   ffe5
0035d6   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0035d8   ffe5
0035da   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
0035dc   ffe5
0035de   0e03     movlw	0x3                	MOVLW	0x03
0035e0   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0035e2   f000
0035e4   0e04     movlw	0x4                	MOVLW	0x04
0035e6   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0035e8   f001
0035ea   0e05     movlw	0x5                	MOVLW	0x05
0035ec   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0035ee   f002
0035f0   0e06     movlw	0x6                	MOVLW	0x06
0035f2   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0035f4   f003
0035f6   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	172; brtos/queue.c	if (!iNesting)
0035f8   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0035fa   e101     bnz	0x35fe               	BNZ	_00147_DS_
                                           ;	.line	174; brtos/queue.c	OSEnterCritical();
0035fc   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00147_DS_:
                                           ;	.line	176; brtos/queue.c	if (cqueue->OSQEntries < cqueue->OSQSize)
0035fe   5000     movf	0, 0, 0             	MOVF	r0x00, W
003600   0f11     addlw	0x11               	ADDLW	0x11
003602   6e04     movwf	0x4, 0             	MOVWF	r0x04
003604   0e00     movlw	0                  	MOVLW	0x00
003606   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
003608   6e05     movwf	0x5, 0             	MOVWF	r0x05
00360a   0e00     movlw	0                  	MOVLW	0x00
00360c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00360e   6e06     movwf	0x6, 0             	MOVWF	r0x06
003610   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003612   ffe9
003614   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
003616   fff3
003618   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00361a   ec50     call	0x6ea0, 0           	CALL	__gptrget2
00361c   f037
00361e   6e07     movwf	0x7, 0             	MOVWF	r0x07
003620   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
003622   f008
003624   5000     movf	0, 0, 0             	MOVF	r0x00, W
003626   0f0f     addlw	0xf                	ADDLW	0x0f
003628   6e09     movwf	0x9, 0             	MOVWF	r0x09
00362a   0e00     movlw	0                  	MOVLW	0x00
00362c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00362e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
003630   0e00     movlw	0                  	MOVLW	0x00
003632   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003634   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
003636   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
003638   ffe9
00363a   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
00363c   fff3
00363e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
003640   ec50     call	0x6ea0, 0           	CALL	__gptrget2
003642   f037
003644   6e09     movwf	0x9, 0             	MOVWF	r0x09
003646   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
003648   f00a
00364a   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00364c   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
00364e   e102     bnz	0x3654               	BNZ	_00164_DS_
003650   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003652   5c07     subwf	0x7, 0, 0          	SUBWF	r0x07, W
                                           _00164_DS_:
003654   e20f     bc	0x3674                	BC	_00151_DS_
                                           ;	.line	178; brtos/queue.c	cqueue->OSQEntries++;
003656   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
003658   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00365a   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
00365c   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00365e   ffe5
003660   c008     movff	0x8, 0xff4         	MOVFF	r0x08, PRODH
003662   fff4
003664   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003666   ffe9
003668   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00366a   fff3
00366c   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00366e   ecb3     call	0x6f66, 0           	CALL	__gptrput2
003670   f037
003672   d006     bra	0x3680               	BRA	_00152_DS_
                                           _00151_DS_:
003674   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	184; brtos/queue.c	if (!iNesting)
003676   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
003678   e101     bnz	0x367c               	BNZ	_00149_DS_
                                           ;	.line	186; brtos/queue.c	OSExitCritical();
00367a   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00149_DS_:
                                           ;	.line	188; brtos/queue.c	return BUFFER_UNDERRUN;
00367c   0e01     movlw	0x1                	MOVLW	0x01
00367e   d07f     bra	0x377e               	BRA	_00157_DS_
                                           _00152_DS_:
                                           ;	.line	191; brtos/queue.c	if (cqueue->OSQIn == cqueue->OSQEnd)
003680   5000     movf	0, 0, 0             	MOVF	r0x00, W
003682   0f09     addlw	0x9                	ADDLW	0x09
003684   6e04     movwf	0x4, 0             	MOVWF	r0x04
003686   0e00     movlw	0                  	MOVLW	0x00
003688   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00368a   6e05     movwf	0x5, 0             	MOVWF	r0x05
00368c   0e00     movlw	0                  	MOVLW	0x00
00368e   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
003690   6e06     movwf	0x6, 0             	MOVWF	r0x06
003692   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003694   ffe9
003696   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
003698   fff3
00369a   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
00369c   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
00369e   f036
0036a0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0036a2   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
0036a4   f008
0036a6   cff4     movff	0xff4, 0x9         	MOVFF	PRODH, r0x09
0036a8   f009
0036aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0036ac   0f06     addlw	0x6                	ADDLW	0x06
0036ae   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0036b0   0e00     movlw	0                  	MOVLW	0x00
0036b2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0036b4   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0036b6   0e00     movlw	0                  	MOVLW	0x00
0036b8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0036ba   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0036bc   c00a     movff	0xa, 0xfe9         	MOVFF	r0x0a, FSR0L
0036be   ffe9
0036c0   c00b     movff	0xb, 0xff3         	MOVFF	r0x0b, PRODL
0036c2   fff3
0036c4   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
0036c6   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
0036c8   f036
0036ca   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0036cc   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
0036ce   f00b
0036d0   cff4     movff	0xff4, 0xc         	MOVFF	PRODH, r0x0c
0036d2   f00c
0036d4   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
0036d6   180a     xorwf	0xa, 0, 0          	XORWF	r0x0a, W
0036d8   e106     bnz	0x36e6               	BNZ	_00165_DS_
0036da   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0036dc   180b     xorwf	0xb, 0, 0          	XORWF	r0x0b, W
0036de   e103     bnz	0x36e6               	BNZ	_00165_DS_
0036e0   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
0036e2   180c     xorwf	0xc, 0, 0          	XORWF	r0x0c, W
0036e4   e001     bz	0x36e8                	BZ	_00166_DS_
                                           _00165_DS_:
0036e6   d01f     bra	0x3726               	BRA	_00154_DS_
                                           _00166_DS_:
                                           ;	.line	192; brtos/queue.c	cqueue->OSQIn = cqueue->OSQStart;
0036e8   0e03     movlw	0x3                	MOVLW	0x03
0036ea   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0036ec   0e00     movlw	0                  	MOVLW	0x00
0036ee   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0036f0   0e00     movlw	0                  	MOVLW	0x00
0036f2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0036f4   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0036f6   ffe9
0036f8   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0036fa   fff3
0036fc   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0036fe   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
003700   f036
003702   6e00     movwf	0, 0               	MOVWF	r0x00
003704   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003706   f001
003708   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00370a   f002
00370c   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00370e   ffe5
003710   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
003712   fff4
003714   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
003716   fff6
003718   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00371a   ffe9
00371c   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00371e   fff3
003720   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003722   ec99     call	0x6f32, 0           	CALL	__gptrput3
003724   f037
                                           _00154_DS_:
                                           ;	.line	194; brtos/queue.c	*(cqueue->OSQIn) = newdata;
003726   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003728   ffe9
00372a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00372c   fff3
00372e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003730   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
003732   f036
003734   6e00     movwf	0, 0               	MOVWF	r0x00
003736   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003738   f001
00373a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00373c   f002
00373e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003740   ffe5
003742   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003744   ffe9
003746   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003748   fff3
00374a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00374c   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00374e   f037
                                           ;	.line	195; brtos/queue.c	cqueue->OSQIn++; 
003750   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
003752   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003754   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
003756   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003758   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00375a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00375c   ffe5
00375e   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
003760   fff4
003762   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
003764   fff6
003766   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003768   ffe9
00376a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00376c   fff3
00376e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003770   ec99     call	0x6f32, 0           	CALL	__gptrput3
003772   f037
003774   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	199; brtos/queue.c	if (!iNesting)
003776   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
003778   e101     bnz	0x377c               	BNZ	_00156_DS_
                                           ;	.line	201; brtos/queue.c	OSExitCritical();
00377a   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00156_DS_:
                                           ;	.line	203; brtos/queue.c	return WRITE_BUFFER_OK;
00377c   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00157_DS_:
00377e   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
003780   f00c
003782   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
003784   f00b
003786   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003788   f00a
00378a   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
00378c   f009
00378e   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003790   f008
003792   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003794   f007
003796   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003798   f006
00379a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00379c   f005
00379e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0037a0   f004
0037a2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0037a4   f003
0037a6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0037a8   f002
0037aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0037ac   f001
0037ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0037b0   f000
0037b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0037b4   ffd9
0037b6   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0037b8   ffda
0037ba   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_queue__OSQueueCreate	code
                                           _OSQueueCreate:
                                           ;	.line	78; brtos/queue.c	INT8U OSQueueCreate(OS_QUEUE *cqueue, INT16U size, BRTOS_Queue **event)
002358   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00235a   ffe5
00235c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00235e   ffe5
002360   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
002362   ffda
002364   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002366   ffd9
002368   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00236a   ffe5
00236c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00236e   ffe5
002370   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002372   ffe5
002374   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002376   ffe5
002378   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
00237a   ffe5
00237c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00237e   ffe5
002380   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002382   ffe5
002384   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002386   ffe5
002388   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
00238a   ffe5
00238c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
00238e   ffe5
002390   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002392   ffe5
002394   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002396   ffe5
002398   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
00239a   ffe5
00239c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
00239e   ffe5
0023a0   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
0023a2   ffe5
0023a4   c00f     movff	0xf, 0xfe5         	MOVFF	r0x0f, POSTDEC1
0023a6   ffe5
0023a8   c010     movff	0x10, 0xfe5        	MOVFF	r0x10, POSTDEC1
0023aa   ffe5
0023ac   c011     movff	0x11, 0xfe5        	MOVFF	r0x11, POSTDEC1
0023ae   ffe5
0023b0   0e03     movlw	0x3                	MOVLW	0x03
0023b2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0023b4   f000
0023b6   0e04     movlw	0x4                	MOVLW	0x04
0023b8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0023ba   f001
0023bc   0e05     movlw	0x5                	MOVLW	0x05
0023be   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0023c0   f002
0023c2   0e06     movlw	0x6                	MOVLW	0x06
0023c4   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
0023c6   f003
0023c8   0e07     movlw	0x7                	MOVLW	0x07
0023ca   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
0023cc   f004
0023ce   0e08     movlw	0x8                	MOVLW	0x08
0023d0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
0023d2   f005
0023d4   0e09     movlw	0x9                	MOVLW	0x09
0023d6   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
0023d8   f006
0023da   0e0a     movlw	0xa                	MOVLW	0x0a
0023dc   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
0023de   f007
0023e0   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	84; brtos/queue.c	if (iNesting > 0) {                                // See if caller is an interrupt
0023e2   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0023e4   e002     bz	0x23ea                	BZ	_00106_DS_
                                           ;	.line	85; brtos/queue.c	return(IRQ_PEND_ERR);                           // Can't be create by interrupt
0023e6   0e02     movlw	0x2                	MOVLW	0x02
0023e8   d14e     bra	0x2686               	BRA	_00125_DS_
                                           _00106_DS_:
0023ea   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	89; brtos/queue.c	if (currentTask)
0023ec   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0023ee   e001     bz	0x23f2                	BZ	_00108_DS_
                                           ;	.line	90; brtos/queue.c	OSEnterCritical();
0023f0   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00108_DS_:
                                           ;	.line	92; brtos/queue.c	if ((iQueueAddress + size) > QUEUE_HEAP_SIZE)
0023f2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0023f4   0102     movlb	0x2                	BANKSEL	_iQueueAddress
0023f6   2595     addwf	0x95, 0, 0x1       	ADDWF	_iQueueAddress, W, B
0023f8   6e08     movwf	0x8, 0             	MOVWF	r0x08
0023fa   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0023fc   0102     movlb	0x2                	BANKSEL	(_iQueueAddress + 1)
0023fe   2196     addwfc	0x96, 0, 0x1      	ADDWFC	(_iQueueAddress + 1), W, B
002400   6e09     movwf	0x9, 0             	MOVWF	r0x09
002402   0e00     movlw	0                  	MOVLW	0x00
002404   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
002406   e102     bnz	0x240c               	BNZ	_00137_DS_
002408   0e81     movlw	0x81               	MOVLW	0x81
00240a   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
                                           _00137_DS_:
00240c   e306     bnc	0x241a               	BNC	_00135_DS_
00240e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	95; brtos/queue.c	if (currentTask)
002410   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002412   e001     bz	0x2416                	BZ	_00110_DS_
                                           ;	.line	96; brtos/queue.c	OSExitCritical();
002414   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00110_DS_:
                                           ;	.line	98; brtos/queue.c	return NO_MEMORY;
002416   0e01     movlw	0x1                	MOVLW	0x01
002418   d136     bra	0x2686               	BRA	_00125_DS_
                                           _00135_DS_:
                                           ;	.line	102; brtos/queue.c	for(i=0;i<=BRTOS_MAX_QUEUE;i++)
00241a   6a0a     clrf	0xa, 0              	CLRF	r0x0a
00241c   6a0b     clrf	0xb, 0              	CLRF	r0x0b
00241e   6a0c     clrf	0xc, 0              	CLRF	r0x0c
002420   6a0d     clrf	0xd, 0              	CLRF	r0x0d
                                           _00119_DS_:
002422   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002424   0f80     addlw	0x80               	ADDLW	0x80
002426   0f80     addlw	0x80               	ADDLW	0x80
002428   e102     bnz	0x242e               	BNZ	_00138_DS_
00242a   0e04     movlw	0x4                	MOVLW	0x04
00242c   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00138_DS_:
00242e   e237     bc	0x249e                	BC	_00122_DS_
                                           ;	.line	105; brtos/queue.c	if(i >= BRTOS_MAX_QUEUE)
002430   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002432   0f80     addlw	0x80               	ADDLW	0x80
002434   0f80     addlw	0x80               	ADDLW	0x80
002436   e102     bnz	0x243c               	BNZ	_00139_DS_
002438   0e03     movlw	0x3                	MOVLW	0x03
00243a   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
                                           _00139_DS_:
00243c   e306     bnc	0x244a               	BNC	_00116_DS_
00243e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	110; brtos/queue.c	if (currentTask)
002440   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002442   e001     bz	0x2446                	BZ	_00114_DS_
                                           ;	.line	111; brtos/queue.c	OSExitCritical();
002444   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00114_DS_:
                                           ;	.line	113; brtos/queue.c	return(NO_AVAILABLE_EVENT);
002446   0e01     movlw	0x1                	MOVLW	0x01
002448   d11e     bra	0x2686               	BRA	_00125_DS_
                                           _00116_DS_:
                                           ;	.line	117; brtos/queue.c	if(BRTOS_Queue_Table[i].OSEventAllocated != TRUE)
00244a   0ed3     movlw	0xd3               	MOVLW	LOW(_BRTOS_Queue_Table)
00244c   240c     addwf	0xc, 0, 0          	ADDWF	r0x0c, W
00244e   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
002450   0e02     movlw	0x2                	MOVLW	HIGH(_BRTOS_Queue_Table)
002452   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
002454   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
002456   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
002458   ffe9
00245a   c00f     movff	0xf, 0xfea         	MOVFF	r0x0f, FSR0H
00245c   ffea
00245e   cfef     movff	0xfef, 0x10        	MOVFF	INDF0, r0x10
002460   f010
002462   5010     movf	0x10, 0, 0          	MOVF	r0x10, W
002464   0a01     xorlw	0x1                	XORLW	0x01
002466   e013     bz	0x248e                	BZ	_00121_DS_
                                           ;	.line	119; brtos/queue.c	BRTOS_Queue_Table[i].OSEventAllocated = TRUE;
002468   c00e     movff	0xe, 0xfe9         	MOVFF	r0x0e, FSR0L
00246a   ffe9
00246c   c00f     movff	0xf, 0xfea         	MOVFF	r0x0f, FSR0H
00246e   ffea
002470   0e01     movlw	0x1                	MOVLW	0x01
002472   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	120; brtos/queue.c	pont_event = &BRTOS_Queue_Table[i];
002474   0ed3     movlw	0xd3               	MOVLW	LOW(_BRTOS_Queue_Table)
002476   240c     addwf	0xc, 0, 0          	ADDWF	r0x0c, W
002478   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
00247a   0e02     movlw	0x2                	MOVLW	HIGH(_BRTOS_Queue_Table)
00247c   200d     addwfc	0xd, 0, 0         	ADDWFC	r0x0d, W
00247e   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
002480   500f     movf	0xf, 0, 0           	MOVF	r0x0f, W
002482   6e0f     movwf	0xf, 0             	MOVWF	r0x0f
002484   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002486   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
002488   0e80     movlw	0x80               	MOVLW	0x80
00248a   6e10     movwf	0x10, 0            	MOVWF	r0x10
                                           ;	.line	121; brtos/queue.c	break;      
00248c   d008     bra	0x249e               	BRA	_00122_DS_
                                           _00121_DS_:
                                           ;	.line	102; brtos/queue.c	for(i=0;i<=BRTOS_MAX_QUEUE;i++)
00248e   0e08     movlw	0x8                	MOVLW	0x08
002490   260c     addwf	0xc, 0x1, 0        	ADDWF	r0x0c, F
002492   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002494   2a0d     incf	0xd, 0x1, 0         	INCF	r0x0d, F
002496   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
002498   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00249a   2a0b     incf	0xb, 0x1, 0         	INCF	r0x0b, F
00249c   d7c2     bra	0x2422               	BRA	_00119_DS_
                                           _00122_DS_:
                                           ;	.line	126; brtos/queue.c	cqueue->OSQPtr = (INT8U *)&QUEUE_STACK[iQueueAddress];
00249e   0e80     movlw	0x80               	MOVLW	LOW(_QUEUE_STACK)
0024a0   0102     movlb	0x2                	BANKSEL	_iQueueAddress
0024a2   2595     addwf	0x95, 0, 0x1       	ADDWF	_iQueueAddress, W, B
0024a4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0024a6   0e00     movlw	0                  	MOVLW	HIGH(_QUEUE_STACK)
0024a8   0102     movlb	0x2                	BANKSEL	(_iQueueAddress + 1)
0024aa   2196     addwfc	0x96, 0, 0x1      	ADDWFC	(_iQueueAddress + 1), W, B
0024ac   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0024ae   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
0024b0   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
0024b2   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
0024b4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
0024b6   0e80     movlw	0x80               	MOVLW	0x80
0024b8   6e0c     movwf	0xc, 0             	MOVWF	r0x0c
0024ba   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0024bc   ffe5
0024be   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
0024c0   fff4
0024c2   c00c     movff	0xc, 0xff6         	MOVFF	r0x0c, TBLPTRL
0024c4   fff6
0024c6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0024c8   ffe9
0024ca   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0024cc   fff3
0024ce   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0024d0   ec99     call	0x6f32, 0           	CALL	__gptrput3
0024d2   f037
                                           ;	.line	127; brtos/queue.c	iQueueAddress  = iQueueAddress + size;
0024d4   c008     movff	0x8, 0x295         	MOVFF	r0x08, _iQueueAddress
0024d6   f295
0024d8   c009     movff	0x9, 0x296         	MOVFF	r0x09, (_iQueueAddress + 1)
0024da   f296
                                           ;	.line	128; brtos/queue.c	cqueue->OSQSize =  size;
0024dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0024de   0f0f     addlw	0xf                	ADDLW	0x0f
0024e0   6e08     movwf	0x8, 0             	MOVWF	r0x08
0024e2   0e00     movlw	0                  	MOVLW	0x00
0024e4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0024e6   6e09     movwf	0x9, 0             	MOVWF	r0x09
0024e8   0e00     movlw	0                  	MOVLW	0x00
0024ea   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0024ec   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
0024ee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0024f0   ffe5
0024f2   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
0024f4   fff4
0024f6   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
0024f8   ffe9
0024fa   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
0024fc   fff3
0024fe   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002500   ecb3     call	0x6f66, 0           	CALL	__gptrput2
002502   f037
                                           ;	.line	129; brtos/queue.c	cqueue->OSQEntries =  0;
002504   5000     movf	0, 0, 0             	MOVF	r0x00, W
002506   0f11     addlw	0x11               	ADDLW	0x11
002508   6e08     movwf	0x8, 0             	MOVWF	r0x08
00250a   0e00     movlw	0                  	MOVLW	0x00
00250c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00250e   6e09     movwf	0x9, 0             	MOVWF	r0x09
002510   0e00     movlw	0                  	MOVLW	0x00
002512   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002514   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002516   0e00     movlw	0                  	MOVLW	0x00
002518   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00251a   0e00     movlw	0                  	MOVLW	0x00
00251c   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00251e   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
002520   ffe9
002522   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
002524   fff3
002526   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002528   ecb3     call	0x6f66, 0           	CALL	__gptrput2
00252a   f037
                                           ;	.line	130; brtos/queue.c	cqueue->OSQStart = cqueue->OSQPtr;
00252c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00252e   0f03     addlw	0x3                	ADDLW	0x03
002530   6e08     movwf	0x8, 0             	MOVWF	r0x08
002532   0e00     movlw	0                  	MOVLW	0x00
002534   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002536   6e09     movwf	0x9, 0             	MOVWF	r0x09
002538   0e00     movlw	0                  	MOVLW	0x00
00253a   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
00253c   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00253e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002540   ffe5
002542   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
002544   fff4
002546   c00c     movff	0xc, 0xff6         	MOVFF	r0x0c, TBLPTRL
002548   fff6
00254a   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
00254c   ffe9
00254e   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
002550   fff3
002552   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002554   ec99     call	0x6f32, 0           	CALL	__gptrput3
002556   f037
                                           ;	.line	131; brtos/queue.c	cqueue->OSQEnd =   cqueue->OSQPtr + cqueue->OSQSize;
002558   5000     movf	0, 0, 0             	MOVF	r0x00, W
00255a   0f06     addlw	0x6                	ADDLW	0x06
00255c   6e08     movwf	0x8, 0             	MOVWF	r0x08
00255e   0e00     movlw	0                  	MOVLW	0x00
002560   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002562   6e09     movwf	0x9, 0             	MOVWF	r0x09
002564   0e00     movlw	0                  	MOVLW	0x00
002566   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002568   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
00256a   6a11     clrf	0x11, 0             	CLRF	r0x11
00256c   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
00256e   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
002570   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002572   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002574   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002576   2211     addwfc	0x11, 0x1, 0      	ADDWFC	r0x11, F
002578   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
00257a   ffe5
00257c   c004     movff	0x4, 0xff4         	MOVFF	r0x04, PRODH
00257e   fff4
002580   c011     movff	0x11, 0xff6        	MOVFF	r0x11, TBLPTRL
002582   fff6
002584   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
002586   ffe9
002588   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
00258a   fff3
00258c   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
00258e   ec99     call	0x6f32, 0           	CALL	__gptrput3
002590   f037
                                           ;	.line	132; brtos/queue.c	cqueue->OSQIn =    cqueue->OSQPtr;
002592   5000     movf	0, 0, 0             	MOVF	r0x00, W
002594   0f09     addlw	0x9                	ADDLW	0x09
002596   6e03     movwf	0x3, 0             	MOVWF	r0x03
002598   0e00     movlw	0                  	MOVLW	0x00
00259a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00259c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00259e   0e00     movlw	0                  	MOVLW	0x00
0025a0   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0025a2   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025a4   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0025a6   ffe5
0025a8   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
0025aa   fff4
0025ac   c00c     movff	0xc, 0xff6         	MOVFF	r0x0c, TBLPTRL
0025ae   fff6
0025b0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0025b2   ffe9
0025b4   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0025b6   fff3
0025b8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0025ba   ec99     call	0x6f32, 0           	CALL	__gptrput3
0025bc   f037
                                           ;	.line	133; brtos/queue.c	cqueue->OSQOut =   cqueue->OSQPtr;
0025be   5000     movf	0, 0, 0             	MOVF	r0x00, W
0025c0   0f0c     addlw	0xc                	ADDLW	0x0c
0025c2   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025c4   0e00     movlw	0                  	MOVLW	0x00
0025c6   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0025c8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0025ca   0e00     movlw	0                  	MOVLW	0x00
0025cc   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0025ce   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025d0   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0025d2   ffe5
0025d4   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
0025d6   fff4
0025d8   c00c     movff	0xc, 0xff6         	MOVFF	r0x0c, TBLPTRL
0025da   fff6
0025dc   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0025de   ffe9
0025e0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0025e2   fff3
0025e4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0025e6   ec99     call	0x6f32, 0           	CALL	__gptrput3
0025e8   f037
                                           ;	.line	136; brtos/queue.c	pont_event->OSEventPointer = cqueue;
0025ea   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
0025ec   0f03     addlw	0x3                	ADDLW	0x03
0025ee   6e03     movwf	0x3, 0             	MOVWF	r0x03
0025f0   0e00     movlw	0                  	MOVLW	0x00
0025f2   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
0025f4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0025f6   0e00     movlw	0                  	MOVLW	0x00
0025f8   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
0025fa   6e08     movwf	0x8, 0             	MOVWF	r0x08
0025fc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0025fe   ffe5
002600   c001     movff	0x1, 0xff4         	MOVFF	r0x01, PRODH
002602   fff4
002604   c002     movff	0x2, 0xff6         	MOVFF	r0x02, TBLPTRL
002606   fff6
002608   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00260a   ffe9
00260c   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00260e   fff3
002610   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002612   ec99     call	0x6f32, 0           	CALL	__gptrput3
002614   f037
                                           ;	.line	137; brtos/queue.c	pont_event->OSEventWait = 0;
002616   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002618   0f02     addlw	0x2                	ADDLW	0x02
00261a   6e00     movwf	0, 0               	MOVWF	r0x00
00261c   0e00     movlw	0                  	MOVLW	0x00
00261e   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
002620   6e01     movwf	0x1, 0             	MOVWF	r0x01
002622   0e00     movlw	0                  	MOVLW	0x00
002624   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
002626   6e02     movwf	0x2, 0             	MOVWF	r0x02
002628   0e00     movlw	0                  	MOVLW	0x00
00262a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00262c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00262e   ffe9
002630   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002632   fff3
002634   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002636   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
002638   f037
                                           ;	.line	140; brtos/queue.c	pont_event->OSEventWaitList=0;
00263a   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
00263c   0f06     addlw	0x6                	ADDLW	0x06
00263e   6e00     movwf	0, 0               	MOVWF	r0x00
002640   0e00     movlw	0                  	MOVLW	0x00
002642   200f     addwfc	0xf, 0, 0         	ADDWFC	r0x0f, W
002644   6e01     movwf	0x1, 0             	MOVWF	r0x01
002646   0e00     movlw	0                  	MOVLW	0x00
002648   2010     addwfc	0x10, 0, 0        	ADDWFC	r0x10, W
00264a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00264c   0e00     movlw	0                  	MOVLW	0x00
00264e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002650   0e00     movlw	0                  	MOVLW	0x00
002652   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
002654   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002656   ffe9
002658   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00265a   fff3
00265c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00265e   ecb3     call	0x6f66, 0           	CALL	__gptrput2
002660   f037
                                           ;	.line	142; brtos/queue.c	*event = pont_event;
002662   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002664   ffe5
002666   c00f     movff	0xf, 0xff4         	MOVFF	r0x0f, PRODH
002668   fff4
00266a   c010     movff	0x10, 0xff6        	MOVFF	r0x10, TBLPTRL
00266c   fff6
00266e   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
002670   ffe9
002672   c006     movff	0x6, 0xff3         	MOVFF	r0x06, PRODL
002674   fff3
002676   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002678   ec99     call	0x6f32, 0           	CALL	__gptrput3
00267a   f037
00267c   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	145; brtos/queue.c	if (currentTask)
00267e   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002680   e001     bz	0x2684                	BZ	_00124_DS_
                                           ;	.line	146; brtos/queue.c	OSExitCritical();  
002682   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00124_DS_:
                                           ;	.line	148; brtos/queue.c	return(ALLOC_EVENT_OK);
002684   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00125_DS_:
002686   cfe4     movff	0xfe4, 0x11        	MOVFF	PREINC1, r0x11
002688   f011
00268a   cfe4     movff	0xfe4, 0x10        	MOVFF	PREINC1, r0x10
00268c   f010
00268e   cfe4     movff	0xfe4, 0xf         	MOVFF	PREINC1, r0x0f
002690   f00f
002692   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002694   f00e
002696   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002698   f00d
00269a   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
00269c   f00c
00269e   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
0026a0   f00b
0026a2   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
0026a4   f00a
0026a6   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
0026a8   f009
0026aa   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
0026ac   f008
0026ae   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
0026b0   f007
0026b2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0026b4   f006
0026b6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0026b8   f005
0026ba   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0026bc   f004
0026be   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0026c0   f003
0026c2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0026c4   f002
0026c6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0026c8   f001
0026ca   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0026cc   f000
0026ce   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0026d0   ffd9
0026d2   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0026d4   ffda
0026d6   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 5750 (0x1676) bytes ( 4.39%)
                                           ;           	 2875 (0x0b3b) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	   32 (0x0020) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:14 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _task_LCD
                                           	global _testa_bit
                                           	global _LCD
                                           	global _acquireLCD
                                           	global _releaseLCD
                                           	global _write_lcd
                                           	global _write_numero
                                           	global _instr
                                           	global _caractere
                                           	global _init_lcd
                                           	global _init_lcd_resource
                                           	global _posiciona
                                           	global _limpa_lcd
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _DelayTask
                                           	extern _OSMutexCreate
                                           	extern _OSMutexAcquire
                                           	extern _OSMutexRelease
                                           	extern __divuint
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           
                                           
                                           	idata
                                           _task_LCD	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_lcd_0	udata
                                           _LCD	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_lcd__testa_bit	code
                                           _testa_bit:
                                           ;	.line	313; drivers/lcd.c	void testa_bit(void)
006e72   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006e74   ffe5
006e76   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006e78   ffe5
006e7a   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006e7c   ffda
006e7e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006e80   ffd9
                                           ;	.line	315; drivers/lcd.c	DelayTask(2);
006e82   0e00     movlw	0                  	MOVLW	0x00
006e84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e86   0e02     movlw	0x2                	MOVLW	0x02
006e88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006e8a   eca8     call	0x2d50, 0           	CALL	_DelayTask
006e8c   f016
006e8e   0e02     movlw	0x2                	MOVLW	0x02
006e90   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006e92   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006e94   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006e96   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006e98   ffd9
006e9a   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006e9c   ffda
006e9e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__limpa_lcd	code
                                           _limpa_lcd:
                                           ;	.line	282; drivers/lcd.c	void limpa_lcd(void)
006c4c   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006c4e   ffe5
006c50   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006c52   ffe5
006c54   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006c56   ffda
006c58   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006c5a   ffd9
                                           ;	.line	285; drivers/lcd.c	testa_bit();
006c5c   ec39     call	0x6e72, 0           	CALL	_testa_bit
006c5e   f037
                                           ;	.line	286; drivers/lcd.c	RS = 0;
006c60   948d     bcf	0x8d, 0x2, 0         	BCF	_LATEbits, 2
                                           ;	.line	288; drivers/lcd.c	dados = 0x01;
006c62   0e01     movlw	0x1                	MOVLW	0x01
006c64   6e8c     movwf	0x8c, 0            	MOVWF	_LATD
                                           ;	.line	289; drivers/lcd.c	E = 1;
006c66   828d     bsf	0x8d, 0x1, 0         	BSF	_LATEbits, 1
006c68   0000     nop                      	nop
006c6a   0000     nop                      	nop
006c6c   0000     nop                      	nop
006c6e   0000     nop                      	nop
006c70   0000     nop                      	nop
006c72   0000     nop                      	nop
006c74   0000     nop                      	nop
006c76   0000     nop                      	nop
006c78   0000     nop                      	nop
006c7a   0000     nop                      	nop
006c7c   0000     nop                      	nop
006c7e   0000     nop                      	nop
006c80   0000     nop                      	nop
006c82   0000     nop                      	nop
006c84   0000     nop                      	nop
                                           	
                                           ;	.line	307; drivers/lcd.c	E = 0;
006c86   928d     bcf	0x8d, 0x1, 0         	BCF	_LATEbits, 1
006c88   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006c8a   ffd9
006c8c   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006c8e   ffda
006c90   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__posiciona	code
                                           _posiciona:
                                           ;	.line	241; drivers/lcd.c	void posiciona(INT8U linha, INT8U coluna)
006788   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00678a   ffe5
00678c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00678e   ffe5
006790   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006792   ffda
006794   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006796   ffd9
006798   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00679a   ffe5
00679c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00679e   ffe5
0067a0   0e03     movlw	0x3                	MOVLW	0x03
0067a2   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0067a4   f000
0067a6   0e04     movlw	0x4                	MOVLW	0x04
0067a8   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0067aa   f001
                                           ;	.line	243; drivers/lcd.c	testa_bit();
0067ac   ec39     call	0x6e72, 0           	CALL	_testa_bit
0067ae   f037
                                           ;	.line	244; drivers/lcd.c	RS = 0;
0067b0   948d     bcf	0x8d, 0x2, 0         	BCF	_LATEbits, 2
                                           ;	.line	246; drivers/lcd.c	switch(linha){
0067b2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0067b4   0a01     xorlw	0x1                	XORLW	0x01
0067b6   e004     bz	0x67c0                	BZ	_00153_DS_
0067b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0067ba   0a02     xorlw	0x2                	XORLW	0x02
0067bc   e006     bz	0x67ca                	BZ	_00154_DS_
0067be   d00a     bra	0x67d4               	BRA	_00155_DS_
                                           _00153_DS_:
                                           ;	.line	248; drivers/lcd.c	coluna--;
0067c0   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
                                           ;	.line	249; drivers/lcd.c	dados = 0x80 + coluna;
0067c2   0e80     movlw	0x80               	MOVLW	0x80
0067c4   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0067c6   6e8c     movwf	0x8c, 0            	MOVWF	_LATD
                                           ;	.line	250; drivers/lcd.c	break;
0067c8   d006     bra	0x67d6               	BRA	_00156_DS_
                                           _00154_DS_:
                                           ;	.line	252; drivers/lcd.c	coluna--;
0067ca   0601     decf	0x1, 0x1, 0         	DECF	r0x01, F
                                           ;	.line	253; drivers/lcd.c	dados = 0xC0 + coluna;
0067cc   0ec0     movlw	0xc0               	MOVLW	0xc0
0067ce   2401     addwf	0x1, 0, 0          	ADDWF	r0x01, W
0067d0   6e8c     movwf	0x8c, 0            	MOVWF	_LATD
                                           ;	.line	254; drivers/lcd.c	break;
0067d2   d001     bra	0x67d6               	BRA	_00156_DS_
                                           _00155_DS_:
                                           ;	.line	256; drivers/lcd.c	return;
0067d4   d011     bra	0x67f8               	BRA	_00157_DS_
                                           _00156_DS_:
                                           ;	.line	258; drivers/lcd.c	E = 1;
0067d6   828d     bsf	0x8d, 0x1, 0         	BSF	_LATEbits, 1
0067d8   0000     nop                      	nop
0067da   0000     nop                      	nop
0067dc   0000     nop                      	nop
0067de   0000     nop                      	nop
0067e0   0000     nop                      	nop
0067e2   0000     nop                      	nop
0067e4   0000     nop                      	nop
0067e6   0000     nop                      	nop
0067e8   0000     nop                      	nop
0067ea   0000     nop                      	nop
0067ec   0000     nop                      	nop
0067ee   0000     nop                      	nop
0067f0   0000     nop                      	nop
0067f2   0000     nop                      	nop
0067f4   0000     nop                      	nop
                                           	
                                           ;	.line	276; drivers/lcd.c	E = 0;
0067f6   928d     bcf	0x8d, 0x1, 0         	BCF	_LATEbits, 1
                                           _00157_DS_:
0067f8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0067fa   f001
0067fc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0067fe   f000
006800   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006802   ffd9
006804   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006806   ffda
006808   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__init_lcd_resource	code
                                           _init_lcd_resource:
                                           ;	.line	226; drivers/lcd.c	void init_lcd_resource(INT8U priority)
00697a   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00697c   ffe5
00697e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006980   ffe5
006982   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006984   ffda
006986   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006988   ffd9
00698a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00698c   ffe5
00698e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006990   ffe5
006992   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
006994   ffe5
006996   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006998   ffe5
00699a   0e03     movlw	0x3                	MOVLW	0x03
00699c   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00699e   f000
                                           ;	.line	231; drivers/lcd.c	if (OSMutexCreate(&LCD,priority) != ALLOC_EVENT_OK)
0069a0   0e03     movlw	0x3                	MOVLW	HIGH(_LCD)
0069a2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0069a4   0ef2     movlw	0xf2               	MOVLW	LOW(_LCD)
0069a6   6e01     movwf	0x1, 0             	MOVWF	r0x01
0069a8   0e80     movlw	0x80               	MOVLW	0x80
0069aa   6e03     movwf	0x3, 0             	MOVWF	r0x03
0069ac   5000     movf	0, 0, 0             	MOVF	r0x00, W
0069ae   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0069b0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0069b2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0069b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0069b6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0069b8   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0069ba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0069bc   ece8     call	0x39d0, 0           	CALL	_OSMutexCreate
0069be   f01c
0069c0   6e00     movwf	0, 0               	MOVWF	r0x00
0069c2   0e04     movlw	0x4                	MOVLW	0x04
0069c4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0069c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0069c8   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
0069ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0069cc   e001     bz	0x69d0                	BZ	_00148_DS_
                                           _00144_DS_:
                                           ;	.line	235; drivers/lcd.c	while(1){};
0069ce   d7ff     bra	0x69ce               	BRA	_00144_DS_
                                           _00148_DS_:
0069d0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0069d2   f003
0069d4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0069d6   f002
0069d8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0069da   f001
0069dc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0069de   f000
0069e0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0069e2   ffd9
0069e4   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0069e6   ffda
0069e8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__init_lcd	code
                                           _init_lcd:
                                           ;	.line	206; drivers/lcd.c	void init_lcd(void){
005c56   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005c58   ffe5
005c5a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005c5c   ffe5
005c5e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005c60   ffda
005c62   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005c64   ffd9
                                           ;	.line	207; drivers/lcd.c	dados = 0;
005c66   6a8c     clrf	0x8c, 0             	CLRF	_LATD
                                           ;	.line	208; drivers/lcd.c	direcao = 0;
005c68   6a95     clrf	0x95, 0             	CLRF	_TRISD
                                           ;	.line	209; drivers/lcd.c	controle = 0;
005c6a   6a8d     clrf	0x8d, 0             	CLRF	_LATE
                                           ;	.line	210; drivers/lcd.c	controle_dir = ~0x06;
005c6c   0ef9     movlw	0xf9               	MOVLW	0xf9
005c6e   6e96     movwf	0x96, 0            	MOVWF	_TRISE
                                           ;	.line	211; drivers/lcd.c	instr(0x38);
005c70   0e38     movlw	0x38               	MOVLW	0x38
005c72   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c74   ec8c     call	0x6b18, 0           	CALL	_instr
005c76   f035
005c78   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005c7a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005c7c   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	212; drivers/lcd.c	DelayTask(20);
005c7e   0e00     movlw	0                  	MOVLW	0x00
005c80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c82   0e14     movlw	0x14               	MOVLW	0x14
005c84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c86   eca8     call	0x2d50, 0           	CALL	_DelayTask
005c88   f016
005c8a   0e02     movlw	0x2                	MOVLW	0x02
005c8c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005c8e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005c90   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	213; drivers/lcd.c	instr(0x38);
005c92   0e38     movlw	0x38               	MOVLW	0x38
005c94   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005c96   ec8c     call	0x6b18, 0           	CALL	_instr
005c98   f035
005c9a   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005c9c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005c9e   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	214; drivers/lcd.c	DelayTask(20);
005ca0   0e00     movlw	0                  	MOVLW	0x00
005ca2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ca4   0e14     movlw	0x14               	MOVLW	0x14
005ca6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ca8   eca8     call	0x2d50, 0           	CALL	_DelayTask
005caa   f016
005cac   0e02     movlw	0x2                	MOVLW	0x02
005cae   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005cb0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005cb2   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	215; drivers/lcd.c	instr(0x06);
005cb4   0e06     movlw	0x6                	MOVLW	0x06
005cb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cb8   ec8c     call	0x6b18, 0           	CALL	_instr
005cba   f035
005cbc   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005cbe   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005cc0   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	216; drivers/lcd.c	DelayTask(20);
005cc2   0e00     movlw	0                  	MOVLW	0x00
005cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cc6   0e14     movlw	0x14               	MOVLW	0x14
005cc8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cca   eca8     call	0x2d50, 0           	CALL	_DelayTask
005ccc   f016
005cce   0e02     movlw	0x2                	MOVLW	0x02
005cd0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005cd2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005cd4   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	217; drivers/lcd.c	instr(0x0c);
005cd6   0e0c     movlw	0xc                	MOVLW	0x0c
005cd8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cda   ec8c     call	0x6b18, 0           	CALL	_instr
005cdc   f035
005cde   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005ce0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005ce2   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	218; drivers/lcd.c	DelayTask(20);
005ce4   0e00     movlw	0                  	MOVLW	0x00
005ce6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005ce8   0e14     movlw	0x14               	MOVLW	0x14
005cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cec   eca8     call	0x2d50, 0           	CALL	_DelayTask
005cee   f016
005cf0   0e02     movlw	0x2                	MOVLW	0x02
005cf2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005cf4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005cf6   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	219; drivers/lcd.c	instr(0x01);  
005cf8   0e01     movlw	0x1                	MOVLW	0x01
005cfa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005cfc   ec8c     call	0x6b18, 0           	CALL	_instr
005cfe   f035
005d00   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
005d02   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005d04   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	220; drivers/lcd.c	DelayTask(20);
005d06   0e00     movlw	0                  	MOVLW	0x00
005d08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d0a   0e14     movlw	0x14               	MOVLW	0x14
005d0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005d0e   eca8     call	0x2d50, 0           	CALL	_DelayTask
005d10   f016
005d12   0e02     movlw	0x2                	MOVLW	0x02
005d14   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005d16   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005d18   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
005d1a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005d1c   ffd9
005d1e   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005d20   ffda
005d22   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__caractere	code
                                           _caractere:
                                           ;	.line	174; drivers/lcd.c	void caractere(char dado)
006ac4   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006ac6   ffe5
006ac8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006aca   ffe5
006acc   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006ace   ffda
006ad0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006ad2   ffd9
006ad4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006ad6   ffe5
006ad8   0e03     movlw	0x3                	MOVLW	0x03
006ada   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006adc   f000
                                           ;	.line	177; drivers/lcd.c	testa_bit();
006ade   ec39     call	0x6e72, 0           	CALL	_testa_bit
006ae0   f037
                                           ;	.line	178; drivers/lcd.c	RS = 1;
006ae2   848d     bsf	0x8d, 0x2, 0         	BSF	_LATEbits, 2
                                           ;	.line	180; drivers/lcd.c	dados = dado;
006ae4   c000     movff	0, 0xf8c           	MOVFF	r0x00, _LATD
006ae6   ff8c
                                           ;	.line	181; drivers/lcd.c	E = 1;
006ae8   828d     bsf	0x8d, 0x1, 0         	BSF	_LATEbits, 1
006aea   0000     nop                      	nop
006aec   0000     nop                      	nop
006aee   0000     nop                      	nop
006af0   0000     nop                      	nop
006af2   0000     nop                      	nop
006af4   0000     nop                      	nop
006af6   0000     nop                      	nop
006af8   0000     nop                      	nop
006afa   0000     nop                      	nop
006afc   0000     nop                      	nop
006afe   0000     nop                      	nop
006b00   0000     nop                      	nop
006b02   0000     nop                      	nop
006b04   0000     nop                      	nop
006b06   0000     nop                      	nop
                                           	
                                           ;	.line	199; drivers/lcd.c	E = 0;
006b08   928d     bcf	0x8d, 0x1, 0         	BCF	_LATEbits, 1
006b0a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006b0c   f000
006b0e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006b10   ffd9
006b12   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006b14   ffda
006b16   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__instr	code
                                           _instr:
                                           ;	.line	146; drivers/lcd.c	void instr(char comando){
006b18   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006b1a   ffe5
006b1c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006b1e   ffe5
006b20   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006b22   ffda
006b24   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006b26   ffd9
006b28   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006b2a   ffe5
006b2c   0e03     movlw	0x3                	MOVLW	0x03
006b2e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006b30   f000
                                           ;	.line	147; drivers/lcd.c	testa_bit();
006b32   ec39     call	0x6e72, 0           	CALL	_testa_bit
006b34   f037
                                           ;	.line	148; drivers/lcd.c	RS = 0;
006b36   948d     bcf	0x8d, 0x2, 0         	BCF	_LATEbits, 2
                                           ;	.line	150; drivers/lcd.c	dados = comando;
006b38   c000     movff	0, 0xf8c           	MOVFF	r0x00, _LATD
006b3a   ff8c
                                           ;	.line	151; drivers/lcd.c	E = 1;
006b3c   828d     bsf	0x8d, 0x1, 0         	BSF	_LATEbits, 1
006b3e   0000     nop                      	nop
006b40   0000     nop                      	nop
006b42   0000     nop                      	nop
006b44   0000     nop                      	nop
006b46   0000     nop                      	nop
006b48   0000     nop                      	nop
006b4a   0000     nop                      	nop
006b4c   0000     nop                      	nop
006b4e   0000     nop                      	nop
006b50   0000     nop                      	nop
006b52   0000     nop                      	nop
006b54   0000     nop                      	nop
006b56   0000     nop                      	nop
006b58   0000     nop                      	nop
006b5a   0000     nop                      	nop
                                           	
                                           ;	.line	169; drivers/lcd.c	E = 0;
006b5c   928d     bcf	0x8d, 0x1, 0         	BCF	_LATEbits, 1
006b5e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006b60   f000
006b62   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006b64   ffd9
006b66   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006b68   ffda
006b6a   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__write_numero	code
                                           _write_numero:
                                           ;	.line	90; drivers/lcd.c	void write_numero(unsigned int numero)
005b86   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
005b88   ffe5
005b8a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
005b8c   ffe5
005b8e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
005b90   ffda
005b92   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
005b94   ffd9
005b96   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
005b98   ffe5
005b9a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
005b9c   ffe5
005b9e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
005ba0   ffe5
005ba2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
005ba4   ffe5
005ba6   0e03     movlw	0x3                	MOVLW	0x03
005ba8   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
005baa   f000
005bac   0e04     movlw	0x4                	MOVLW	0x04
005bae   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
005bb0   f001
                                           ;	.line	94; drivers/lcd.c	testa_bit();
005bb2   ec39     call	0x6e72, 0           	CALL	_testa_bit
005bb4   f037
                                           ;	.line	95; drivers/lcd.c	RS = 1;
005bb6   848d     bsf	0x8d, 0x2, 0         	BSF	_LATEbits, 2
                                           ;	.line	97; drivers/lcd.c	i = (numero / 10);
005bb8   0e00     movlw	0                  	MOVLW	0x00
005bba   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bbc   0e0a     movlw	0xa                	MOVLW	0x0a
005bbe   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bc0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
005bc2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bc4   5000     movf	0, 0, 0             	MOVF	r0x00, W
005bc6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
005bc8   eced     call	0x63da, 0           	CALL	__divuint
005bca   f031
005bcc   6e02     movwf	0x2, 0             	MOVWF	r0x02
005bce   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
005bd0   f003
005bd2   0e04     movlw	0x4                	MOVLW	0x04
005bd4   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
005bd6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
005bd8   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	98; drivers/lcd.c	dados = 48 + (unsigned char)i;
005bda   0e30     movlw	0x30               	MOVLW	0x30
005bdc   2402     addwf	0x2, 0, 0          	ADDWF	r0x02, W
005bde   6e8c     movwf	0x8c, 0            	MOVWF	_LATD
                                           ;	.line	99; drivers/lcd.c	E = 1;
005be0   828d     bsf	0x8d, 0x1, 0         	BSF	_LATEbits, 1
005be2   0000     nop                      	nop
005be4   0000     nop                      	nop
005be6   0000     nop                      	nop
005be8   0000     nop                      	nop
005bea   0000     nop                      	nop
005bec   0000     nop                      	nop
005bee   0000     nop                      	nop
005bf0   0000     nop                      	nop
005bf2   0000     nop                      	nop
005bf4   0000     nop                      	nop
005bf6   0000     nop                      	nop
005bf8   0000     nop                      	nop
005bfa   0000     nop                      	nop
005bfc   0000     nop                      	nop
005bfe   0000     nop                      	nop
                                           	
                                           ;	.line	117; drivers/lcd.c	E = 0;
005c00   928d     bcf	0x8d, 0x1, 0         	BCF	_LATEbits, 1
                                           ;	.line	119; drivers/lcd.c	testa_bit();
005c02   ec39     call	0x6e72, 0           	CALL	_testa_bit
005c04   f037
                                           ;	.line	120; drivers/lcd.c	RS = 1;
005c06   848d     bsf	0x8d, 0x2, 0         	BSF	_LATEbits, 2
                                           ; ;multiply lit val:0x0a by variable r0x02 and store in r0x02
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	122; drivers/lcd.c	dados = 48 + (unsigned char)(numero - (unsigned int)(i * 10));
005c08   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c0a   0d0a     mullw	0xa                	MULLW	0x0a
005c0c   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
005c0e   f002
005c10   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
005c12   5e00     subwf	0, 0x1, 0          	SUBWF	r0x00, F
005c14   0e30     movlw	0x30               	MOVLW	0x30
005c16   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
005c18   6e8c     movwf	0x8c, 0            	MOVWF	_LATD
                                           ;	.line	123; drivers/lcd.c	E = 1;
005c1a   828d     bsf	0x8d, 0x1, 0         	BSF	_LATEbits, 1
005c1c   0000     nop                      	nop
005c1e   0000     nop                      	nop
005c20   0000     nop                      	nop
005c22   0000     nop                      	nop
005c24   0000     nop                      	nop
005c26   0000     nop                      	nop
005c28   0000     nop                      	nop
005c2a   0000     nop                      	nop
005c2c   0000     nop                      	nop
005c2e   0000     nop                      	nop
005c30   0000     nop                      	nop
005c32   0000     nop                      	nop
005c34   0000     nop                      	nop
005c36   0000     nop                      	nop
005c38   0000     nop                      	nop
                                           	
                                           ;	.line	141; drivers/lcd.c	E = 0;   
005c3a   928d     bcf	0x8d, 0x1, 0         	BCF	_LATEbits, 1
005c3c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
005c3e   f003
005c40   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
005c42   f002
005c44   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
005c46   f001
005c48   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
005c4a   f000
005c4c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
005c4e   ffd9
005c50   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
005c52   ffda
005c54   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__write_lcd	code
                                           _write_lcd:
                                           ;	.line	54; drivers/lcd.c	void write_lcd(char *string){
006484   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006486   ffe5
006488   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00648a   ffe5
00648c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00648e   ffda
006490   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006492   ffd9
006494   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006496   ffe5
006498   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00649a   ffe5
00649c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00649e   ffe5
0064a0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0064a2   ffe5
0064a4   0e03     movlw	0x3                	MOVLW	0x03
0064a6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0064a8   f000
0064aa   0e04     movlw	0x4                	MOVLW	0x04
0064ac   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0064ae   f001
0064b0   0e05     movlw	0x5                	MOVLW	0x05
0064b2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0064b4   f002
                                           _00115_DS_:
                                           ;	.line	56; drivers/lcd.c	while(*string)
0064b6   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0064b8   ffe9
0064ba   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0064bc   fff3
0064be   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0064c0   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0064c2   f037
0064c4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0064c6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0064c8   e022     bz	0x650e                	BZ	_00118_DS_
                                           ;	.line	58; drivers/lcd.c	testa_bit();
0064ca   ec39     call	0x6e72, 0           	CALL	_testa_bit
0064cc   f037
                                           ;	.line	59; drivers/lcd.c	RS = 1;
0064ce   848d     bsf	0x8d, 0x2, 0         	BSF	_LATEbits, 2
                                           ;	.line	61; drivers/lcd.c	dados = *string;
0064d0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0064d2   ffe9
0064d4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0064d6   fff3
0064d8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0064da   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0064dc   f037
0064de   6e8c     movwf	0x8c, 0            	MOVWF	_LATD
                                           ;	.line	62; drivers/lcd.c	E = 1;
0064e0   828d     bsf	0x8d, 0x1, 0         	BSF	_LATEbits, 1
0064e2   0000     nop                      	nop
0064e4   0000     nop                      	nop
0064e6   0000     nop                      	nop
0064e8   0000     nop                      	nop
0064ea   0000     nop                      	nop
0064ec   0000     nop                      	nop
0064ee   0000     nop                      	nop
0064f0   0000     nop                      	nop
0064f2   0000     nop                      	nop
0064f4   0000     nop                      	nop
0064f6   0000     nop                      	nop
0064f8   0000     nop                      	nop
0064fa   0000     nop                      	nop
0064fc   0000     nop                      	nop
0064fe   0000     nop                      	nop
                                           	
                                           ;	.line	82; drivers/lcd.c	E = 0;
006500   928d     bcf	0x8d, 0x1, 0         	BCF	_LATEbits, 1
                                           ;	.line	83; drivers/lcd.c	string++;
006502   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
006504   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006506   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
006508   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00650a   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
00650c   d7d4     bra	0x64b6               	BRA	_00115_DS_
                                           _00118_DS_:
00650e   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006510   f003
006512   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006514   f002
006516   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
006518   f001
00651a   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00651c   f000
00651e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006520   ffd9
006522   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006524   ffda
006526   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__releaseLCD	code
                                           _releaseLCD:
                                           ;	.line	47; drivers/lcd.c	INT8U releaseLCD(void)
006c92   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006c94   ffe5
006c96   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006c98   ffe5
006c9a   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006c9c   ffda
006c9e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006ca0   ffd9
006ca2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006ca4   ffe5
006ca6   0103     movlb	0x3                	BANKSEL	(_LCD + 2)
                                           ;	.line	50; drivers/lcd.c	return OSMutexRelease (LCD);
006ca8   51f4     movf	0xf4, 0, 0x1        	MOVF	(_LCD + 2), W, B
006caa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cac   0103     movlb	0x3                	BANKSEL	(_LCD + 1)
006cae   51f3     movf	0xf3, 0, 0x1        	MOVF	(_LCD + 1), W, B
006cb0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cb2   0103     movlb	0x3                	BANKSEL	_LCD
006cb4   51f2     movf	0xf2, 0, 0x1        	MOVF	_LCD, W, B
006cb6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cb8   ec23     call	0x2a46, 0           	CALL	_OSMutexRelease
006cba   f015
006cbc   6e00     movwf	0, 0               	MOVWF	r0x00
006cbe   0e03     movlw	0x3                	MOVLW	0x03
006cc0   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006cc2   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006cc4   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006cc6   5000     movf	0, 0, 0             	MOVF	r0x00, W
006cc8   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
006cca   f000
006ccc   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006cce   ffd9
006cd0   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006cd2   ffda
006cd4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_lcd__acquireLCD	code
                                           _acquireLCD:
                                           ;	.line	40; drivers/lcd.c	void acquireLCD(void)
006cd6   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006cd8   ffe5
006cda   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006cdc   ffe5
006cde   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006ce0   ffda
006ce2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006ce4   ffd9
006ce6   0103     movlb	0x3                	BANKSEL	(_LCD + 2)
                                           ;	.line	43; drivers/lcd.c	OSMutexAcquire(LCD);
006ce8   51f4     movf	0xf4, 0, 0x1        	MOVF	(_LCD + 2), W, B
006cea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cec   0103     movlb	0x3                	BANKSEL	(_LCD + 1)
006cee   51f3     movf	0xf3, 0, 0x1        	MOVF	(_LCD + 1), W, B
006cf0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cf2   0103     movlb	0x3                	BANKSEL	_LCD
006cf4   51f2     movf	0xf2, 0, 0x1        	MOVF	_LCD, W, B
006cf6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006cf8   ecba     call	0x1774, 0           	CALL	_OSMutexAcquire
006cfa   f00b
006cfc   0e03     movlw	0x3                	MOVLW	0x03
006cfe   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006d00   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006d02   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006d04   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006d06   ffd9
006d08   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006d0a   ffda
006d0c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1242 (0x04da) bytes ( 0.95%)
                                           ;           	  621 (0x026d) words
                                           ; udata size:	    3 (0x0003) bytes ( 0.23%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:14 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _PriorityMask
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	   -1 (0xffffffff) bytes (3276800.00%)
                                           ;           	2147483647 (0x7fffffff) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:14 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _OSMutexCreate
                                           	global _OSMutexDelete
                                           	global _OSMutexAcquire
                                           	global _OSMutexRelease
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern __gptrput2
                                           	extern __gptrput3
                                           	extern __gptrget3
                                           	extern __gptrget1
                                           	extern __gptrget2
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _SwitchContext
                                           	extern _SAScheduler
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           r0x0e	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_mutex__OSMutexRelease	code
                                           _OSMutexRelease:
                                           ;	.line	344; brtos/mutex.c	INT8U OSMutexRelease(BRTOS_Mutex *pont_event)
002a46   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
002a48   ffe5
002a4a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
002a4c   ffe5
002a4e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
002a50   ffda
002a52   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
002a54   ffd9
002a56   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
002a58   ffe5
002a5a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
002a5c   ffe5
002a5e   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
002a60   ffe5
002a62   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
002a64   ffe5
002a66   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
002a68   ffe5
002a6a   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
002a6c   ffe5
002a6e   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
002a70   ffe5
002a72   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002a74   ffe5
002a76   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
002a78   ffe5
002a7a   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
002a7c   ffe5
002a7e   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002a80   ffe5
002a82   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
002a84   ffe5
002a86   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
002a88   ffe5
002a8a   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
002a8c   ffe5
002a8e   c00e     movff	0xe, 0xfe5         	MOVFF	r0x0e, POSTDEC1
002a90   ffe5
002a92   0e03     movlw	0x3                	MOVLW	0x03
002a94   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
002a96   f000
002a98   0e04     movlw	0x4                	MOVLW	0x04
002a9a   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
002a9c   f001
002a9e   0e05     movlw	0x5                	MOVLW	0x05
002aa0   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
002aa2   f002
                                           ;	.line	367; brtos/mutex.c	OSEnterCritical();
002aa4   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	393; brtos/mutex.c	if (pont_event->OSEventOwner != currentTask)
002aa6   5000     movf	0, 0, 0             	MOVF	r0x00, W
002aa8   0f02     addlw	0x2                	ADDLW	0x02
002aaa   6e03     movwf	0x3, 0             	MOVWF	r0x03
002aac   0e00     movlw	0                  	MOVLW	0x00
002aae   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002ab0   6e04     movwf	0x4, 0             	MOVWF	r0x04
002ab2   0e00     movlw	0                  	MOVLW	0x00
002ab4   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002ab6   6e05     movwf	0x5, 0             	MOVWF	r0x05
002ab8   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002aba   ffe9
002abc   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002abe   fff3
002ac0   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002ac2   ec78     call	0x6ef0, 0           	CALL	__gptrget1
002ac4   f037
002ac6   6e03     movwf	0x3, 0             	MOVWF	r0x03
002ac8   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
002aca   0104     movlb	0x4                	BANKSEL	_currentTask
002acc   1904     xorwf	0x4, 0, 0x1        	XORWF	_currentTask, W, B
002ace   e003     bz	0x2ad6                	BZ	_00179_DS_
                                           ;	.line	395; brtos/mutex.c	OSExitCritical();
002ad0   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	396; brtos/mutex.c	return ERR_EVENT_OWNER;
002ad2   0e07     movlw	0x7                	MOVLW	0x07
002ad4   d11a     bra	0x2d0a               	BRA	_00184_DS_
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00179_DS_:
002ad6   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	402; brtos/mutex.c	iPriority = ContextTask[currentTask].Priority;
002ad8   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
002ada   0d10     mullw	0x10               	MULLW	0x10
002adc   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
002ade   f003
002ae0   6a04     clrf	0x4, 0              	CLRF	r0x04
002ae2   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
002ae4   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
002ae6   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
002ae8   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
002aea   0e09     movlw	0x9                	MOVLW	0x09
002aec   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
002aee   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002af0   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
002af2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002af4   ffe9
002af6   c004     movff	0x4, 0xfea         	MOVFF	r0x04, FSR0H
002af8   ffea
002afa   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
002afc   f005
                                           ;	.line	403; brtos/mutex.c	if (iPriority != pont_event->OSOriginalPriority)
002afe   5000     movf	0, 0, 0             	MOVF	r0x00, W
002b00   0f04     addlw	0x4                	ADDLW	0x04
002b02   6e06     movwf	0x6, 0             	MOVWF	r0x06
002b04   0e00     movlw	0                  	MOVLW	0x00
002b06   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002b08   6e07     movwf	0x7, 0             	MOVWF	r0x07
002b0a   0e00     movlw	0                  	MOVLW	0x00
002b0c   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002b0e   6e08     movwf	0x8, 0             	MOVWF	r0x08
002b10   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
002b12   ffe9
002b14   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
002b16   fff3
002b18   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002b1a   ec78     call	0x6ef0, 0           	CALL	__gptrget1
002b1c   f037
002b1e   6e06     movwf	0x6, 0             	MOVWF	r0x06
002b20   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002b22   1806     xorwf	0x6, 0, 0          	XORWF	r0x06, W
002b24   e101     bnz	0x2b28               	BNZ	_00192_DS_
002b26   d042     bra	0x2bac               	BRA	_00181_DS_
                                           ; ;multiply lit val:0x02 by variable r0x05 and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00192_DS_:
                                           ;	.line	408; brtos/mutex.c	OSReadyList = OSReadyList & ~(PriorityMask[iPriority]);
002b28   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
002b2a   3405     rlcf	0x5, 0, 0           	RLCF	r0x05, W
002b2c   6e07     movwf	0x7, 0             	MOVWF	r0x07
002b2e   6a08     clrf	0x8, 0              	CLRF	r0x08
002b30   6a09     clrf	0x9, 0              	CLRF	r0x09
002b32   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
002b34   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
002b36   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
002b38   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
002b3a   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
002b3c   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
002b3e   c007     movff	0x7, 0xff6         	MOVFF	r0x07, TBLPTRL
002b40   fff6
002b42   c008     movff	0x8, 0xff7         	MOVFF	r0x08, TBLPTRH
002b44   fff7
002b46   c009     movff	0x9, 0xff8         	MOVFF	r0x09, TBLPTRU
002b48   fff8
002b4a   0009     tblrd	*+                 	TBLRD*+	
002b4c   cff5     movff	0xff5, 0x7         	MOVFF	TABLAT, r0x07
002b4e   f007
002b50   0009     tblrd	*+                 	TBLRD*+	
002b52   cff5     movff	0xff5, 0x8         	MOVFF	TABLAT, r0x08
002b54   f008
002b56   1e07     comf	0x7, 0x1, 0         	COMF	r0x07, F
002b58   1e08     comf	0x8, 0x1, 0         	COMF	r0x08, F
002b5a   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002b5c   0102     movlb	0x2                	BANKSEL	_OSReadyList
002b5e   1799     andwf	0x99, 0x1, 0x1     	ANDWF	_OSReadyList, F, B
002b60   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002b62   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
002b64   179a     andwf	0x9a, 0x1, 0x1     	ANDWF	(_OSReadyList + 1), F, B
                                           ; ;multiply lit val:0x02 by variable r0x06 and store in r0x07
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	410; brtos/mutex.c	OSReadyList = OSReadyList | (PriorityMask[pont_event->OSOriginalPriority]);
002b66   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
002b68   3406     rlcf	0x6, 0, 0           	RLCF	r0x06, W
002b6a   6e07     movwf	0x7, 0             	MOVWF	r0x07
002b6c   6a08     clrf	0x8, 0              	CLRF	r0x08
002b6e   6a09     clrf	0x9, 0              	CLRF	r0x09
002b70   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
002b72   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
002b74   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
002b76   2208     addwfc	0x8, 0x1, 0       	ADDWFC	r0x08, F
002b78   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
002b7a   2209     addwfc	0x9, 0x1, 0       	ADDWFC	r0x09, F
002b7c   c007     movff	0x7, 0xff6         	MOVFF	r0x07, TBLPTRL
002b7e   fff6
002b80   c008     movff	0x8, 0xff7         	MOVFF	r0x08, TBLPTRH
002b82   fff7
002b84   c009     movff	0x9, 0xff8         	MOVFF	r0x09, TBLPTRU
002b86   fff8
002b88   0009     tblrd	*+                 	TBLRD*+	
002b8a   cff5     movff	0xff5, 0x7         	MOVFF	TABLAT, r0x07
002b8c   f007
002b8e   0009     tblrd	*+                 	TBLRD*+	
002b90   cff5     movff	0xff5, 0x8         	MOVFF	TABLAT, r0x08
002b92   f008
002b94   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002b96   0102     movlb	0x2                	BANKSEL	_OSReadyList
002b98   1399     iorwf	0x99, 0x1, 0x1     	IORWF	_OSReadyList, F, B
002b9a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
002b9c   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
002b9e   139a     iorwf	0x9a, 0x1, 0x1     	IORWF	(_OSReadyList + 1), F, B
                                           ;	.line	412; brtos/mutex.c	ContextTask[currentTask].Priority = pont_event->OSOriginalPriority;
002ba0   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002ba2   ffe9
002ba4   c004     movff	0x4, 0xfea         	MOVFF	r0x04, FSR0H
002ba6   ffea
002ba8   c006     movff	0x6, 0xfef         	MOVFF	r0x06, INDF0
002baa   ffef
                                           _00181_DS_:
                                           ;	.line	416; brtos/mutex.c	if (pont_event->OSEventWait != 0)
002bac   5000     movf	0, 0, 0             	MOVF	r0x00, W
002bae   0f05     addlw	0x5                	ADDLW	0x05
002bb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
002bb2   0e00     movlw	0                  	MOVLW	0x00
002bb4   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002bb6   6e04     movwf	0x4, 0             	MOVWF	r0x04
002bb8   0e00     movlw	0                  	MOVLW	0x00
002bba   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002bbc   6e06     movwf	0x6, 0             	MOVWF	r0x06
002bbe   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002bc0   ffe9
002bc2   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002bc4   fff3
002bc6   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002bc8   ec78     call	0x6ef0, 0           	CALL	__gptrget1
002bca   f037
002bcc   6e07     movwf	0x7, 0             	MOVWF	r0x07
002bce   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
002bd0   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
002bd2   d06e     bra	0x2cb0               	BRA	_00183_DS_
                                           ;	.line	419; brtos/mutex.c	iPriority = SAScheduler(pont_event->OSEventWaitList);
002bd4   5000     movf	0, 0, 0             	MOVF	r0x00, W
002bd6   0f06     addlw	0x6                	ADDLW	0x06
002bd8   6e07     movwf	0x7, 0             	MOVWF	r0x07
002bda   0e00     movlw	0                  	MOVLW	0x00
002bdc   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002bde   6e08     movwf	0x8, 0             	MOVWF	r0x08
002be0   0e00     movlw	0                  	MOVLW	0x00
002be2   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002be4   6e09     movwf	0x9, 0             	MOVWF	r0x09
002be6   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
002be8   ffe9
002bea   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
002bec   fff3
002bee   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002bf0   ec50     call	0x6ea0, 0           	CALL	__gptrget2
002bf2   f037
002bf4   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002bf6   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002bf8   f00b
002bfa   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
002bfc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002bfe   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
002c00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002c02   ecef     call	0x4dde, 0           	CALL	_SAScheduler
002c04   f026
002c06   6e05     movwf	0x5, 0             	MOVWF	r0x05
002c08   0e02     movlw	0x2                	MOVLW	0x02
002c0a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
002c0c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
002c0e   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	422; brtos/mutex.c	pont_event->OSEventWaitList = pont_event->OSEventWaitList & ~(PriorityMask[iPriority]);
002c10   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
002c12   ffe9
002c14   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
002c16   fff3
002c18   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002c1a   ec50     call	0x6ea0, 0           	CALL	__gptrget2
002c1c   f037
002c1e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
002c20   cff3     movff	0xff3, 0xb         	MOVFF	PRODL, r0x0b
002c22   f00b
                                           ; ;multiply lit val:0x02 by variable r0x05 and store in r0x05
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
002c24   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
002c26   3605     rlcf	0x5, 0x1, 0         	RLCF	r0x05, F
002c28   6a0c     clrf	0xc, 0              	CLRF	r0x0c
002c2a   6a0d     clrf	0xd, 0              	CLRF	r0x0d
002c2c   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
002c2e   2605     addwf	0x5, 0x1, 0        	ADDWF	r0x05, F
002c30   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
002c32   220c     addwfc	0xc, 0x1, 0       	ADDWFC	r0x0c, F
002c34   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
002c36   220d     addwfc	0xd, 0x1, 0       	ADDWFC	r0x0d, F
002c38   c005     movff	0x5, 0xff6         	MOVFF	r0x05, TBLPTRL
002c3a   fff6
002c3c   c00c     movff	0xc, 0xff7         	MOVFF	r0x0c, TBLPTRH
002c3e   fff7
002c40   c00d     movff	0xd, 0xff8         	MOVFF	r0x0d, TBLPTRU
002c42   fff8
002c44   0009     tblrd	*+                 	TBLRD*+	
002c46   cff5     movff	0xff5, 0x5         	MOVFF	TABLAT, r0x05
002c48   f005
002c4a   0009     tblrd	*+                 	TBLRD*+	
002c4c   cff5     movff	0xff5, 0xc         	MOVFF	TABLAT, r0x0c
002c4e   f00c
002c50   1c05     comf	0x5, 0, 0           	COMF	r0x05, W
002c52   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
002c54   1c0c     comf	0xc, 0, 0           	COMF	r0x0c, W
002c56   6e0e     movwf	0xe, 0             	MOVWF	r0x0e
002c58   500d     movf	0xd, 0, 0           	MOVF	r0x0d, W
002c5a   160a     andwf	0xa, 0x1, 0        	ANDWF	r0x0a, F
002c5c   500e     movf	0xe, 0, 0           	MOVF	r0x0e, W
002c5e   160b     andwf	0xb, 0x1, 0        	ANDWF	r0x0b, F
002c60   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
002c62   ffe5
002c64   c00b     movff	0xb, 0xff4         	MOVFF	r0x0b, PRODH
002c66   fff4
002c68   c007     movff	0x7, 0xfe9         	MOVFF	r0x07, FSR0L
002c6a   ffe9
002c6c   c008     movff	0x8, 0xff3         	MOVFF	r0x08, PRODL
002c6e   fff3
002c70   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
002c72   ecb3     call	0x6f66, 0           	CALL	__gptrput2
002c74   f037
                                           ;	.line	425; brtos/mutex.c	pont_event->OSEventWait--;
002c76   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002c78   ffe9
002c7a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002c7c   fff3
002c7e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002c80   ec78     call	0x6ef0, 0           	CALL	__gptrget1
002c82   f037
002c84   6e07     movwf	0x7, 0             	MOVWF	r0x07
002c86   0607     decf	0x7, 0x1, 0         	DECF	r0x07, F
002c88   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
002c8a   ffe5
002c8c   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002c8e   ffe9
002c90   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002c92   fff3
002c94   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
002c96   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
002c98   f037
                                           ;	.line	434; brtos/mutex.c	OSReadyList = OSReadyList | (PriorityMask[iPriority]);
002c9a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002c9c   0102     movlb	0x2                	BANKSEL	_OSReadyList
002c9e   1399     iorwf	0x99, 0x1, 0x1     	IORWF	_OSReadyList, F, B
002ca0   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
002ca2   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
002ca4   139a     iorwf	0x9a, 0x1, 0x1     	IORWF	(_OSReadyList + 1), F, B
                                           ;	.line	437; brtos/mutex.c	ChangeContext();
002ca6   ec82     call	0x4b04, 0           	CALL	_SwitchContext
002ca8   f025
                                           ;	.line	440; brtos/mutex.c	OSExitCritical();
002caa   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	442; brtos/mutex.c	return OK;
002cac   6ae8     clrf	0xe8, 0             	CLRF	WREG
002cae   d02d     bra	0x2d0a               	BRA	_00184_DS_
                                           _00183_DS_:
                                           ;	.line	446; brtos/mutex.c	pont_event->OSEventState = AVAILABLE_RESOURCE;
002cb0   5000     movf	0, 0, 0             	MOVF	r0x00, W
002cb2   0f01     addlw	0x1                	ADDLW	0x01
002cb4   6e03     movwf	0x3, 0             	MOVWF	r0x03
002cb6   0e00     movlw	0                  	MOVLW	0x00
002cb8   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
002cba   6e04     movwf	0x4, 0             	MOVWF	r0x04
002cbc   0e00     movlw	0                  	MOVLW	0x00
002cbe   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
002cc0   6e05     movwf	0x5, 0             	MOVWF	r0x05
002cc2   0e09     movlw	0x9                	MOVLW	0x09
002cc4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
002cc6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
002cc8   ffe9
002cca   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
002ccc   fff3
002cce   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
002cd0   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
002cd2   f037
                                           ;	.line	447; brtos/mutex.c	PriorityVector[pont_event->OSMaxPriority] = MUTEX_PRIO;
002cd4   0e03     movlw	0x3                	MOVLW	0x03
002cd6   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002cd8   0e00     movlw	0                  	MOVLW	0x00
002cda   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002cdc   0e00     movlw	0                  	MOVLW	0x00
002cde   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
002ce0   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002ce2   ffe9
002ce4   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
002ce6   fff3
002ce8   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
002cea   ec78     call	0x6ef0, 0           	CALL	__gptrget1
002cec   f037
002cee   6e00     movwf	0, 0               	MOVWF	r0x00
002cf0   6a01     clrf	0x1, 0              	CLRF	r0x01
002cf2   0ea4     movlw	0xa4               	MOVLW	LOW(_PriorityVector)
002cf4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
002cf6   0e03     movlw	0x3                	MOVLW	HIGH(_PriorityVector)
002cf8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
002cfa   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
002cfc   ffe9
002cfe   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
002d00   ffea
002d02   0efe     movlw	0xfe               	MOVLW	0xfe
002d04   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	450; brtos/mutex.c	OSExitCritical();      
002d06   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	452; brtos/mutex.c	return OK;
002d08   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00184_DS_:
002d0a   cfe4     movff	0xfe4, 0xe         	MOVFF	PREINC1, r0x0e
002d0c   f00e
002d0e   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
002d10   f00d
002d12   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
002d14   f00c
002d16   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
002d18   f00b
002d1a   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
002d1c   f00a
002d1e   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
002d20   f009
002d22   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
002d24   f008
002d26   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
002d28   f007
002d2a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
002d2c   f006
002d2e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
002d30   f005
002d32   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
002d34   f004
002d36   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
002d38   f003
002d3a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
002d3c   f002
002d3e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
002d40   f001
002d42   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
002d44   f000
002d46   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
002d48   ffd9
002d4a   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
002d4c   ffda
002d4e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_mutex__OSMutexAcquire	code
                                           _OSMutexAcquire:
                                           ;	.line	198; brtos/mutex.c	INT8U OSMutexAcquire(BRTOS_Mutex *pont_event)
001774   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
001776   ffe5
001778   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00177a   ffe5
00177c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00177e   ffda
001780   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001782   ffd9
001784   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001786   ffe5
001788   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00178a   ffe5
00178c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00178e   ffe5
001790   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001792   ffe5
001794   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001796   ffe5
001798   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00179a   ffe5
00179c   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00179e   ffe5
0017a0   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0017a2   ffe5
0017a4   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
0017a6   ffe5
0017a8   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
0017aa   ffe5
0017ac   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
0017ae   ffe5
0017b0   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
0017b2   ffe5
0017b4   0e03     movlw	0x3                	MOVLW	0x03
0017b6   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0017b8   f000
0017ba   0e04     movlw	0x4                	MOVLW	0x04
0017bc   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0017be   f001
0017c0   0e05     movlw	0x5                	MOVLW	0x05
0017c2   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0017c4   f002
                                           ;	.line	219; brtos/mutex.c	OSEnterCritical();
0017c6   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	241; brtos/mutex.c	if (pont_event->OSEventState == AVAILABLE_RESOURCE)
0017c8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017ca   0f01     addlw	0x1                	ADDLW	0x01
0017cc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0017ce   0e00     movlw	0                  	MOVLW	0x00
0017d0   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0017d2   6e04     movwf	0x4, 0             	MOVWF	r0x04
0017d4   0e00     movlw	0                  	MOVLW	0x00
0017d6   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0017d8   6e05     movwf	0x5, 0             	MOVWF	r0x05
0017da   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0017dc   ffe9
0017de   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0017e0   fff3
0017e2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0017e4   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0017e6   f037
0017e8   6e06     movwf	0x6, 0             	MOVWF	r0x06
0017ea   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0017ec   0a09     xorlw	0x9                	XORLW	0x09
0017ee   e001     bz	0x17f2                	BZ	_00167_DS_
0017f0   d0ad     bra	0x194c               	BRA	_00159_DS_
                                           _00167_DS_:
                                           ;	.line	244; brtos/mutex.c	pont_event->OSEventState = BUSY_RESOURCE;
0017f2   0e0a     movlw	0xa                	MOVLW	0x0a
0017f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0017f6   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0017f8   ffe9
0017fa   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0017fc   fff3
0017fe   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001800   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001802   f037
                                           ;	.line	247; brtos/mutex.c	pont_event->OSEventOwner = currentTask;
001804   5000     movf	0, 0, 0             	MOVF	r0x00, W
001806   0f02     addlw	0x2                	ADDLW	0x02
001808   6e03     movwf	0x3, 0             	MOVWF	r0x03
00180a   0e00     movlw	0                  	MOVLW	0x00
00180c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00180e   6e04     movwf	0x4, 0             	MOVWF	r0x04
001810   0e00     movlw	0                  	MOVLW	0x00
001812   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001814   6e05     movwf	0x5, 0             	MOVWF	r0x05
001816   c404     movff	0x404, 0xfe5       	MOVFF	_currentTask, POSTDEC1
001818   ffe5
00181a   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00181c   ffe9
00181e   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
001820   fff3
001822   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001824   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001826   f037
                                           ;	.line	254; brtos/mutex.c	pont_event->OSOriginalPriority = ContextTask[currentTask].Priority;
001828   5000     movf	0, 0, 0             	MOVF	r0x00, W
00182a   0f04     addlw	0x4                	ADDLW	0x04
00182c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00182e   0e00     movlw	0                  	MOVLW	0x00
001830   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001832   6e04     movwf	0x4, 0             	MOVWF	r0x04
001834   0e00     movlw	0                  	MOVLW	0x00
001836   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001838   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x06
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00183a   0104     movlb	0x4                	BANKSEL	_currentTask
00183c   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
00183e   0d10     mullw	0x10               	MULLW	0x10
001840   cff3     movff	0xff3, 0x6         	MOVFF	PRODL, r0x06
001842   f006
001844   6a07     clrf	0x7, 0              	CLRF	r0x07
001846   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
001848   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
00184a   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
00184c   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
00184e   0e09     movlw	0x9                	MOVLW	0x09
001850   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
001852   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001854   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001856   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
001858   ffe9
00185a   c007     movff	0x7, 0xfea         	MOVFF	r0x07, FSR0H
00185c   ffea
00185e   cfef     movff	0xfef, 0x8         	MOVFF	INDF0, r0x08
001860   f008
001862   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
001864   ffe5
001866   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
001868   ffe9
00186a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00186c   fff3
00186e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001870   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001872   f037
                                           ;	.line	256; brtos/mutex.c	if (pont_event->OSMaxPriority > ContextTask[currentTask].Priority)
001874   5000     movf	0, 0, 0             	MOVF	r0x00, W
001876   0f03     addlw	0x3                	ADDLW	0x03
001878   6e09     movwf	0x9, 0             	MOVWF	r0x09
00187a   0e00     movlw	0                  	MOVLW	0x00
00187c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00187e   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
001880   0e00     movlw	0                  	MOVLW	0x00
001882   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001884   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
001886   c009     movff	0x9, 0xfe9         	MOVFF	r0x09, FSR0L
001888   ffe9
00188a   c00a     movff	0xa, 0xff3         	MOVFF	r0x0a, PRODL
00188c   fff3
00188e   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
001890   ec78     call	0x6ef0, 0           	CALL	__gptrget1
001892   f037
001894   6e09     movwf	0x9, 0             	MOVWF	r0x09
001896   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001898   5c08     subwf	0x8, 0, 0          	SUBWF	r0x08, W
00189a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00189c   d054     bra	0x1946               	BRA	_00155_DS_
                                           ;	.line	259; brtos/mutex.c	ContextTask[currentTask].Priority = pont_event->OSMaxPriority;
00189e   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0018a0   ffe9
0018a2   c007     movff	0x7, 0xfea         	MOVFF	r0x07, FSR0H
0018a4   ffea
0018a6   c009     movff	0x9, 0xfef         	MOVFF	r0x09, INDF0
0018a8   ffef
                                           ;	.line	262; brtos/mutex.c	PriorityVector[pont_event->OSMaxPriority] = currentTask;
0018aa   0ea4     movlw	0xa4               	MOVLW	LOW(_PriorityVector)
0018ac   2409     addwf	0x9, 0, 0          	ADDWF	r0x09, W
0018ae   6e06     movwf	0x6, 0             	MOVWF	r0x06
0018b0   6a07     clrf	0x7, 0              	CLRF	r0x07
0018b2   0e03     movlw	0x3                	MOVLW	HIGH(_PriorityVector)
0018b4   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
0018b6   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0018b8   ffe9
0018ba   c007     movff	0x7, 0xfea         	MOVFF	r0x07, FSR0H
0018bc   ffea
0018be   c404     movff	0x404, 0xfef       	MOVFF	_currentTask, INDF0
0018c0   ffef
                                           ;	.line	265; brtos/mutex.c	OSReadyList = OSReadyList & ~(PriorityMask[pont_event->OSOriginalPriority]);
0018c2   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
0018c4   ffe9
0018c6   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
0018c8   fff3
0018ca   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0018cc   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0018ce   f037
0018d0   6e03     movwf	0x3, 0             	MOVWF	r0x03
                                           ; ;multiply lit val:0x02 by variable r0x03 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0018d2   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0018d4   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
0018d6   6a04     clrf	0x4, 0              	CLRF	r0x04
0018d8   6a05     clrf	0x5, 0              	CLRF	r0x05
0018da   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
0018dc   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
0018de   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
0018e0   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
0018e2   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
0018e4   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
0018e6   c003     movff	0x3, 0xff6         	MOVFF	r0x03, TBLPTRL
0018e8   fff6
0018ea   c004     movff	0x4, 0xff7         	MOVFF	r0x04, TBLPTRH
0018ec   fff7
0018ee   c005     movff	0x5, 0xff8         	MOVFF	r0x05, TBLPTRU
0018f0   fff8
0018f2   0009     tblrd	*+                 	TBLRD*+	
0018f4   cff5     movff	0xff5, 0x3         	MOVFF	TABLAT, r0x03
0018f6   f003
0018f8   0009     tblrd	*+                 	TBLRD*+	
0018fa   cff5     movff	0xff5, 0x4         	MOVFF	TABLAT, r0x04
0018fc   f004
0018fe   1e03     comf	0x3, 0x1, 0         	COMF	r0x03, F
001900   1e04     comf	0x4, 0x1, 0         	COMF	r0x04, F
001902   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001904   0102     movlb	0x2                	BANKSEL	_OSReadyList
001906   1799     andwf	0x99, 0x1, 0x1     	ANDWF	_OSReadyList, F, B
001908   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00190a   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
00190c   179a     andwf	0x9a, 0x1, 0x1     	ANDWF	(_OSReadyList + 1), F, B
                                           ; ;multiply lit val:0x02 by variable r0x09 and store in r0x09
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	267; brtos/mutex.c	OSReadyList = OSReadyList | (PriorityMask[pont_event->OSMaxPriority]);
00190e   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001910   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
001912   6a03     clrf	0x3, 0              	CLRF	r0x03
001914   6a04     clrf	0x4, 0              	CLRF	r0x04
001916   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
001918   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
00191a   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
00191c   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00191e   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
001920   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001922   c009     movff	0x9, 0xff6         	MOVFF	r0x09, TBLPTRL
001924   fff6
001926   c003     movff	0x3, 0xff7         	MOVFF	r0x03, TBLPTRH
001928   fff7
00192a   c004     movff	0x4, 0xff8         	MOVFF	r0x04, TBLPTRU
00192c   fff8
00192e   0009     tblrd	*+                 	TBLRD*+	
001930   cff5     movff	0xff5, 0x9         	MOVFF	TABLAT, r0x09
001932   f009
001934   0009     tblrd	*+                 	TBLRD*+	
001936   cff5     movff	0xff5, 0x3         	MOVFF	TABLAT, r0x03
001938   f003
00193a   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
00193c   0102     movlb	0x2                	BANKSEL	_OSReadyList
00193e   1399     iorwf	0x99, 0x1, 0x1     	IORWF	_OSReadyList, F, B
001940   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001942   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
001944   139a     iorwf	0x9a, 0x1, 0x1     	IORWF	(_OSReadyList + 1), F, B
                                           _00155_DS_:
                                           ;	.line	270; brtos/mutex.c	OSExitCritical();
001946   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	271; brtos/mutex.c	return OK;
001948   6ae8     clrf	0xe8, 0             	CLRF	WREG
00194a   d106     bra	0x1b58               	BRA	_00161_DS_
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00159_DS_:
00194c   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	276; brtos/mutex.c	iPriority = ContextTask[currentTask].Priority;
00194e   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
001950   0d10     mullw	0x10               	MULLW	0x10
001952   cff3     movff	0xff3, 0x3         	MOVFF	PRODL, r0x03
001954   f003
001956   6a04     clrf	0x4, 0              	CLRF	r0x04
001958   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
00195a   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
00195c   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
00195e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
001960   0e09     movlw	0x9                	MOVLW	0x09
001962   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001964   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001966   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
001968   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
00196a   ffe9
00196c   c004     movff	0x4, 0xfea         	MOVFF	r0x04, FSR0H
00196e   ffea
001970   cfef     movff	0xfef, 0x3         	MOVFF	INDF0, r0x03
001972   f003
                                           ;	.line	278; brtos/mutex.c	pont_event->OSEventWait++;
001974   5000     movf	0, 0, 0             	MOVF	r0x00, W
001976   0f05     addlw	0x5                	ADDLW	0x05
001978   6e04     movwf	0x4, 0             	MOVWF	r0x04
00197a   0e00     movlw	0                  	MOVLW	0x00
00197c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00197e   6e05     movwf	0x5, 0             	MOVWF	r0x05
001980   0e00     movlw	0                  	MOVLW	0x00
001982   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001984   6e06     movwf	0x6, 0             	MOVWF	r0x06
001986   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001988   ffe9
00198a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
00198c   fff3
00198e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001990   ec78     call	0x6ef0, 0           	CALL	__gptrget1
001992   f037
001994   6e07     movwf	0x7, 0             	MOVWF	r0x07
001996   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
001998   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
00199a   ffe5
00199c   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
00199e   ffe9
0019a0   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
0019a2   fff3
0019a4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019a6   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0019a8   f037
                                           ;	.line	281; brtos/mutex.c	pont_event->OSEventWaitList = pont_event->OSEventWaitList | (PriorityMask[iPriority]);
0019aa   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019ac   0f06     addlw	0x6                	ADDLW	0x06
0019ae   6e04     movwf	0x4, 0             	MOVWF	r0x04
0019b0   0e00     movlw	0                  	MOVLW	0x00
0019b2   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
0019b4   6e05     movwf	0x5, 0             	MOVWF	r0x05
0019b6   0e00     movlw	0                  	MOVLW	0x00
0019b8   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
0019ba   6e06     movwf	0x6, 0             	MOVWF	r0x06
0019bc   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
0019be   ffe9
0019c0   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
0019c2   fff3
0019c4   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
0019c6   ec50     call	0x6ea0, 0           	CALL	__gptrget2
0019c8   f037
0019ca   6e07     movwf	0x7, 0             	MOVWF	r0x07
0019cc   cff3     movff	0xff3, 0x8         	MOVFF	PRODL, r0x08
0019ce   f008
                                           ; ;multiply lit val:0x02 by variable r0x03 and store in r0x09
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0019d0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0019d2   3403     rlcf	0x3, 0, 0           	RLCF	r0x03, W
0019d4   6e09     movwf	0x9, 0             	MOVWF	r0x09
0019d6   6a0a     clrf	0xa, 0              	CLRF	r0x0a
0019d8   6a0b     clrf	0xb, 0              	CLRF	r0x0b
0019da   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
0019dc   2609     addwf	0x9, 0x1, 0        	ADDWF	r0x09, F
0019de   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
0019e0   220a     addwfc	0xa, 0x1, 0       	ADDWFC	r0x0a, F
0019e2   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
0019e4   220b     addwfc	0xb, 0x1, 0       	ADDWFC	r0x0b, F
0019e6   c009     movff	0x9, 0xff6         	MOVFF	r0x09, TBLPTRL
0019e8   fff6
0019ea   c00a     movff	0xa, 0xff7         	MOVFF	r0x0a, TBLPTRH
0019ec   fff7
0019ee   c00b     movff	0xb, 0xff8         	MOVFF	r0x0b, TBLPTRU
0019f0   fff8
0019f2   0009     tblrd	*+                 	TBLRD*+	
0019f4   cff5     movff	0xff5, 0x9         	MOVFF	TABLAT, r0x09
0019f6   f009
0019f8   0009     tblrd	*+                 	TBLRD*+	
0019fa   cff5     movff	0xff5, 0xa         	MOVFF	TABLAT, r0x0a
0019fc   f00a
0019fe   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001a00   1207     iorwf	0x7, 0x1, 0        	IORWF	r0x07, F
001a02   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001a04   1208     iorwf	0x8, 0x1, 0        	IORWF	r0x08, F
001a06   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
001a08   ffe5
001a0a   c008     movff	0x8, 0xff4         	MOVFF	r0x08, PRODH
001a0c   fff4
001a0e   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001a10   ffe9
001a12   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
001a14   fff3
001a16   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a18   ecb3     call	0x6f66, 0           	CALL	__gptrput2
001a1a   f037
                                           ;	.line	290; brtos/mutex.c	OSReadyList = OSReadyList & ~(PriorityMask[iPriority]);
001a1c   1e09     comf	0x9, 0x1, 0         	COMF	r0x09, F
001a1e   1e0a     comf	0xa, 0x1, 0         	COMF	r0x0a, F
001a20   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
001a22   0102     movlb	0x2                	BANKSEL	_OSReadyList
001a24   1799     andwf	0x99, 0x1, 0x1     	ANDWF	_OSReadyList, F, B
001a26   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
001a28   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
001a2a   179a     andwf	0x9a, 0x1, 0x1     	ANDWF	(_OSReadyList + 1), F, B
                                           ;	.line	293; brtos/mutex.c	ChangeContext();
001a2c   ec82     call	0x4b04, 0           	CALL	_SwitchContext
001a2e   f025
                                           ;	.line	296; brtos/mutex.c	OSExitCritical();
001a30   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	298; brtos/mutex.c	OSEnterCritical();    
001a32   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	301; brtos/mutex.c	pont_event->OSEventOwner = currentTask;
001a34   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a36   0f02     addlw	0x2                	ADDLW	0x02
001a38   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a3a   0e00     movlw	0                  	MOVLW	0x00
001a3c   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001a3e   6e05     movwf	0x5, 0             	MOVWF	r0x05
001a40   0e00     movlw	0                  	MOVLW	0x00
001a42   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001a44   6e06     movwf	0x6, 0             	MOVWF	r0x06
001a46   c404     movff	0x404, 0xfe5       	MOVFF	_currentTask, POSTDEC1
001a48   ffe5
001a4a   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001a4c   ffe9
001a4e   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
001a50   fff3
001a52   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a54   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001a56   f037
                                           ;	.line	308; brtos/mutex.c	pont_event->OSOriginalPriority = iPriority;
001a58   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a5a   0f04     addlw	0x4                	ADDLW	0x04
001a5c   6e04     movwf	0x4, 0             	MOVWF	r0x04
001a5e   0e00     movlw	0                  	MOVLW	0x00
001a60   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
001a62   6e05     movwf	0x5, 0             	MOVWF	r0x05
001a64   0e00     movlw	0                  	MOVLW	0x00
001a66   2002     addwfc	0x2, 0, 0         	ADDWFC	r0x02, W
001a68   6e06     movwf	0x6, 0             	MOVWF	r0x06
001a6a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001a6c   ffe5
001a6e   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
001a70   ffe9
001a72   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
001a74   fff3
001a76   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001a78   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
001a7a   f037
                                           ;	.line	310; brtos/mutex.c	if (pont_event->OSMaxPriority > iPriority)
001a7c   0e03     movlw	0x3                	MOVLW	0x03
001a7e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001a80   0e00     movlw	0                  	MOVLW	0x00
001a82   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001a84   0e00     movlw	0                  	MOVLW	0x00
001a86   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001a88   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001a8a   ffe9
001a8c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
001a8e   fff3
001a90   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001a92   ec78     call	0x6ef0, 0           	CALL	__gptrget1
001a94   f037
001a96   6e00     movwf	0, 0               	MOVWF	r0x00
001a98   5000     movf	0, 0, 0             	MOVF	r0x00, W
001a9a   5c03     subwf	0x3, 0, 0          	SUBWF	r0x03, W
001a9c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a9e   d05a     bra	0x1b54               	BRA	_00157_DS_
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001aa0   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	313; brtos/mutex.c	ContextTask[currentTask].Priority = pont_event->OSMaxPriority;
001aa2   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
001aa4   0d10     mullw	0x10               	MULLW	0x10
001aa6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
001aa8   f001
001aaa   6a02     clrf	0x2, 0              	CLRF	r0x02
001aac   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
001aae   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001ab0   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
001ab2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001ab4   0e09     movlw	0x9                	MOVLW	0x09
001ab6   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001ab8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001aba   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001abc   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001abe   ffe9
001ac0   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001ac2   ffea
001ac4   c000     movff	0, 0xfef           	MOVFF	r0x00, INDF0
001ac6   ffef
                                           ;	.line	316; brtos/mutex.c	PriorityVector[pont_event->OSMaxPriority] = currentTask;
001ac8   0ea4     movlw	0xa4               	MOVLW	LOW(_PriorityVector)
001aca   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001acc   6e01     movwf	0x1, 0             	MOVWF	r0x01
001ace   6a02     clrf	0x2, 0              	CLRF	r0x02
001ad0   0e03     movlw	0x3                	MOVLW	HIGH(_PriorityVector)
001ad2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001ad4   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001ad6   ffe9
001ad8   c002     movff	0x2, 0xfea         	MOVFF	r0x02, FSR0H
001ada   ffea
001adc   c404     movff	0x404, 0xfef       	MOVFF	_currentTask, INDF0
001ade   ffef
                                           ; ;multiply lit val:0x02 by variable r0x03 and store in r0x03
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	319; brtos/mutex.c	OSReadyList = OSReadyList & ~(PriorityMask[iPriority]);
001ae0   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001ae2   3603     rlcf	0x3, 0x1, 0         	RLCF	r0x03, F
001ae4   6a01     clrf	0x1, 0              	CLRF	r0x01
001ae6   6a02     clrf	0x2, 0              	CLRF	r0x02
001ae8   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
001aea   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
001aec   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
001aee   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001af0   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
001af2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001af4   c003     movff	0x3, 0xff6         	MOVFF	r0x03, TBLPTRL
001af6   fff6
001af8   c001     movff	0x1, 0xff7         	MOVFF	r0x01, TBLPTRH
001afa   fff7
001afc   c002     movff	0x2, 0xff8         	MOVFF	r0x02, TBLPTRU
001afe   fff8
001b00   0009     tblrd	*+                 	TBLRD*+	
001b02   cff5     movff	0xff5, 0x3         	MOVFF	TABLAT, r0x03
001b04   f003
001b06   0009     tblrd	*+                 	TBLRD*+	
001b08   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
001b0a   f001
001b0c   1e03     comf	0x3, 0x1, 0         	COMF	r0x03, F
001b0e   1e01     comf	0x1, 0x1, 0         	COMF	r0x01, F
001b10   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001b12   0102     movlb	0x2                	BANKSEL	_OSReadyList
001b14   1799     andwf	0x99, 0x1, 0x1     	ANDWF	_OSReadyList, F, B
001b16   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b18   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
001b1a   179a     andwf	0x9a, 0x1, 0x1     	ANDWF	(_OSReadyList + 1), F, B
                                           ; ;multiply lit val:0x02 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           ;	.line	321; brtos/mutex.c	OSReadyList = OSReadyList | (PriorityMask[pont_event->OSMaxPriority]);
001b1c   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001b1e   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
001b20   6a01     clrf	0x1, 0              	CLRF	r0x01
001b22   6a02     clrf	0x2, 0              	CLRF	r0x02
001b24   0ee6     movlw	0xe6               	MOVLW	LOW(_PriorityMask)
001b26   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001b28   0e6d     movlw	0x6d               	MOVLW	HIGH(_PriorityMask)
001b2a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001b2c   0e00     movlw	0                  	MOVLW	UPPER(_PriorityMask)
001b2e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001b30   c000     movff	0, 0xff6           	MOVFF	r0x00, TBLPTRL
001b32   fff6
001b34   c001     movff	0x1, 0xff7         	MOVFF	r0x01, TBLPTRH
001b36   fff7
001b38   c002     movff	0x2, 0xff8         	MOVFF	r0x02, TBLPTRU
001b3a   fff8
001b3c   0009     tblrd	*+                 	TBLRD*+	
001b3e   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
001b40   f000
001b42   0009     tblrd	*+                 	TBLRD*+	
001b44   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
001b46   f001
001b48   5000     movf	0, 0, 0             	MOVF	r0x00, W
001b4a   0102     movlb	0x2                	BANKSEL	_OSReadyList
001b4c   1399     iorwf	0x99, 0x1, 0x1     	IORWF	_OSReadyList, F, B
001b4e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001b50   0102     movlb	0x2                	BANKSEL	(_OSReadyList + 1)
001b52   139a     iorwf	0x9a, 0x1, 0x1     	IORWF	(_OSReadyList + 1), F, B
                                           _00157_DS_:
                                           ;	.line	324; brtos/mutex.c	OSExitCritical();
001b54   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	325; brtos/mutex.c	return OK;
001b56   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00161_DS_:
001b58   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
001b5a   f00b
001b5c   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
001b5e   f00a
001b60   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
001b62   f009
001b64   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
001b66   f008
001b68   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
001b6a   f007
001b6c   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
001b6e   f006
001b70   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001b72   f005
001b74   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001b76   f004
001b78   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001b7a   f003
001b7c   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001b7e   f002
001b80   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001b82   f001
001b84   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001b86   f000
001b88   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001b8a   ffd9
001b8c   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
001b8e   ffda
001b90   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_mutex__OSMutexDelete	code
                                           _OSMutexDelete:
                                           ;	.line	153; brtos/mutex.c	INT8U OSMutexDelete (BRTOS_Mutex **event)
0044d2   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0044d4   ffe5
0044d6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0044d8   ffe5
0044da   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0044dc   ffda
0044de   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0044e0   ffd9
0044e2   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0044e4   ffe5
0044e6   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0044e8   ffe5
0044ea   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0044ec   ffe5
0044ee   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0044f0   ffe5
0044f2   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0044f4   ffe5
0044f6   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0044f8   ffe5
0044fa   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0044fc   ffe5
0044fe   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
004500   ffe5
004502   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
004504   ffe5
004506   0e03     movlw	0x3                	MOVLW	0x03
004508   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
00450a   f000
00450c   0e04     movlw	0x4                	MOVLW	0x04
00450e   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
004510   f001
004512   0e05     movlw	0x5                	MOVLW	0x05
004514   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
004516   f002
004518   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	158; brtos/mutex.c	if (iNesting > 0) {                                // See if caller is an interrupt
00451a   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
00451c   e002     bz	0x4522                	BZ	_00148_DS_
                                           ;	.line	159; brtos/mutex.c	return(IRQ_PEND_ERR);                          // Can't be delete by interrupt
00451e   0e02     movlw	0x2                	MOVLW	0x02
004520   d090     bra	0x4642               	BRA	_00149_DS_
                                           _00148_DS_:
                                           ;	.line	163; brtos/mutex.c	OSEnterCritical();
004522   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	165; brtos/mutex.c	pont_event = *event;  
004524   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004526   ffe9
004528   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00452a   fff3
00452c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00452e   ecbf     call	0x6d7e, 0           	CALL	__gptrget3
004530   f036
004532   6e03     movwf	0x3, 0             	MOVWF	r0x03
004534   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
004536   f004
004538   cff4     movff	0xff4, 0x5         	MOVFF	PRODH, r0x05
00453a   f005
                                           ;	.line	166; brtos/mutex.c	pont_event->OSEventAllocated   = 0;
00453c   0e00     movlw	0                  	MOVLW	0x00
00453e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004540   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004542   ffe9
004544   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
004546   fff3
004548   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
00454a   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
00454c   f037
                                           ;	.line	167; brtos/mutex.c	pont_event->OSEventState       = 0;
00454e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004550   0f01     addlw	0x1                	ADDLW	0x01
004552   6e06     movwf	0x6, 0             	MOVWF	r0x06
004554   0e00     movlw	0                  	MOVLW	0x00
004556   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
004558   6e07     movwf	0x7, 0             	MOVWF	r0x07
00455a   0e00     movlw	0                  	MOVLW	0x00
00455c   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
00455e   6e08     movwf	0x8, 0             	MOVWF	r0x08
004560   0e00     movlw	0                  	MOVLW	0x00
004562   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004564   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
004566   ffe9
004568   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00456a   fff3
00456c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
00456e   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004570   f037
                                           ;	.line	168; brtos/mutex.c	pont_event->OSEventOwner       = 0;                        
004572   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004574   0f02     addlw	0x2                	ADDLW	0x02
004576   6e06     movwf	0x6, 0             	MOVWF	r0x06
004578   0e00     movlw	0                  	MOVLW	0x00
00457a   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
00457c   6e07     movwf	0x7, 0             	MOVWF	r0x07
00457e   0e00     movlw	0                  	MOVLW	0x00
004580   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
004582   6e08     movwf	0x8, 0             	MOVWF	r0x08
004584   0e00     movlw	0                  	MOVLW	0x00
004586   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004588   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
00458a   ffe9
00458c   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
00458e   fff3
004590   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
004592   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004594   f037
                                           ;	.line	169; brtos/mutex.c	pont_event->OSMaxPriority      = 0;                      
004596   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
004598   0f03     addlw	0x3                	ADDLW	0x03
00459a   6e06     movwf	0x6, 0             	MOVWF	r0x06
00459c   0e00     movlw	0                  	MOVLW	0x00
00459e   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0045a0   6e07     movwf	0x7, 0             	MOVWF	r0x07
0045a2   0e00     movlw	0                  	MOVLW	0x00
0045a4   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0045a6   6e08     movwf	0x8, 0             	MOVWF	r0x08
0045a8   0e00     movlw	0                  	MOVLW	0x00
0045aa   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045ac   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0045ae   ffe9
0045b0   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0045b2   fff3
0045b4   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0045b6   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0045b8   f037
                                           ;	.line	170; brtos/mutex.c	pont_event->OSOriginalPriority = 0;                
0045ba   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0045bc   0f04     addlw	0x4                	ADDLW	0x04
0045be   6e06     movwf	0x6, 0             	MOVWF	r0x06
0045c0   0e00     movlw	0                  	MOVLW	0x00
0045c2   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0045c4   6e07     movwf	0x7, 0             	MOVWF	r0x07
0045c6   0e00     movlw	0                  	MOVLW	0x00
0045c8   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0045ca   6e08     movwf	0x8, 0             	MOVWF	r0x08
0045cc   0e00     movlw	0                  	MOVLW	0x00
0045ce   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045d0   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0045d2   ffe9
0045d4   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0045d6   fff3
0045d8   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0045da   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
0045dc   f037
                                           ;	.line	171; brtos/mutex.c	pont_event->OSEventWait        = 0;  
0045de   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0045e0   0f05     addlw	0x5                	ADDLW	0x05
0045e2   6e06     movwf	0x6, 0             	MOVWF	r0x06
0045e4   0e00     movlw	0                  	MOVLW	0x00
0045e6   2004     addwfc	0x4, 0, 0         	ADDWFC	r0x04, W
0045e8   6e07     movwf	0x7, 0             	MOVWF	r0x07
0045ea   0e00     movlw	0                  	MOVLW	0x00
0045ec   2005     addwfc	0x5, 0, 0         	ADDWFC	r0x05, W
0045ee   6e08     movwf	0x8, 0             	MOVWF	r0x08
0045f0   0e00     movlw	0                  	MOVLW	0x00
0045f2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0045f4   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
0045f6   ffe9
0045f8   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
0045fa   fff3
0045fc   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
0045fe   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
004600   f037
                                           ;	.line	173; brtos/mutex.c	pont_event->OSEventWaitList=0;
004602   0e06     movlw	0x6                	MOVLW	0x06
004604   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
004606   0e00     movlw	0                  	MOVLW	0x00
004608   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
00460a   0e00     movlw	0                  	MOVLW	0x00
00460c   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
00460e   0e00     movlw	0                  	MOVLW	0x00
004610   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004612   0e00     movlw	0                  	MOVLW	0x00
004614   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
004616   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
004618   ffe9
00461a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
00461c   fff3
00461e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
004620   ecb3     call	0x6f66, 0           	CALL	__gptrput2
004622   f037
                                           ;	.line	175; brtos/mutex.c	*event = NULL;
004624   0e00     movlw	0                  	MOVLW	0x00
004626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
004628   0e00     movlw	0                  	MOVLW	0x00
00462a   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
00462c   0e00     movlw	0                  	MOVLW	0x00
00462e   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
004630   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004632   ffe9
004634   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
004636   fff3
004638   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00463a   ec99     call	0x6f32, 0           	CALL	__gptrput3
00463c   f037
                                           ;	.line	178; brtos/mutex.c	OSExitCritical();
00463e   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	180; brtos/mutex.c	return(DELETE_EVENT_OK);
004640   0e08     movlw	0x8                	MOVLW	0x08
                                           _00149_DS_:
004642   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
004644   f008
004646   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
004648   f007
00464a   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
00464c   f006
00464e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
004650   f005
004652   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
004654   f004
004656   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
004658   f003
00465a   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
00465c   f002
00465e   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004660   f001
004662   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004664   f000
004666   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004668   ffd9
00466a   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
00466c   ffda
00466e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_mutex__OSMutexCreate	code
                                           _OSMutexCreate:
                                           ;	.line	70; brtos/mutex.c	INT8U OSMutexCreate (BRTOS_Mutex **event, INT8U HigherPriority)
0039d0   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0039d2   ffe5
0039d4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0039d6   ffe5
0039d8   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0039da   ffda
0039dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0039de   ffd9
0039e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0039e2   ffe5
0039e4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0039e6   ffe5
0039e8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0039ea   ffe5
0039ec   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0039ee   ffe5
0039f0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0039f2   ffe5
0039f4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0039f6   ffe5
0039f8   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0039fa   ffe5
0039fc   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0039fe   ffe5
003a00   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003a02   ffe5
003a04   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
003a06   ffe5
003a08   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
003a0a   ffe5
003a0c   0e03     movlw	0x3                	MOVLW	0x03
003a0e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003a10   f000
003a12   0e04     movlw	0x4                	MOVLW	0x04
003a14   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003a16   f001
003a18   0e05     movlw	0x5                	MOVLW	0x05
003a1a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003a1c   f002
003a1e   0e06     movlw	0x6                	MOVLW	0x06
003a20   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
003a22   f003
003a24   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	77; brtos/mutex.c	if (iNesting > 0) {                                // See if caller is an interrupt
003a26   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
003a28   e002     bz	0x3a2e                	BZ	_00106_DS_
                                           ;	.line	78; brtos/mutex.c	return(IRQ_PEND_ERR);                          // Can't be create by interrupt
003a2a   0e02     movlw	0x2                	MOVLW	0x02
003a2c   d0bd     bra	0x3ba8               	BRA	_00125_DS_
                                           _00106_DS_:
003a2e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	82; brtos/mutex.c	if (currentTask)
003a30   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
003a32   e001     bz	0x3a36                	BZ	_00108_DS_
                                           ;	.line	83; brtos/mutex.c	OSEnterCritical();
003a34   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           _00108_DS_:
                                           ;	.line	85; brtos/mutex.c	if (PriorityVector[HigherPriority] != EMPTY_PRIO)
003a36   0ea4     movlw	0xa4               	MOVLW	LOW(_PriorityVector)
003a38   2403     addwf	0x3, 0, 0          	ADDWF	r0x03, W
003a3a   6e04     movwf	0x4, 0             	MOVWF	r0x04
003a3c   6a05     clrf	0x5, 0              	CLRF	r0x05
003a3e   0e03     movlw	0x3                	MOVLW	HIGH(_PriorityVector)
003a40   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
003a42   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003a44   ffe9
003a46   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
003a48   ffea
003a4a   cfef     movff	0xfef, 0x6         	MOVFF	INDF0, r0x06
003a4c   f006
003a4e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003a50   0aff     xorlw	0xff               	XORLW	0xff
003a52   e006     bz	0x3a60                	BZ	_00112_DS_
                                           _00138_DS_:
003a54   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	88; brtos/mutex.c	if (currentTask)
003a56   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
003a58   e001     bz	0x3a5c                	BZ	_00110_DS_
                                           ;	.line	89; brtos/mutex.c	OSExitCritical();
003a5a   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00110_DS_:
                                           ;	.line	90; brtos/mutex.c	return BUSY_PRIORITY;                          // The priority is busy
003a5c   0e04     movlw	0x4                	MOVLW	0x04
003a5e   d0a4     bra	0x3ba8               	BRA	_00125_DS_
                                           _00112_DS_:
                                           ;	.line	94; brtos/mutex.c	PriorityVector[HigherPriority] = MUTEX_PRIO;
003a60   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003a62   ffe9
003a64   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
003a66   ffea
003a68   0efe     movlw	0xfe               	MOVLW	0xfe
003a6a   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	97; brtos/mutex.c	for(i=0;i<=BRTOS_MAX_MUTEX;i++)
003a6c   6a04     clrf	0x4, 0              	CLRF	r0x04
003a6e   6a05     clrf	0x5, 0              	CLRF	r0x05
003a70   6a06     clrf	0x6, 0              	CLRF	r0x06
003a72   6a07     clrf	0x7, 0              	CLRF	r0x07
                                           _00119_DS_:
003a74   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003a76   0f80     addlw	0x80               	ADDLW	0x80
003a78   0f80     addlw	0x80               	ADDLW	0x80
003a7a   e102     bnz	0x3a80               	BNZ	_00139_DS_
003a7c   0e03     movlw	0x3                	MOVLW	0x03
003a7e   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00139_DS_:
003a80   e237     bc	0x3af0                	BC	_00122_DS_
                                           ;	.line	100; brtos/mutex.c	if(i >= BRTOS_MAX_MUTEX)
003a82   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003a84   0f80     addlw	0x80               	ADDLW	0x80
003a86   0f80     addlw	0x80               	ADDLW	0x80
003a88   e102     bnz	0x3a8e               	BNZ	_00140_DS_
003a8a   0e02     movlw	0x2                	MOVLW	0x02
003a8c   5c04     subwf	0x4, 0, 0          	SUBWF	r0x04, W
                                           _00140_DS_:
003a8e   e306     bnc	0x3a9c               	BNC	_00116_DS_
003a90   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	105; brtos/mutex.c	if (currentTask)
003a92   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
003a94   e001     bz	0x3a98                	BZ	_00114_DS_
                                           ;	.line	106; brtos/mutex.c	OSExitCritical();
003a96   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00114_DS_:
                                           ;	.line	108; brtos/mutex.c	return(NO_AVAILABLE_EVENT);
003a98   0e01     movlw	0x1                	MOVLW	0x01
003a9a   d086     bra	0x3ba8               	BRA	_00125_DS_
                                           _00116_DS_:
                                           ;	.line	112; brtos/mutex.c	if(BRTOS_Mutex_Table[i].OSEventAllocated != TRUE)
003a9c   0eb4     movlw	0xb4               	MOVLW	LOW(_BRTOS_Mutex_Table)
003a9e   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
003aa0   6e08     movwf	0x8, 0             	MOVWF	r0x08
003aa2   0e03     movlw	0x3                	MOVLW	HIGH(_BRTOS_Mutex_Table)
003aa4   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
003aa6   6e09     movwf	0x9, 0             	MOVWF	r0x09
003aa8   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
003aaa   ffe9
003aac   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
003aae   ffea
003ab0   cfef     movff	0xfef, 0xa         	MOVFF	INDF0, r0x0a
003ab2   f00a
003ab4   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
003ab6   0a01     xorlw	0x1                	XORLW	0x01
003ab8   e013     bz	0x3ae0                	BZ	_00121_DS_
                                           ;	.line	114; brtos/mutex.c	BRTOS_Mutex_Table[i].OSEventAllocated = TRUE;
003aba   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
003abc   ffe9
003abe   c009     movff	0x9, 0xfea         	MOVFF	r0x09, FSR0H
003ac0   ffea
003ac2   0e01     movlw	0x1                	MOVLW	0x01
003ac4   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	115; brtos/mutex.c	pont_event = &BRTOS_Mutex_Table[i];
003ac6   0eb4     movlw	0xb4               	MOVLW	LOW(_BRTOS_Mutex_Table)
003ac8   2406     addwf	0x6, 0, 0          	ADDWF	r0x06, W
003aca   6e08     movwf	0x8, 0             	MOVWF	r0x08
003acc   0e03     movlw	0x3                	MOVLW	HIGH(_BRTOS_Mutex_Table)
003ace   2007     addwfc	0x7, 0, 0         	ADDWFC	r0x07, W
003ad0   6e09     movwf	0x9, 0             	MOVWF	r0x09
003ad2   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
003ad4   6e09     movwf	0x9, 0             	MOVWF	r0x09
003ad6   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003ad8   6e08     movwf	0x8, 0             	MOVWF	r0x08
003ada   0e80     movlw	0x80               	MOVLW	0x80
003adc   6e0a     movwf	0xa, 0             	MOVWF	r0x0a
                                           ;	.line	116; brtos/mutex.c	break;      
003ade   d008     bra	0x3af0               	BRA	_00122_DS_
                                           _00121_DS_:
                                           ;	.line	97; brtos/mutex.c	for(i=0;i<=BRTOS_MAX_MUTEX;i++)
003ae0   0e08     movlw	0x8                	MOVLW	0x08
003ae2   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
003ae4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ae6   2a07     incf	0x7, 0x1, 0         	INCF	r0x07, F
003ae8   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
003aea   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003aec   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
003aee   d7c2     bra	0x3a74               	BRA	_00119_DS_
                                           _00122_DS_:
                                           ;	.line	122; brtos/mutex.c	pont_event->OSEventState = AVAILABLE_RESOURCE;       // Set mutex init value
003af0   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003af2   0f01     addlw	0x1                	ADDLW	0x01
003af4   6e04     movwf	0x4, 0             	MOVWF	r0x04
003af6   0e00     movlw	0                  	MOVLW	0x00
003af8   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
003afa   6e05     movwf	0x5, 0             	MOVWF	r0x05
003afc   0e00     movlw	0                  	MOVLW	0x00
003afe   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
003b00   6e06     movwf	0x6, 0             	MOVWF	r0x06
003b02   0e09     movlw	0x9                	MOVLW	0x09
003b04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b06   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003b08   ffe9
003b0a   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
003b0c   fff3
003b0e   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003b10   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
003b12   f037
                                           ;	.line	123; brtos/mutex.c	pont_event->OSEventWait  = 0;
003b14   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003b16   0f05     addlw	0x5                	ADDLW	0x05
003b18   6e04     movwf	0x4, 0             	MOVWF	r0x04
003b1a   0e00     movlw	0                  	MOVLW	0x00
003b1c   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
003b1e   6e05     movwf	0x5, 0             	MOVWF	r0x05
003b20   0e00     movlw	0                  	MOVLW	0x00
003b22   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
003b24   6e06     movwf	0x6, 0             	MOVWF	r0x06
003b26   0e00     movlw	0                  	MOVLW	0x00
003b28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b2a   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003b2c   ffe9
003b2e   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
003b30   fff3
003b32   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003b34   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
003b36   f037
                                           ;	.line	124; brtos/mutex.c	pont_event->OSMaxPriority = HigherPriority;          // Determina a tarefa de maior prioridade acessando o mutex
003b38   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003b3a   0f03     addlw	0x3                	ADDLW	0x03
003b3c   6e04     movwf	0x4, 0             	MOVWF	r0x04
003b3e   0e00     movlw	0                  	MOVLW	0x00
003b40   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
003b42   6e05     movwf	0x5, 0             	MOVWF	r0x05
003b44   0e00     movlw	0                  	MOVLW	0x00
003b46   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
003b48   6e06     movwf	0x6, 0             	MOVWF	r0x06
003b4a   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003b4c   ffe5
003b4e   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
003b50   ffe9
003b52   c005     movff	0x5, 0xff3         	MOVFF	r0x05, PRODL
003b54   fff3
003b56   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
003b58   ecbf     call	0x6f7e, 0           	CALL	__gptrput1
003b5a   f037
                                           ;	.line	127; brtos/mutex.c	pont_event->OSEventWaitList=0;
003b5c   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
003b5e   0f06     addlw	0x6                	ADDLW	0x06
003b60   6e03     movwf	0x3, 0             	MOVWF	r0x03
003b62   0e00     movlw	0                  	MOVLW	0x00
003b64   2009     addwfc	0x9, 0, 0         	ADDWFC	r0x09, W
003b66   6e04     movwf	0x4, 0             	MOVWF	r0x04
003b68   0e00     movlw	0                  	MOVLW	0x00
003b6a   200a     addwfc	0xa, 0, 0         	ADDWFC	r0x0a, W
003b6c   6e05     movwf	0x5, 0             	MOVWF	r0x05
003b6e   0e00     movlw	0                  	MOVLW	0x00
003b70   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003b72   0e00     movlw	0                  	MOVLW	0x00
003b74   6ef4     movwf	0xf4, 0            	MOVWF	PRODH
003b76   c003     movff	0x3, 0xfe9         	MOVFF	r0x03, FSR0L
003b78   ffe9
003b7a   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
003b7c   fff3
003b7e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003b80   ecb3     call	0x6f66, 0           	CALL	__gptrput2
003b82   f037
                                           ;	.line	129; brtos/mutex.c	*event = pont_event;
003b84   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
003b86   ffe5
003b88   c009     movff	0x9, 0xff4         	MOVFF	r0x09, PRODH
003b8a   fff4
003b8c   c00a     movff	0xa, 0xff6         	MOVFF	r0x0a, TBLPTRL
003b8e   fff6
003b90   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
003b92   ffe9
003b94   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
003b96   fff3
003b98   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003b9a   ec99     call	0x6f32, 0           	CALL	__gptrput3
003b9c   f037
003b9e   0104     movlb	0x4                	BANKSEL	_currentTask
                                           ;	.line	132; brtos/mutex.c	if (currentTask)
003ba0   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
003ba2   e001     bz	0x3ba6                	BZ	_00124_DS_
                                           ;	.line	133; brtos/mutex.c	OSExitCritical();  
003ba4   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           _00124_DS_:
                                           ;	.line	135; brtos/mutex.c	return(ALLOC_EVENT_OK);
003ba6   6ae8     clrf	0xe8, 0             	CLRF	WREG
                                           _00125_DS_:
003ba8   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
003baa   f00a
003bac   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
003bae   f009
003bb0   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
003bb2   f008
003bb4   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
003bb6   f007
003bb8   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
003bba   f006
003bbc   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003bbe   f005
003bc0   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003bc2   f004
003bc4   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003bc6   f003
003bc8   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003bca   f002
003bcc   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003bce   f001
003bd0   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003bd2   f000
003bd4   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003bd6   ffd9
003bd8   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
003bda   ffda
003bdc   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 2772 (0x0ad4) bytes ( 2.11%)
                                           ;           	 1386 (0x056a) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	   15 (0x000f) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : free open source ANSI-C Compiler
                                           ; Version 2.9.0 #5416 (Apr 29 2011) (UNIX)
                                           ; This file was generated Tue Jul 19 15:07:14 2011
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4520
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _SerialResource
                                           	global _SerialRXBuffer
                                           	global _QSerialRX
                                           	global _SerialTXBuffer
                                           	global _QSerialTX
                                           	global _SerialTX
                                           	global _Serial_Init
                                           	global _Serial_Envia_Caracter
                                           	global _Serial_Envia_Frase
                                           	global _SerialRxHandler
                                           	global _SerialRx
                                           	global _SerialTxHandler
                                           	global _SerialTx
                                           	global _acquireUART
                                           	global _releaseUART
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _DDRAbits
                                           	extern _TRISAbits
                                           	extern _DDRBbits
                                           	extern _TRISBbits
                                           	extern _DDRCbits
                                           	extern _TRISCbits
                                           	extern _DDRDbits
                                           	extern _TRISDbits
                                           	extern _DDREbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _PWM1CONbits
                                           	extern _BAUDCONbits
                                           	extern _BAUDCTLbits
                                           	extern _CCP2CONbits
                                           	extern _CCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _LVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _STKPTRbits
                                           	extern _SPvalue
                                           	extern _Hora
                                           	extern _Data
                                           	extern _BRTOS_Sem_Table
                                           	extern _BRTOS_Mutex_Table
                                           	extern _BRTOS_Queue_Table
                                           	extern _OSReadyList
                                           	extern _OSBlockedList
                                           	extern _Tail
                                           	extern _Head
                                           	extern _iNesting
                                           	extern _currentTask
                                           	extern _SelectedTask
                                           	extern _ContextTask
                                           	extern _iStackAddress
                                           	extern _NumberOfInstalledTasks
                                           	extern _counter
                                           	extern _OSDuty
                                           	extern _PriorityVector
                                           	extern _OSDutyTmp
                                           	extern _LastOSDuty
                                           	extern _STACK
                                           	extern _TaskAlloc
                                           	extern _QUEUE_STACK
                                           	extern _iQueueAddress
                                           	extern _version
                                           	extern _BufferText
                                           	extern _StackAddress
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _DDRA
                                           	extern _TRISA
                                           	extern _DDRB
                                           	extern _TRISB
                                           	extern _DDRC
                                           	extern _TRISC
                                           	extern _DDRD
                                           	extern _TRISD
                                           	extern _DDRE
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _PWM1CON
                                           	extern _BAUDCON
                                           	extern _BAUDCTL
                                           	extern _CCP2CON
                                           	extern _CCPR2
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _CCP1CON
                                           	extern _CCPR1
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRES
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _LVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PROD
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTR
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PC
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOS
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _OSSchedule
                                           	extern _OSSemCreate
                                           	extern _OSSemPend
                                           	extern _OSSemPost
                                           	extern _OSMutexCreate
                                           	extern _OSMutexAcquire
                                           	extern _OSMutexRelease
                                           	extern _OSQueueCreate
                                           	extern _OSWQueue
                                           	extern _OSRQueue
                                           	extern _OSCleanQueue
                                           	extern _OSQueuePost
                                           	extern __divulong
                                           	extern _PriorityMask
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR1H	equ	0xfe2
                                           FSR2L	equ	0xfd9
                                           FSR2H	equ	0xfda
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _WaitingSerialTXBuffer	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           udata_serial_0	udata
                                           _SerialResource	res	3
                                           
                                           udata_serial_1	udata
                                           _SerialTXBuffer	res	19
                                           
                                           udata_serial_2	udata
                                           _QSerialTX	res	3
                                           
                                           udata_serial_3	udata
                                           _SerialRXBuffer	res	19
                                           
                                           udata_serial_4	udata
                                           _QSerialRX	res	3
                                           
                                           udata_serial_5	udata
                                           _SerialTX	res	3
                                           
                                           udata_serial_6	udata
                                           _SerialTxHandler_caracter_1_1	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_serial__releaseUART	code
                                           _releaseUART:
                                           ;	.line	216; drivers/serial.c	void releaseUART(void)
006d0e   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006d10   ffe5
006d12   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006d14   ffe5
006d16   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006d18   ffda
006d1a   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006d1c   ffd9
006d1e   0103     movlb	0x3                	BANKSEL	(_SerialResource + 2)
                                           ;	.line	219; drivers/serial.c	OSMutexRelease(SerialResource);
006d20   51f7     movf	0xf7, 0, 0x1        	MOVF	(_SerialResource + 2), W, B
006d22   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d24   0103     movlb	0x3                	BANKSEL	(_SerialResource + 1)
006d26   51f6     movf	0xf6, 0, 0x1        	MOVF	(_SerialResource + 1), W, B
006d28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d2a   0103     movlb	0x3                	BANKSEL	_SerialResource
006d2c   51f5     movf	0xf5, 0, 0x1        	MOVF	_SerialResource, W, B
006d2e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d30   ec23     call	0x2a46, 0           	CALL	_OSMutexRelease
006d32   f015
006d34   0e03     movlw	0x3                	MOVLW	0x03
006d36   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006d38   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006d3a   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006d3c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006d3e   ffd9
006d40   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006d42   ffda
006d44   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__acquireUART	code
                                           _acquireUART:
                                           ;	.line	209; drivers/serial.c	void acquireUART(void)
006d46   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006d48   ffe5
006d4a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006d4c   ffe5
006d4e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006d50   ffda
006d52   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006d54   ffd9
006d56   0103     movlb	0x3                	BANKSEL	(_SerialResource + 2)
                                           ;	.line	212; drivers/serial.c	OSMutexAcquire(SerialResource);
006d58   51f7     movf	0xf7, 0, 0x1        	MOVF	(_SerialResource + 2), W, B
006d5a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d5c   0103     movlb	0x3                	BANKSEL	(_SerialResource + 1)
006d5e   51f6     movf	0xf6, 0, 0x1        	MOVF	(_SerialResource + 1), W, B
006d60   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d62   0103     movlb	0x3                	BANKSEL	_SerialResource
006d64   51f5     movf	0xf5, 0, 0x1        	MOVF	_SerialResource, W, B
006d66   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006d68   ecba     call	0x1774, 0           	CALL	_OSMutexAcquire
006d6a   f00b
006d6c   0e03     movlw	0x3                	MOVLW	0x03
006d6e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006d70   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006d72   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006d74   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006d76   ffd9
006d78   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006d7a   ffda
006d7c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__SerialTx	code
                                           _SerialTx:
                                           ;	.line	184; drivers/serial.c	void SerialTx(void)
004808   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00480a   ffe5
00480c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00480e   ffe5
004810   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
004812   ffda
004814   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004816   ffd9
004818   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00481a   ffe5
00481c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00481e   ffe5
004820   cfd8     movff	0xfd8, 0xfe4       	MOVFF _STATUS, PREINC1 
004822   ffe4
004824   cfe8     movff	0xfe8, 0xfe4       	MOVFF _WREG, PREINC1 
004826   ffe4
004828   cfe0     movff	0xfe0, 0xfe4       	MOVFF _BSR, PREINC1 
00482a   ffe4
00482c   cfda     movff	0xfda, 0xfe4       	MOVFF _FSR2H, PREINC1 
00482e   ffe4
004830   cfe2     movff	0xfe2, 0xfda       	MOVFF _FSR1H, _FSR2H 
004832   ffda
004834   cfd9     movff	0xfd9, 0xfe4       	MOVFF _FSR2L, PREINC1 
004836   ffe4
004838   cfe9     movff	0xfe9, 0xfe4       	MOVFF _FSR0L, PREINC1 
00483a   ffe4
00483c   cfea     movff	0xfea, 0xfe4       	MOVFF _FSR0H, PREINC1 
00483e   ffe4
004840   cff5     movff	0xff5, 0xfe4       	MOVFF _TABLAT, PREINC1 
004842   ffe4
004844   cff6     movff	0xff6, 0xfe4       	MOVFF _TBLPTRL, PREINC1 
004846   ffe4
004848   cff7     movff	0xff7, 0xfe4       	MOVFF _TBLPTRH, PREINC1 
00484a   ffe4
00484c   cff8     movff	0xff8, 0xfe4       	MOVFF _TBLPTRU, PREINC1 
00484e   ffe4
004850   cff3     movff	0xff3, 0xfe4       	MOVFF _PRODL, PREINC1 
004852   ffe4
004854   cff4     movff	0xff4, 0xfe4       	MOVFF _PRODH, PREINC1 
004856   ffe4
004858   cffa     movff	0xffa, 0xfe4       	MOVFF _PCLATH, PREINC1 
00485a   ffe4
00485c   cffb     movff	0xffb, 0xfe4       	MOVFF _PCLATU, PREINC1 
00485e   ffe4
004860   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	190; drivers/serial.c	OS_INT_ENTER();
004862   2bad     incf	0xad, 0x1, 0x1      	INCF	_iNesting, F, B
                                           ;	.line	193; drivers/serial.c	SerialTxHandler();
004864   ecd7     call	0x61ae, 0           	CALL	_SerialTxHandler
004866   f030
004868   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	202; drivers/serial.c	OS_INT_EXIT();
00486a   07ad     decf	0xad, 0x1, 0x1      	DECF	_iNesting, F, B
00486c   0102     movlb	0x2                	BANKSEL	_iNesting
00486e   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
004870   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
004872   d05f     bra	0x4932               	BRA	_00221_DS_
004874   ec2c     call	0x6a58, 0           	CALL	_OSSchedule
004876   f035
004878   0104     movlb	0x4                	BANKSEL	_SelectedTask
00487a   6f03     movwf	0x3, 0x1           	MOVWF	_SelectedTask, B
00487c   0104     movlb	0x4                	BANKSEL	_currentTask
00487e   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
004880   0104     movlb	0x4                	BANKSEL	_SelectedTask
004882   1903     xorwf	0x3, 0, 0x1        	XORWF	_SelectedTask, W, B
004884   e101     bnz	0x4888               	BNZ	_00231_DS_
004886   d055     bra	0x4932               	BRA	_00221_DS_
                                           _00230_DS_:
                                           _00231_DS_:
004888   cffc     movff	0xffc, 0xfe9       	MOVFF _STKPTR, _FSR0L 
00488a   ffe9
                                           _00212_DS_:
00488c   50fc     movf	0xfc, 0, 0          	MOVF	_STKPTR, W
00488e   e008     bz	0x48a0                	BZ	_00214_DS_
004890   cffd     movff	0xffd, 0xfe4       	MOVFF _TOSL, _PREINC1 
004892   ffe4
004894   cffe     movff	0xffe, 0xfe4       	MOVFF _TOSH, _PREINC1 
004896   ffe4
004898   cfff     movff	0xfff, 0xfe4       	MOVFF _TOSU, _PREINC1 
00489a   ffe4
00489c   0006     pop                      	POP 
00489e   d7f6     bra	0x488c               	BRA	_00212_DS_
                                           _00214_DS_:
0048a0   cfe9     movff	0xfe9, 0xfe4       	MOVFF _FSR0L, _PREINC1 
0048a2   ffe4
0048a4   52e4     movf	0xe4, 0x1, 0        	MOVF _PREINC1, 1, 0 
0048a6   cfe1     movff	0xfe1, 0x2ae       	MOVFF _FSR1L, _SPvalue 
0048a8   f2ae
0048aa   cfe2     movff	0xfe2, 0x2af       	MOVFF _FSR1H, _SPvalue+1 
0048ac   f2af
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0048ae   0104     movlb	0x4                	BANKSEL	_currentTask
0048b0   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0048b2   0d10     mullw	0x10               	MULLW	0x10
0048b4   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0048b6   f000
0048b8   6a01     clrf	0x1, 0              	CLRF	r0x01
0048ba   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
0048bc   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0048be   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
0048c0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0048c2   0e03     movlw	0x3                	MOVLW	0x03
0048c4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0048c6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0048c8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0048ca   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0048cc   ffe9
0048ce   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0048d0   ffea
0048d2   c2ae     movff	0x2ae, 0xfee       	MOVFF	_SPvalue, POSTINC0
0048d4   ffee
0048d6   c2af     movff	0x2af, 0xfef       	MOVFF	(_SPvalue + 1), INDF0
0048d8   ffef
0048da   c403     movff	0x403, 0x404       	MOVFF	_SelectedTask, _currentTask
0048dc   f404
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0048de   0104     movlb	0x4                	BANKSEL	_currentTask
0048e0   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0048e2   0d10     mullw	0x10               	MULLW	0x10
0048e4   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0048e6   f000
0048e8   6a01     clrf	0x1, 0              	CLRF	r0x01
0048ea   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
0048ec   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0048ee   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
0048f0   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0048f2   0e03     movlw	0x3                	MOVLW	0x03
0048f4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0048f6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0048f8   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0048fa   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0048fc   ffe9
0048fe   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
004900   ffea
004902   cfee     movff	0xfee, 0x2ae       	MOVFF	POSTINC0, _SPvalue
004904   f2ae
004906   cfef     movff	0xfef, 0x2af       	MOVFF	INDF0, (_SPvalue + 1)
004908   f2af
00490a   c2ae     movff	0x2ae, 0xfe1       	MOVFF _SPvalue, _FSR1L 
00490c   ffe1
00490e   c2af     movff	0x2af, 0xfe2       	MOVFF _SPvalue+1, _FSR1H 
004910   ffe2
004912   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
004914   ffe9
004916   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
004918   ffe9
00491a   6afc     clrf	0xfc, 0             	CLRF	_STKPTR
                                           _00215_DS_:
00491c   50e9     movf	0xe9, 0, 0          	MOVF	_FSR0L, W
00491e   5cfc     subwf	0xfc, 0, 0         	SUBWF	_STKPTR, W
004920   e208     bc	0x4932                	BC	_00221_DS_
004922   0005     push                     	PUSH 
004924   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004926   6eff     movwf	0xff, 0            	MOVWF _TOSU, 0 
004928   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
00492a   6efe     movwf	0xfe, 0            	MOVWF _TOSH, 0 
00492c   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
00492e   6efd     movwf	0xfd, 0            	MOVWF _TOSL, 0 
004930   d7f5     bra	0x491c               	BRA	_00215_DS_
                                           _00221_DS_:
004932   cfe5     movff	0xfe5, 0xffb       	MOVFF POSTDEC1, _PCLATU 
004934   fffb
004936   cfe5     movff	0xfe5, 0xffa       	MOVFF POSTDEC1, _PCLATH 
004938   fffa
00493a   cfe5     movff	0xfe5, 0xff4       	MOVFF POSTDEC1, _PRODH 
00493c   fff4
00493e   cfe5     movff	0xfe5, 0xff3       	MOVFF POSTDEC1, _PRODL 
004940   fff3
004942   cfe5     movff	0xfe5, 0xff8       	MOVFF POSTDEC1, _TBLPTRU 
004944   fff8
004946   cfe5     movff	0xfe5, 0xff7       	MOVFF POSTDEC1, _TBLPTRH 
004948   fff7
00494a   cfe5     movff	0xfe5, 0xff6       	MOVFF POSTDEC1, _TBLPTRL 
00494c   fff6
00494e   cfe5     movff	0xfe5, 0xff5       	MOVFF POSTDEC1, _TABLAT 
004950   fff5
004952   cfe5     movff	0xfe5, 0xfea       	MOVFF POSTDEC1, _FSR0H 
004954   ffea
004956   cfe5     movff	0xfe5, 0xfe9       	MOVFF POSTDEC1, _FSR0L 
004958   ffe9
00495a   cfe5     movff	0xfe5, 0xfd9       	MOVFF POSTDEC1, _FSR2L 
00495c   ffd9
00495e   cfe5     movff	0xfe5, 0xfda       	MOVFF POSTDEC1, _FSR2H 
004960   ffda
004962   cfda     movff	0xfda, 0xfe2       	MOVFF _FSR2H, _FSR1H 
004964   ffe2
004966   cfe5     movff	0xfe5, 0xfe0       	MOVFF POSTDEC1, _BSR 
004968   ffe0
00496a   cfe5     movff	0xfe5, 0xfe8       	MOVFF POSTDEC1, _WREG 
00496c   ffe8
00496e   cfe5     movff	0xfe5, 0xfd8       	MOVFF POSTDEC1, _STATUS 
004970   ffd8
004972   0010     retfie	0                 	RETFIE 0 
004974   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004976   f001
004978   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00497a   f000
00497c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00497e   ffd9
004980   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
004982   ffda
004984   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__SerialTxHandler	code
                                           _SerialTxHandler:
                                           ;	.line	166; drivers/serial.c	void SerialTxHandler(void)
0061ae   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
0061b0   ffe5
0061b2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0061b4   ffe5
0061b6   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
0061b8   ffda
0061ba   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0061bc   ffd9
0061be   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0061c0   ffe5
0061c2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0061c4   ffe5
0061c6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0061c8   ffe5
0061ca   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0061cc   ffe5
0061ce   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0061d0   ffe5
0061d2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0061d4   ffe5
                                           ;	.line	171; drivers/serial.c	if (OSRQueue(&SerialTXBuffer, (INT8U*)&caracter) == NO_ENTRY_AVAILABLE)
0061d6   0e02     movlw	0x2                	MOVLW	HIGH(_SerialTXBuffer)
0061d8   6e01     movwf	0x1, 0             	MOVWF	r0x01
0061da   0eeb     movlw	0xeb               	MOVLW	LOW(_SerialTXBuffer)
0061dc   6e00     movwf	0, 0               	MOVWF	r0x00
0061de   0e80     movlw	0x80               	MOVLW	0x80
0061e0   6e02     movwf	0x2, 0             	MOVWF	r0x02
0061e2   0e04     movlw	0x4                	MOVLW	HIGH(_SerialTxHandler_caracter_1_1)
0061e4   6e04     movwf	0x4, 0             	MOVWF	r0x04
0061e6   0e06     movlw	0x6                	MOVLW	LOW(_SerialTxHandler_caracter_1_1)
0061e8   6e03     movwf	0x3, 0             	MOVWF	r0x03
0061ea   0e80     movlw	0x80               	MOVLW	0x80
0061ec   6e05     movwf	0x5, 0             	MOVWF	r0x05
0061ee   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0061f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061f2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0061f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061f6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0061f8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061fa   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0061fc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0061fe   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006200   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006202   5000     movf	0, 0, 0             	MOVF	r0x00, W
006204   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006206   eca7     call	0x334e, 0           	CALL	_OSRQueue
006208   f019
00620a   6e00     movwf	0, 0               	MOVWF	r0x00
00620c   0e06     movlw	0x6                	MOVLW	0x06
00620e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006210   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006212   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006214   5000     movf	0, 0, 0             	MOVF	r0x00, W
006216   0a03     xorlw	0x3                	XORLW	0x03
006218   e115     bnz	0x6244               	BNZ	_00198_DS_
                                           ;	.line	173; drivers/serial.c	PIE1bits.TXIE = 0;
00621a   989d     bcf	0x9d, 0x4, 0         	BCF	_PIE1bits, 4
00621c   0102     movlb	0x2                	BANKSEL	_WaitingSerialTXBuffer
                                           ;	.line	174; drivers/serial.c	if (WaitingSerialTXBuffer == 1)
00621e   51b1     movf	0xb1, 0, 0x1        	MOVF	_WaitingSerialTXBuffer, W, B
006220   0a01     xorlw	0x1                	XORLW	0x01
006222   e112     bnz	0x6248               	BNZ	_00200_DS_
                                           _00207_DS_:
006224   0104     movlb	0x4                	BANKSEL	(_SerialTX + 2)
                                           ;	.line	176; drivers/serial.c	(void)OSSemPost(SerialTX);
006226   5102     movf	0x2, 0, 0x1         	MOVF	(_SerialTX + 2), W, B
006228   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00622a   0104     movlb	0x4                	BANKSEL	(_SerialTX + 1)
00622c   5101     movf	0x1, 0, 0x1         	MOVF	(_SerialTX + 1), W, B
00622e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006230   0104     movlb	0x4                	BANKSEL	_SerialTX
006232   5100     movf	0, 0, 0x1           	MOVF	_SerialTX, W, B
006234   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006236   ecef     call	0x3bde, 0           	CALL	_OSSemPost
006238   f01d
00623a   0e03     movlw	0x3                	MOVLW	0x03
00623c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00623e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006240   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006242   d002     bra	0x6248               	BRA	_00200_DS_
                                           _00198_DS_:
                                           ;	.line	180; drivers/serial.c	TXREG=caracter;
006244   c406     movff	0x406, 0xfad       	MOVFF	_SerialTxHandler_caracter_1_1, _TXREG
006246   ffad
                                           _00200_DS_:
006248   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00624a   f005
00624c   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00624e   f004
006250   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
006252   f003
006254   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
006256   f002
006258   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00625a   f001
00625c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00625e   f000
006260   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006262   ffd9
006264   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006266   ffda
006268   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__SerialRx	code
                                           _SerialRx:
                                           ;	.line	143; drivers/serial.c	void SerialRx(void)
004986   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
004988   ffe5
00498a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00498c   ffe5
00498e   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
004990   ffda
004992   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
004994   ffd9
004996   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
004998   ffe5
00499a   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00499c   ffe5
00499e   cfd8     movff	0xfd8, 0xfe4       	MOVFF _STATUS, PREINC1 
0049a0   ffe4
0049a2   cfe8     movff	0xfe8, 0xfe4       	MOVFF _WREG, PREINC1 
0049a4   ffe4
0049a6   cfe0     movff	0xfe0, 0xfe4       	MOVFF _BSR, PREINC1 
0049a8   ffe4
0049aa   cfda     movff	0xfda, 0xfe4       	MOVFF _FSR2H, PREINC1 
0049ac   ffe4
0049ae   cfe2     movff	0xfe2, 0xfda       	MOVFF _FSR1H, _FSR2H 
0049b0   ffda
0049b2   cfd9     movff	0xfd9, 0xfe4       	MOVFF _FSR2L, PREINC1 
0049b4   ffe4
0049b6   cfe9     movff	0xfe9, 0xfe4       	MOVFF _FSR0L, PREINC1 
0049b8   ffe4
0049ba   cfea     movff	0xfea, 0xfe4       	MOVFF _FSR0H, PREINC1 
0049bc   ffe4
0049be   cff5     movff	0xff5, 0xfe4       	MOVFF _TABLAT, PREINC1 
0049c0   ffe4
0049c2   cff6     movff	0xff6, 0xfe4       	MOVFF _TBLPTRL, PREINC1 
0049c4   ffe4
0049c6   cff7     movff	0xff7, 0xfe4       	MOVFF _TBLPTRH, PREINC1 
0049c8   ffe4
0049ca   cff8     movff	0xff8, 0xfe4       	MOVFF _TBLPTRU, PREINC1 
0049cc   ffe4
0049ce   cff3     movff	0xff3, 0xfe4       	MOVFF _PRODL, PREINC1 
0049d0   ffe4
0049d2   cff4     movff	0xff4, 0xfe4       	MOVFF _PRODH, PREINC1 
0049d4   ffe4
0049d6   cffa     movff	0xffa, 0xfe4       	MOVFF _PCLATH, PREINC1 
0049d8   ffe4
0049da   cffb     movff	0xffb, 0xfe4       	MOVFF _PCLATU, PREINC1 
0049dc   ffe4
0049de   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	149; drivers/serial.c	OS_INT_ENTER();
0049e0   2bad     incf	0xad, 0x1, 0x1      	INCF	_iNesting, F, B
                                           ;	.line	152; drivers/serial.c	SerialRxHandler();
0049e2   ec82     call	0x6904, 0           	CALL	_SerialRxHandler
0049e4   f034
0049e6   0102     movlb	0x2                	BANKSEL	_iNesting
                                           ;	.line	161; drivers/serial.c	OS_INT_EXIT();
0049e8   07ad     decf	0xad, 0x1, 0x1      	DECF	_iNesting, F, B
0049ea   0102     movlb	0x2                	BANKSEL	_iNesting
0049ec   51ad     movf	0xad, 0, 0x1        	MOVF	_iNesting, W, B
0049ee   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0049f0   d05f     bra	0x4ab0               	BRA	_00179_DS_
0049f2   ec2c     call	0x6a58, 0           	CALL	_OSSchedule
0049f4   f035
0049f6   0104     movlb	0x4                	BANKSEL	_SelectedTask
0049f8   6f03     movwf	0x3, 0x1           	MOVWF	_SelectedTask, B
0049fa   0104     movlb	0x4                	BANKSEL	_currentTask
0049fc   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
0049fe   0104     movlb	0x4                	BANKSEL	_SelectedTask
004a00   1903     xorwf	0x3, 0, 0x1        	XORWF	_SelectedTask, W, B
004a02   e101     bnz	0x4a06               	BNZ	_00189_DS_
004a04   d055     bra	0x4ab0               	BRA	_00179_DS_
                                           _00188_DS_:
                                           _00189_DS_:
004a06   cffc     movff	0xffc, 0xfe9       	MOVFF _STKPTR, _FSR0L 
004a08   ffe9
                                           _00170_DS_:
004a0a   50fc     movf	0xfc, 0, 0          	MOVF	_STKPTR, W
004a0c   e008     bz	0x4a1e                	BZ	_00172_DS_
004a0e   cffd     movff	0xffd, 0xfe4       	MOVFF _TOSL, _PREINC1 
004a10   ffe4
004a12   cffe     movff	0xffe, 0xfe4       	MOVFF _TOSH, _PREINC1 
004a14   ffe4
004a16   cfff     movff	0xfff, 0xfe4       	MOVFF _TOSU, _PREINC1 
004a18   ffe4
004a1a   0006     pop                      	POP 
004a1c   d7f6     bra	0x4a0a               	BRA	_00170_DS_
                                           _00172_DS_:
004a1e   cfe9     movff	0xfe9, 0xfe4       	MOVFF _FSR0L, _PREINC1 
004a20   ffe4
004a22   52e4     movf	0xe4, 0x1, 0        	MOVF _PREINC1, 1, 0 
004a24   cfe1     movff	0xfe1, 0x2ae       	MOVFF _FSR1L, _SPvalue 
004a26   f2ae
004a28   cfe2     movff	0xfe2, 0x2af       	MOVFF _FSR1H, _SPvalue+1 
004a2a   f2af
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004a2c   0104     movlb	0x4                	BANKSEL	_currentTask
004a2e   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
004a30   0d10     mullw	0x10               	MULLW	0x10
004a32   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
004a34   f000
004a36   6a01     clrf	0x1, 0              	CLRF	r0x01
004a38   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
004a3a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004a3c   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
004a3e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004a40   0e03     movlw	0x3                	MOVLW	0x03
004a42   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004a44   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004a46   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004a48   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004a4a   ffe9
004a4c   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
004a4e   ffea
004a50   c2ae     movff	0x2ae, 0xfee       	MOVFF	_SPvalue, POSTINC0
004a52   ffee
004a54   c2af     movff	0x2af, 0xfef       	MOVFF	(_SPvalue + 1), INDF0
004a56   ffef
004a58   c403     movff	0x403, 0x404       	MOVFF	_SelectedTask, _currentTask
004a5a   f404
                                           ; ;multiply lit val:0x10 by variable _currentTask and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
004a5c   0104     movlb	0x4                	BANKSEL	_currentTask
004a5e   5104     movf	0x4, 0, 0x1         	MOVF	_currentTask, W, B
004a60   0d10     mullw	0x10               	MULLW	0x10
004a62   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
004a64   f000
004a66   6a01     clrf	0x1, 0              	CLRF	r0x01
004a68   0e00     movlw	0                  	MOVLW	LOW(_ContextTask)
004a6a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004a6c   0e02     movlw	0x2                	MOVLW	HIGH(_ContextTask)
004a6e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
004a70   0e03     movlw	0x3                	MOVLW	0x03
004a72   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
004a74   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
004a76   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
004a78   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
004a7a   ffe9
004a7c   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
004a7e   ffea
004a80   cfee     movff	0xfee, 0x2ae       	MOVFF	POSTINC0, _SPvalue
004a82   f2ae
004a84   cfef     movff	0xfef, 0x2af       	MOVFF	INDF0, (_SPvalue + 1)
004a86   f2af
004a88   c2ae     movff	0x2ae, 0xfe1       	MOVFF _SPvalue, _FSR1L 
004a8a   ffe1
004a8c   c2af     movff	0x2af, 0xfe2       	MOVFF _SPvalue+1, _FSR1H 
004a8e   ffe2
004a90   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
004a92   ffe9
004a94   cfe5     movff	0xfe5, 0xfe9       	MOVFF _POSTDEC1, _FSR0L 
004a96   ffe9
004a98   6afc     clrf	0xfc, 0             	CLRF	_STKPTR
                                           _00173_DS_:
004a9a   50e9     movf	0xe9, 0, 0          	MOVF	_FSR0L, W
004a9c   5cfc     subwf	0xfc, 0, 0         	SUBWF	_STKPTR, W
004a9e   e208     bc	0x4ab0                	BC	_00179_DS_
004aa0   0005     push                     	PUSH 
004aa2   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004aa4   6eff     movwf	0xff, 0            	MOVWF _TOSU, 0 
004aa6   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004aa8   6efe     movwf	0xfe, 0            	MOVWF _TOSH, 0 
004aaa   50e5     movf	0xe5, 0, 0          	MOVF _POSTDEC1, 0, 0 
004aac   6efd     movwf	0xfd, 0            	MOVWF _TOSL, 0 
004aae   d7f5     bra	0x4a9a               	BRA	_00173_DS_
                                           _00179_DS_:
004ab0   cfe5     movff	0xfe5, 0xffb       	MOVFF POSTDEC1, _PCLATU 
004ab2   fffb
004ab4   cfe5     movff	0xfe5, 0xffa       	MOVFF POSTDEC1, _PCLATH 
004ab6   fffa
004ab8   cfe5     movff	0xfe5, 0xff4       	MOVFF POSTDEC1, _PRODH 
004aba   fff4
004abc   cfe5     movff	0xfe5, 0xff3       	MOVFF POSTDEC1, _PRODL 
004abe   fff3
004ac0   cfe5     movff	0xfe5, 0xff8       	MOVFF POSTDEC1, _TBLPTRU 
004ac2   fff8
004ac4   cfe5     movff	0xfe5, 0xff7       	MOVFF POSTDEC1, _TBLPTRH 
004ac6   fff7
004ac8   cfe5     movff	0xfe5, 0xff6       	MOVFF POSTDEC1, _TBLPTRL 
004aca   fff6
004acc   cfe5     movff	0xfe5, 0xff5       	MOVFF POSTDEC1, _TABLAT 
004ace   fff5
004ad0   cfe5     movff	0xfe5, 0xfea       	MOVFF POSTDEC1, _FSR0H 
004ad2   ffea
004ad4   cfe5     movff	0xfe5, 0xfe9       	MOVFF POSTDEC1, _FSR0L 
004ad6   ffe9
004ad8   cfe5     movff	0xfe5, 0xfd9       	MOVFF POSTDEC1, _FSR2L 
004ada   ffd9
004adc   cfe5     movff	0xfe5, 0xfda       	MOVFF POSTDEC1, _FSR2H 
004ade   ffda
004ae0   cfda     movff	0xfda, 0xfe2       	MOVFF _FSR2H, _FSR1H 
004ae2   ffe2
004ae4   cfe5     movff	0xfe5, 0xfe0       	MOVFF POSTDEC1, _BSR 
004ae6   ffe0
004ae8   cfe5     movff	0xfe5, 0xfe8       	MOVFF POSTDEC1, _WREG 
004aea   ffe8
004aec   cfe5     movff	0xfe5, 0xfd8       	MOVFF POSTDEC1, _STATUS 
004aee   ffd8
004af0   0010     retfie	0                 	RETFIE 0 
004af2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
004af4   f001
004af6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
004af8   f000
004afa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
004afc   ffd9
004afe   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
004b00   ffda
004b02   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__SerialRxHandler	code
                                           _SerialRxHandler:
                                           ;	.line	122; drivers/serial.c	void SerialRxHandler(void)
006904   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006906   ffe5
006908   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00690a   ffe5
00690c   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00690e   ffda
006910   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006912   ffd9
006914   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006916   ffe5
                                           ;	.line	127; drivers/serial.c	caracter = RCREG;
006918   cfae     movff	0xfae, 0           	MOVFF	_RCREG, r0x00
00691a   f000
                                           ;	.line	130; drivers/serial.c	if( RCSTAbits.OERR )
00691c   a2ab     btfss	0xab, 0x1, 0       	BTFSS	_RCSTAbits, 1
00691e   d002     bra	0x6924               	BRA	_00157_DS_
                                           ;	.line	132; drivers/serial.c	RCSTAbits.CREN = 0;
006920   98ab     bcf	0xab, 0x4, 0         	BCF	_RCSTAbits, 4
                                           ;	.line	133; drivers/serial.c	RCSTAbits.CREN = 1;
006922   88ab     bsf	0xab, 0x4, 0         	BSF	_RCSTAbits, 4
                                           _00157_DS_:
                                           ;	.line	136; drivers/serial.c	if (OSQueuePost(QSerialRX,caracter) == BUFFER_UNDERRUN)
006924   5000     movf	0, 0, 0             	MOVF	r0x00, W
006926   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006928   0103     movlb	0x3                	BANKSEL	(_QSerialRX + 2)
00692a   51fd     movf	0xfd, 0, 0x1        	MOVF	(_QSerialRX + 2), W, B
00692c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00692e   0103     movlb	0x3                	BANKSEL	(_QSerialRX + 1)
006930   51fc     movf	0xfc, 0, 0x1        	MOVF	(_QSerialRX + 1), W, B
006932   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006934   0103     movlb	0x3                	BANKSEL	_QSerialRX
006936   51fb     movf	0xfb, 0, 0x1        	MOVF	_QSerialRX, W, B
006938   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00693a   ec6c     call	0x26d8, 0           	CALL	_OSQueuePost
00693c   f013
00693e   6e00     movwf	0, 0               	MOVWF	r0x00
006940   0e04     movlw	0x4                	MOVLW	0x04
006942   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006944   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006946   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006948   5000     movf	0, 0, 0             	MOVF	r0x00, W
00694a   0a01     xorlw	0x1                	XORLW	0x01
00694c   e10f     bnz	0x696c               	BNZ	_00160_DS_
                                           _00165_DS_:
00694e   0103     movlb	0x3                	BANKSEL	(_QSerialRX + 2)
                                           ;	.line	139; drivers/serial.c	(void)OSCleanQueue(QSerialRX);
006950   51fd     movf	0xfd, 0, 0x1        	MOVF	(_QSerialRX + 2), W, B
006952   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006954   0103     movlb	0x3                	BANKSEL	(_QSerialRX + 1)
006956   51fc     movf	0xfc, 0, 0x1        	MOVF	(_QSerialRX + 1), W, B
006958   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00695a   0103     movlb	0x3                	BANKSEL	_QSerialRX
00695c   51fb     movf	0xfb, 0, 0x1        	MOVF	_QSerialRX, W, B
00695e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006960   ec98     call	0x4f30, 0           	CALL	_OSCleanQueue
006962   f027
006964   0e03     movlw	0x3                	MOVLW	0x03
006966   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
006968   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00696a   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           _00160_DS_:
00696c   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00696e   f000
006970   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
006972   ffd9
006974   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006976   ffda
006978   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__Serial_Envia_Frase	code
                                           _Serial_Envia_Frase:
                                           ;	.line	112; drivers/serial.c	void Serial_Envia_Frase(char *string)
00688a   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
00688c   ffe5
00688e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006890   ffe5
006892   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
006894   ffda
006896   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006898   ffd9
00689a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00689c   ffe5
00689e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0068a0   ffe5
0068a2   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0068a4   ffe5
0068a6   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0068a8   ffe5
0068aa   0e03     movlw	0x3                	MOVLW	0x03
0068ac   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
0068ae   f000
0068b0   0e04     movlw	0x4                	MOVLW	0x04
0068b2   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
0068b4   f001
0068b6   0e05     movlw	0x5                	MOVLW	0x05
0068b8   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
0068ba   f002
                                           _00148_DS_:
                                           ;	.line	114; drivers/serial.c	while(*string)
0068bc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0068be   ffe9
0068c0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0068c2   fff3
0068c4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0068c6   ec78     call	0x6ef0, 0           	CALL	__gptrget1
0068c8   f037
0068ca   6e03     movwf	0x3, 0             	MOVWF	r0x03
0068cc   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0068ce   e00d     bz	0x68ea                	BZ	_00151_DS_
                                           ;	.line	116; drivers/serial.c	Serial_Envia_Caracter(*string);
0068d0   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0068d2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0068d4   ec91     call	0x6322, 0           	CALL	_Serial_Envia_Caracter
0068d6   f031
0068d8   2ae1     incf	0xe1, 0x1, 0        	INCF	FSR1L, F
0068da   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0068dc   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	117; drivers/serial.c	string++;
0068de   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0068e0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0068e2   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
0068e4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0068e6   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
0068e8   d7e9     bra	0x68bc               	BRA	_00148_DS_
                                           _00151_DS_:
0068ea   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0068ec   f003
0068ee   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0068f0   f002
0068f2   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0068f4   f001
0068f6   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0068f8   f000
0068fa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0068fc   ffd9
0068fe   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
006900   ffda
006902   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__Serial_Envia_Caracter	code
                                           _Serial_Envia_Caracter:
                                           ;	.line	90; drivers/serial.c	void Serial_Envia_Caracter(CHAR8 newdata)
006322   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
006324   ffe5
006326   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
006328   ffe5
00632a   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
00632c   ffda
00632e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
006330   ffd9
006332   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
006334   ffe5
006336   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
006338   ffe5
00633a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00633c   ffe5
00633e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
006340   ffe5
006342   0e03     movlw	0x3                	MOVLW	0x03
006344   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
006346   f000
                                           _00130_DS_:
                                           ;	.line	92; drivers/serial.c	while (OSWQueue(&SerialTXBuffer, (INT8U)newdata) == BUFFER_UNDERRUN)
006348   0e02     movlw	0x2                	MOVLW	HIGH(_SerialTXBuffer)
00634a   6e02     movwf	0x2, 0             	MOVWF	r0x02
00634c   0eeb     movlw	0xeb               	MOVLW	LOW(_SerialTXBuffer)
00634e   6e01     movwf	0x1, 0             	MOVWF	r0x01
006350   0e80     movlw	0x80               	MOVLW	0x80
006352   6e03     movwf	0x3, 0             	MOVWF	r0x03
006354   5000     movf	0, 0, 0             	MOVF	r0x00, W
006356   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006358   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00635a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00635c   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00635e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006360   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006362   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006364   eccd     call	0x359a, 0           	CALL	_OSWQueue
006366   f01a
006368   6e01     movwf	0x1, 0             	MOVWF	r0x01
00636a   0e04     movlw	0x4                	MOVLW	0x04
00636c   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00636e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
006370   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
006372   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
006374   0a01     xorlw	0x1                	XORLW	0x01
006376   e119     bnz	0x63aa               	BNZ	_00132_DS_
                                           ;	.line	94; drivers/serial.c	OSEnterCritical();
006378   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
                                           ;	.line	95; drivers/serial.c	WaitingSerialTXBuffer = 1;
00637a   0e01     movlw	0x1                	MOVLW	0x01
00637c   0102     movlb	0x2                	BANKSEL	_WaitingSerialTXBuffer
00637e   6fb1     movwf	0xb1, 0x1          	MOVWF	_WaitingSerialTXBuffer, B
                                           ;	.line	96; drivers/serial.c	OSExitCritical();
006380   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	97; drivers/serial.c	(void)OSSemPend(SerialTX,0);
006382   0e00     movlw	0                  	MOVLW	0x00
006384   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006386   0e00     movlw	0                  	MOVLW	0x00
006388   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00638a   0104     movlb	0x4                	BANKSEL	(_SerialTX + 2)
00638c   5102     movf	0x2, 0, 0x1         	MOVF	(_SerialTX + 2), W, B
00638e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006390   0104     movlb	0x4                	BANKSEL	(_SerialTX + 1)
006392   5101     movf	0x1, 0, 0x1         	MOVF	(_SerialTX + 1), W, B
006394   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
006396   0104     movlb	0x4                	BANKSEL	_SerialTX
006398   5100     movf	0, 0, 0x1           	MOVF	_SerialTX, W, B
00639a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00639c   ece8     call	0x9d0, 0            	CALL	_OSSemPend
00639e   f004
0063a0   0e05     movlw	0x5                	MOVLW	0x05
0063a2   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0063a4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0063a6   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
0063a8   d7cf     bra	0x6348               	BRA	_00130_DS_
                                           _00132_DS_:
                                           ;	.line	100; drivers/serial.c	OSEnterCritical();
0063aa   9ef2     bcf	0xf2, 0x7, 0         	BCF	_INTCONbits, 7
0063ac   0102     movlb	0x2                	BANKSEL	_WaitingSerialTXBuffer
                                           ;	.line	101; drivers/serial.c	WaitingSerialTXBuffer = 0;
0063ae   6bb1     clrf	0xb1, 0x1           	CLRF	_WaitingSerialTXBuffer, B
                                           ;	.line	102; drivers/serial.c	OSExitCritical();
0063b0   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
                                           ;	.line	104; drivers/serial.c	if (PIE1bits.TXIE != 1)
0063b2   6a00     clrf	0, 0                	CLRF	r0x00
0063b4   b89d     btfsc	0x9d, 0x4, 0       	BTFSC	_PIE1bits, 4
0063b6   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
0063b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0063ba   0a01     xorlw	0x1                	XORLW	0x01
0063bc   e001     bz	0x63c0                	BZ	_00135_DS_
                                           ;	.line	106; drivers/serial.c	PIE1bits.TXIE = 1;
0063be   889d     bsf	0x9d, 0x4, 0         	BSF	_PIE1bits, 4
                                           _00135_DS_:
0063c0   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0063c2   f003
0063c4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0063c6   f002
0063c8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0063ca   f001
0063cc   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0063ce   f000
0063d0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0063d2   ffd9
0063d4   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
0063d6   ffda
0063d8   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_serial__Serial_Init	code
                                           _Serial_Init:
                                           ;	.line	22; drivers/serial.c	void Serial_Init(unsigned int baudrate, INT8U priority)
003de4   cfda     movff	0xfda, 0xfe5       	MOVFF	FSR2H, POSTDEC1
003de6   ffe5
003de8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
003dea   ffe5
003dec   cfe2     movff	0xfe2, 0xfda       	MOVFF	FSR1H, FSR2H
003dee   ffda
003df0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
003df2   ffd9
003df4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
003df6   ffe5
003df8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
003dfa   ffe5
003dfc   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
003dfe   ffe5
003e00   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
003e02   ffe5
003e04   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
003e06   ffe5
003e08   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
003e0a   ffe5
003e0c   0e03     movlw	0x3                	MOVLW	0x03
003e0e   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
003e10   f000
003e12   0e04     movlw	0x4                	MOVLW	0x04
003e14   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
003e16   f001
003e18   0e05     movlw	0x5                	MOVLW	0x05
003e1a   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
003e1c   f002
                                           ;	.line	28; drivers/serial.c	ulBaud = configCPU_CLOCK_HZ / baudrate;
003e1e   6a03     clrf	0x3, 0              	CLRF	r0x03
003e20   6a04     clrf	0x4, 0              	CLRF	r0x04
003e22   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003e24   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e26   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e28   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e2a   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003e2c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e2e   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e30   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e32   0e01     movlw	0x1                	MOVLW	0x01
003e34   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e36   0ee8     movlw	0xe8               	MOVLW	0xe8
003e38   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e3a   0e48     movlw	0x48               	MOVLW	0x48
003e3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e3e   0e00     movlw	0                  	MOVLW	0x00
003e40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003e42   ec4d     call	0x569a, 0           	CALL	__divulong
003e44   f02b
003e46   6e00     movwf	0, 0               	MOVWF	r0x00
003e48   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
003e4a   f001
003e4c   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
003e4e   f003
003e50   cfe9     movff	0xfe9, 0x4         	MOVFF	FSR0L, r0x04
003e52   f004
003e54   0e08     movlw	0x8                	MOVLW	0x08
003e56   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003e58   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003e5a   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
                                           ;	.line	29; drivers/serial.c	ulBaud /= (INT32U) 16;
003e5c   0ef0     movlw	0xf0               	MOVLW	0xf0
003e5e   1600     andwf	0, 0x1, 0          	ANDWF	r0x00, F
003e60   3a00     swapf	0, 0x1, 0          	SWAPF	r0x00, F
003e62   3a01     swapf	0x1, 0x1, 0        	SWAPF	r0x01, F
003e64   1401     andwf	0x1, 0, 0          	ANDWF	r0x01, W
003e66   1a01     xorwf	0x1, 0x1, 0        	XORWF	r0x01, F
003e68   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003e6a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003e6c   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
003e6e   0bf0     andlw	0xf0               	ANDLW	0xf0
003e70   1201     iorwf	0x1, 0x1, 0        	IORWF	r0x01, F
003e72   0ef0     movlw	0xf0               	MOVLW	0xf0
003e74   1603     andwf	0x3, 0x1, 0        	ANDWF	r0x03, F
003e76   3a03     swapf	0x3, 0x1, 0        	SWAPF	r0x03, F
003e78   3a04     swapf	0x4, 0x1, 0        	SWAPF	r0x04, F
003e7a   1404     andwf	0x4, 0, 0          	ANDWF	r0x04, W
003e7c   1a04     xorwf	0x4, 0x1, 0        	XORWF	r0x04, F
003e7e   2603     addwf	0x3, 0x1, 0        	ADDWF	r0x03, F
                                           ;	.line	30; drivers/serial.c	ulBaud -= (INT32U) 1;
003e80   0eff     movlw	0xff               	MOVLW	0xff
003e82   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
003e84   0eff     movlw	0xff               	MOVLW	0xff
003e86   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
003e88   0eff     movlw	0xff               	MOVLW	0xff
003e8a   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
003e8c   0eff     movlw	0xff               	MOVLW	0xff
003e8e   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
                                           ;	.line	34; drivers/serial.c	TXSTA = 0;
003e90   6aac     clrf	0xac, 0             	CLRF	_TXSTA
                                           ;	.line	35; drivers/serial.c	RCSTA = 0;
003e92   6aab     clrf	0xab, 0             	CLRF	_RCSTA
                                           ;	.line	38; drivers/serial.c	SPBRG = (INT8U) ulBaud;
003e94   5000     movf	0, 0, 0             	MOVF	r0x00, W
003e96   6eaf     movwf	0xaf, 0            	MOVWF	_SPBRG
                                           ;	.line	41; drivers/serial.c	TRISCbits.TRISC6 = 0;
003e98   9c94     bcf	0x94, 0x6, 0         	BCF	_TRISCbits, 6
                                           ;	.line	42; drivers/serial.c	TRISCbits.TRISC7 = 1;
003e9a   8e94     bsf	0x94, 0x7, 0         	BSF	_TRISCbits, 7
                                           ;	.line	45; drivers/serial.c	TXSTAbits.BRGH = 1;
003e9c   84ac     bsf	0xac, 0x2, 0         	BSF	_TXSTAbits, 2
                                           ;	.line	46; drivers/serial.c	TXSTAbits.TXEN=1;
003e9e   8aac     bsf	0xac, 0x5, 0         	BSF	_TXSTAbits, 5
                                           ;	.line	49; drivers/serial.c	RCSTAbits.SPEN = 1;
003ea0   8eab     bsf	0xab, 0x7, 0         	BSF	_RCSTAbits, 7
                                           ;	.line	50; drivers/serial.c	RCSTAbits.CREN = 1;
003ea2   88ab     bsf	0xab, 0x4, 0         	BSF	_RCSTAbits, 4
                                           ;	.line	54; drivers/serial.c	PIE1bits.RCIE = 1;
003ea4   8a9d     bsf	0x9d, 0x5, 0         	BSF	_PIE1bits, 5
                                           ;	.line	59; drivers/serial.c	if (OSMutexCreate(&SerialResource,priority) != ALLOC_EVENT_OK)
003ea6   0e03     movlw	0x3                	MOVLW	HIGH(_SerialResource)
003ea8   6e01     movwf	0x1, 0             	MOVWF	r0x01
003eaa   0ef5     movlw	0xf5               	MOVLW	LOW(_SerialResource)
003eac   6e00     movwf	0, 0               	MOVWF	r0x00
003eae   0e80     movlw	0x80               	MOVLW	0x80
003eb0   6e03     movwf	0x3, 0             	MOVWF	r0x03
003eb2   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003eb4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003eb6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003eb8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003eba   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003ebc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ebe   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ec0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ec2   ece8     call	0x39d0, 0           	CALL	_OSMutexCreate
003ec4   f01c
003ec6   6e00     movwf	0, 0               	MOVWF	r0x00
003ec8   0e04     movlw	0x4                	MOVLW	0x04
003eca   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003ecc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003ece   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
003ed0   5000     movf	0, 0, 0             	MOVF	r0x00, W
003ed2   e001     bz	0x3ed6                	BZ	_00109_DS_
                                           _00106_DS_:
                                           ;	.line	63; drivers/serial.c	while(1){};
003ed4   d7ff     bra	0x3ed4               	BRA	_00106_DS_
                                           _00109_DS_:
                                           ;	.line	66; drivers/serial.c	if (OSQueueCreate(&SerialTXBuffer,64,&QSerialTX) != ALLOC_EVENT_OK)
003ed6   0e02     movlw	0x2                	MOVLW	HIGH(_SerialTXBuffer)
003ed8   6e01     movwf	0x1, 0             	MOVWF	r0x01
003eda   0eeb     movlw	0xeb               	MOVLW	LOW(_SerialTXBuffer)
003edc   6e00     movwf	0, 0               	MOVWF	r0x00
003ede   0e80     movlw	0x80               	MOVLW	0x80
003ee0   6e02     movwf	0x2, 0             	MOVWF	r0x02
003ee2   0e03     movlw	0x3                	MOVLW	HIGH(_QSerialTX)
003ee4   6e04     movwf	0x4, 0             	MOVWF	r0x04
003ee6   0ef8     movlw	0xf8               	MOVLW	LOW(_QSerialTX)
003ee8   6e03     movwf	0x3, 0             	MOVWF	r0x03
003eea   0e80     movlw	0x80               	MOVLW	0x80
003eec   6e05     movwf	0x5, 0             	MOVWF	r0x05
003eee   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003ef0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ef2   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003ef4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003ef6   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003ef8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003efa   0e00     movlw	0                  	MOVLW	0x00
003efc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003efe   0e40     movlw	0x40               	MOVLW	0x40
003f00   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f02   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003f04   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f06   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003f08   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f0a   5000     movf	0, 0, 0             	MOVF	r0x00, W
003f0c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f0e   ecac     call	0x2358, 0           	CALL	_OSQueueCreate
003f10   f011
003f12   6e00     movwf	0, 0               	MOVWF	r0x00
003f14   0e08     movlw	0x8                	MOVLW	0x08
003f16   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003f18   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f1a   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
003f1c   5000     movf	0, 0, 0             	MOVF	r0x00, W
003f1e   e001     bz	0x3f22                	BZ	_00114_DS_
                                           _00111_DS_:
                                           ;	.line	70; drivers/serial.c	while(1){};
003f20   d7ff     bra	0x3f20               	BRA	_00111_DS_
                                           _00114_DS_:
                                           ;	.line	73; drivers/serial.c	if (OSQueueCreate(&SerialRXBuffer,64,&QSerialRX) != ALLOC_EVENT_OK)
003f22   0e03     movlw	0x3                	MOVLW	HIGH(_SerialRXBuffer)
003f24   6e01     movwf	0x1, 0             	MOVWF	r0x01
003f26   0e80     movlw	0x80               	MOVLW	LOW(_SerialRXBuffer)
003f28   6e00     movwf	0, 0               	MOVWF	r0x00
003f2a   0e80     movlw	0x80               	MOVLW	0x80
003f2c   6e02     movwf	0x2, 0             	MOVWF	r0x02
003f2e   0e03     movlw	0x3                	MOVLW	HIGH(_QSerialRX)
003f30   6e04     movwf	0x4, 0             	MOVWF	r0x04
003f32   0efb     movlw	0xfb               	MOVLW	LOW(_QSerialRX)
003f34   6e03     movwf	0x3, 0             	MOVWF	r0x03
003f36   0e80     movlw	0x80               	MOVLW	0x80
003f38   6e05     movwf	0x5, 0             	MOVWF	r0x05
003f3a   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
003f3c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f3e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
003f40   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f42   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
003f44   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f46   0e00     movlw	0                  	MOVLW	0x00
003f48   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f4a   0e40     movlw	0x40               	MOVLW	0x40
003f4c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f4e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003f50   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f52   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003f54   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f56   5000     movf	0, 0, 0             	MOVF	r0x00, W
003f58   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f5a   ecac     call	0x2358, 0           	CALL	_OSQueueCreate
003f5c   f011
003f5e   6e00     movwf	0, 0               	MOVWF	r0x00
003f60   0e08     movlw	0x8                	MOVLW	0x08
003f62   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003f64   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f66   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
003f68   5000     movf	0, 0, 0             	MOVF	r0x00, W
003f6a   e001     bz	0x3f6e                	BZ	_00119_DS_
                                           _00116_DS_:
                                           ;	.line	77; drivers/serial.c	while(1){};
003f6c   d7ff     bra	0x3f6c               	BRA	_00116_DS_
                                           _00119_DS_:
                                           ;	.line	80; drivers/serial.c	if (OSSemCreate(0, &SerialTX) != ALLOC_EVENT_OK)
003f6e   0e04     movlw	0x4                	MOVLW	HIGH(_SerialTX)
003f70   6e01     movwf	0x1, 0             	MOVWF	r0x01
003f72   0e00     movlw	0                  	MOVLW	LOW(_SerialTX)
003f74   6e00     movwf	0, 0               	MOVWF	r0x00
003f76   0e80     movlw	0x80               	MOVLW	0x80
003f78   6e02     movwf	0x2, 0             	MOVWF	r0x02
003f7a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
003f7c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f7e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
003f80   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f82   5000     movf	0, 0, 0             	MOVF	r0x00, W
003f84   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f86   0e00     movlw	0                  	MOVLW	0x00
003f88   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
003f8a   ecbe     call	0x417c, 0           	CALL	_OSSemCreate
003f8c   f020
003f8e   6e00     movwf	0, 0               	MOVWF	r0x00
003f90   0e04     movlw	0x4                	MOVLW	0x04
003f92   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
003f94   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
003f96   2ae2     incf	0xe2, 0x1, 0        	INCF	FSR1H, F
003f98   5000     movf	0, 0, 0             	MOVF	r0x00, W
003f9a   e001     bz	0x3f9e                	BZ	_00125_DS_
                                           _00121_DS_:
                                           ;	.line	84; drivers/serial.c	while(1){};
003f9c   d7ff     bra	0x3f9c               	BRA	_00121_DS_
                                           _00125_DS_:
003f9e   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
003fa0   f005
003fa2   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
003fa4   f004
003fa6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
003fa8   f003
003faa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
003fac   f002
003fae   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
003fb0   f001
003fb2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
003fb4   f000
003fb6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
003fb8   ffd9
003fba   cfe4     movff	0xfe4, 0xfda       	MOVFF	PREINC1, FSR2H
003fbc   ffda
003fbe   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1792 (0x0700) bytes ( 1.37%)
                                           ;           	  896 (0x0380) words
                                           ; udata size:	   51 (0x0033) bytes ( 3.98%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
